{
  QueueItem reservedOffer=offerIdQueue.peek();
  TxnReservePollOperation operation=new TxnReservePollOperation(name,timeout,reservedOffer == null ? -1 : reservedOffer.getItemId());
  try {
    Invocation invocation=getNodeEngine().getOperationService().createInvocationBuilder(QueueService.SERVICE_NAME,operation,partitionId).build();
    Future<QueueItem> f=invocation.invoke();
    QueueItem item=f.get();
    if (item != null) {
      if (reservedOffer != null && item.getItemId() == reservedOffer.getItemId()) {
        offerIdQueue.poll();
        tx.removeTransactionLog(reservedOffer.getItemId());
        return reservedOffer.getData();
      }
      if (pollIdQueue.contains(item.getItemId()) || offerIdQueue.contains(item.getItemId())) {
        throw new TransactionException("Duplicate itemId: " + item.getItemId());
      }
      pollIdQueue.offer(item.getItemId());
      tx.addTransactionLog(new QueueTransactionLog(item.getItemId(),name,partitionId,new TxnPollOperation(name,item.getItemId())));
      return item.getData();
    }
  }
 catch (  Throwable t) {
    ExceptionUtil.rethrow(t);
  }
  return null;
}
