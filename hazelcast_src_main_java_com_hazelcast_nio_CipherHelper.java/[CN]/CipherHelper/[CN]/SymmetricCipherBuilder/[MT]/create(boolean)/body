{
  try {
    int mode=(encryptMode) ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE;
    Cipher cipher=Cipher.getInstance(algorithm);
    String keyAlgorithm=findKeyAlgorithm(algorithm);
    byte[] saltDigest=buildKeyBytes();
    SecretKey key=null;
    int ivLength=8;
    AlgorithmParameterSpec paramSpec=null;
    if (algorithm.startsWith("AES")) {
      ivLength=16;
      key=new SecretKeySpec(keyBytes,"AES");
    }
 else     if (algorithm.startsWith("Blowfish")) {
      key=new SecretKeySpec(keyBytes,"Blowfish");
    }
 else     if (algorithm.startsWith("DESede")) {
      KeySpec keySpec=new DESedeKeySpec(keyBytes);
      key=SecretKeyFactory.getInstance("DESede").generateSecret(keySpec);
    }
 else     if (algorithm.startsWith("DES")) {
      KeySpec keySpec=new DESKeySpec(keyBytes);
      key=SecretKeyFactory.getInstance("DES").generateSecret(keySpec);
    }
 else     if (algorithm.startsWith("PBEWith")) {
      paramSpec=new PBEParameterSpec(salt,iterationCount);
      KeySpec keySpec=new PBEKeySpec(passPhrase.toCharArray(),salt,iterationCount);
      key=SecretKeyFactory.getInstance(keyAlgorithm).generateSecret(keySpec);
    }
    paramSpec=buildFinalAlgorithmParameterSpec(saltDigest,ivLength,paramSpec);
    cipher.init(mode,key,paramSpec);
    return cipher;
  }
 catch (  Throwable e) {
    throw new RuntimeException("unable to create Cipher:" + e.getMessage(),e);
  }
}
