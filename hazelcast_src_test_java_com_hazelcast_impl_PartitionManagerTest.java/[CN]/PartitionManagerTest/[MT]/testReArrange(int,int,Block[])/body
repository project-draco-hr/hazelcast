{
  LinkedList<MemberImpl> members=createMembers(NODE_COUNT);
  List<Address> listOfAddresses=getListOfAddresses(members);
  Address thisAddress=new Address("localhost",5701);
  PartitionManager partitionManager=init(BLOCK_COUNT,blocks,members,thisAddress);
  partitionManager.reArrangeBlocks();
  int expected=BLOCK_COUNT * (NODE_COUNT - 1) / NODE_COUNT;
  int found=partitionManager.lsBlocksToMigrate.size();
  assertTrue(found == expected || found == expected + 1);
  for (  Block block : blocks) {
    assertEquals(thisAddress,block.getOwner());
  }
  for (  Block block : partitionManager.lsBlocksToMigrate) {
    assertTrue(listOfAddresses.contains(block.getMigrationAddress()));
  }
  migrate(blocks,partitionManager.lsBlocksToMigrate);
  partitionManager.lsBlocksToMigrate.clear();
  Map<Address,Integer> counter=new HashMap<Address,Integer>();
  for (int i=0; i < BLOCK_COUNT; i++) {
    Integer count=counter.get(blocks[i].getOwner());
    count=(count == null) ? 0 : count;
    count++;
    counter.put(blocks[i].getOwner(),count);
  }
  int partitionsPerMember=BLOCK_COUNT / NODE_COUNT;
  for (  Address addres : counter.keySet()) {
    System.out.println(addres + " " + counter.get(addres));
    int c=counter.get(addres);
    assertTrue(c == partitionsPerMember || c == (partitionsPerMember + 1));
  }
  partitionManager.reArrangeBlocks();
  assertEquals(0,partitionManager.lsBlocksToMigrate.size());
}
