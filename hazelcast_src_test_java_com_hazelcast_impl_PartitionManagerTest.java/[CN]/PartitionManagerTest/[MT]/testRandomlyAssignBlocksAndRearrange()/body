{
  int blockCount=271;
  int NODE_COUNT=0;
  while (NODE_COUNT == 0) {
    NODE_COUNT=(int)(Math.random() * blockCount) / 3;
  }
  LinkedList<MemberImpl> members=createMembers(NODE_COUNT);
  Address thisAddress=new Address("localhost",5701);
  Block[] blocks=randomlyAssignBlocks(blockCount,members);
  PartitionManager partitionManager=init(271,blocks,members,thisAddress);
  partitionManager.reArrangeBlocks();
  migrate(blocks,partitionManager.lsBlocksToMigrate);
  Map<Address,Integer> counter=countPartitionsPerMember(blocks);
  int partitionsPerMember=blockCount / NODE_COUNT;
  for (  Address addres : counter.keySet()) {
    int c=counter.get(addres);
    assertTrue(c == partitionsPerMember || c == (partitionsPerMember + 1));
  }
  partitionManager.reArrangeBlocks();
  migrate(blocks,partitionManager.lsBlocksToMigrate);
  assertEquals(0,partitionManager.lsBlocksToMigrate.size());
}
