{
  this.nodeEngine=nodeEngine;
  Config config=nodeEngine.getConfig();
  NearCacheConfig nearCacheConfig=config.findMapConfig(mapName).getNearCacheConfig();
  maxSize=nearCacheConfig.getMaxSize() <= 0 ? Integer.MAX_VALUE : nearCacheConfig.getMaxSize();
  maxIdleMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getMaxIdleSeconds());
  inMemoryFormat=nearCacheConfig.getInMemoryFormat();
  timeToLiveMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getTimeToLiveSeconds());
  evictionPolicy=EvictionPolicy.valueOf(nearCacheConfig.getEvictionPolicy());
  if (EvictionPolicy.LRU.equals(evictionPolicy)) {
    selectedComparator=lruComparator;
  }
 else   if (EvictionPolicy.LFU.equals(evictionPolicy)) {
    selectedComparator=lfuComparator;
  }
 else {
    selectedComparator=defaultComparator;
  }
  cache=new ConcurrentHashMap<Data,CacheRecord>();
  canCleanUp=new AtomicBoolean(true);
  canEvict=new AtomicBoolean(true);
  nearCacheStats=new NearCacheStatsImpl();
  lastCleanup=Clock.currentTimeMillis();
  serializationService=nodeEngine.getSerializationService();
}
