{
  this.client=client;
  final ClientConfig config=client.getClientConfig();
  final ClientNetworkConfig networkConfig=config.getNetworkConfig();
  final GroupConfig groupConfig=config.getGroupConfig();
  final ClientSecurityConfig securityConfig=config.getSecurityConfig();
  Credentials c=securityConfig.getCredentials();
  if (c == null) {
    final String credentialsClassname=securityConfig.getCredentialsClassname();
    if (credentialsClassname != null) {
      try {
        c=ClassLoaderUtil.newInstance(config.getClassLoader(),credentialsClassname);
      }
 catch (      Exception e) {
        throw ExceptionUtil.rethrow(e);
      }
    }
  }
  if (c == null) {
    c=new UsernamePasswordCredentials(groupConfig.getName(),groupConfig.getPassword());
  }
  this.smartRouting=networkConfig.isSmartRouting();
  this.executionService=client.getClientExecutionService();
  this.credentials=c;
  router=new Router(loadBalancer);
  inSelector=new ClientInSelectorImpl(client.getThreadGroup());
  outSelector=new ClientOutSelectorImpl(client.getThreadGroup());
  SocketInterceptorConfig sic=networkConfig.getSocketInterceptorConfig();
  SocketInterceptor implementation=null;
  if (sic != null && sic.isEnabled()) {
    implementation=(SocketInterceptor)sic.getImplementation();
    if (implementation == null && sic.getClassName() != null) {
      try {
        implementation=(SocketInterceptor)Class.forName(sic.getClassName()).newInstance();
      }
 catch (      Throwable e) {
        LOGGER.severe("SocketInterceptor class cannot be instantiated!" + sic.getClassName(),e);
      }
    }
  }
  socketInterceptor=implementation;
  if (socketInterceptor != null) {
    LOGGER.info("SocketInterceptor is enabled");
    socketInterceptor.init(sic.getProperties());
  }
  socketOptions=networkConfig.getSocketOptions();
  SSLConfig sslConfig=networkConfig.getSSLConfig();
  if (sslConfig != null && sslConfig.isEnabled()) {
    socketChannelWrapperFactory=new SSLSocketChannelWrapperFactory(sslConfig);
    LOGGER.info("SSL is enabled");
  }
 else {
    socketChannelWrapperFactory=new DefaultSocketChannelWrapperFactory();
  }
}
