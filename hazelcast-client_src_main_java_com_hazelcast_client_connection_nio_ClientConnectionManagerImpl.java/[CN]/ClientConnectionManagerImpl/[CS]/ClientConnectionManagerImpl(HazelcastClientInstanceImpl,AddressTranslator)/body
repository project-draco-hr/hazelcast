{
  this.client=client;
  this.addressTranslator=addressTranslator;
  final ClientConfig config=client.getClientConfig();
  final ClientNetworkConfig networkConfig=config.getNetworkConfig();
  final int connTimeout=networkConfig.getConnectionTimeout();
  connectionTimeout=connTimeout == 0 ? Integer.MAX_VALUE : connTimeout;
  HazelcastProperties hazelcastProperties=client.getProperties();
  long timeout=hazelcastProperties.getMillis(HEARTBEAT_TIMEOUT);
  this.heartBeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long interval=hazelcastProperties.getMillis(HEARTBEAT_INTERVAL);
  heartBeatInterval=interval > 0 ? interval : Integer.parseInt(HEARTBEAT_INTERVAL.getDefaultValue());
  executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
  loggingService=client.getLoggingService();
  initializeSelectors(client);
  socketOptions=networkConfig.getSocketOptions();
  ClientExtension clientExtension=client.getClientExtension();
  socketChannelWrapperFactory=clientExtension.createSocketChannelWrapperFactory();
  socketInterceptor=initSocketInterceptor(networkConfig.getSocketInterceptorConfig());
  logger=loggingService.getLogger(ClientConnectionManager.class);
  credentials=client.getCredentials();
}
