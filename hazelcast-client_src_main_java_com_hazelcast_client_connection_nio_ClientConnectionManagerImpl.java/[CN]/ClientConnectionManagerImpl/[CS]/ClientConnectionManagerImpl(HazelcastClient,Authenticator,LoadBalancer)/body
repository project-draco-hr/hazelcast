{
  this.client=client;
  this.authenticator=authenticator;
  ClientConfig config=client.getClientConfig();
  router=new Router(loadBalancer);
  final ThreadGroup threadGroup=new ThreadGroup("IOThreads");
  inSelector=new ClientInSelectorImpl(threadGroup);
  outSelector=new ClientOutSelectorImpl(threadGroup);
  SocketInterceptorConfig sic=config.getSocketInterceptorConfig();
  if (sic != null && sic.isEnabled()) {
    SocketInterceptor implementation=(SocketInterceptor)sic.getImplementation();
    if (implementation == null && sic.getClassName() != null) {
      try {
        implementation=(SocketInterceptor)Class.forName(sic.getClassName()).newInstance();
      }
 catch (      Throwable e) {
        logger.severe("SocketInterceptor class cannot be instantiated!" + sic.getClassName(),e);
      }
    }
    if (implementation != null) {
      if (!(implementation instanceof MemberSocketInterceptor)) {
        logger.severe("SocketInterceptor must be instance of " + MemberSocketInterceptor.class.getName());
        implementation=null;
      }
 else {
        logger.info("SocketInterceptor is enabled");
      }
    }
    if (implementation != null) {
      socketInterceptor=implementation;
      socketInterceptor.init(sic.getProperties());
    }
 else {
      socketInterceptor=null;
    }
  }
 else {
    socketInterceptor=null;
  }
  socketOptions=config.getSocketOptions();
}
