{
  if (!alive) {
    return;
  }
  final long now=Clock.currentTimeMillis();
  for (  final ClientConnection connection : connections.values()) {
    if (now - connection.lastReadTimeMillis() > heartbeatTimeout) {
      if (connection.isHeartBeating()) {
        logger.warning("Heartbeat failed to connection : " + connection);
        connection.onHeartbeatFailed();
        fireHeartbeatStopped(connection);
      }
    }
    if (now - connection.lastReadTimeMillis() > heartbeatInterval) {
      ClientMessage request=ClientPingCodec.encodeRequest();
      ClientInvocation clientInvocation=new ClientInvocation(client,request,connection);
      clientInvocation.setBypassHeartbeatCheck(true);
      connection.onHeartbeatRequested();
      clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){
        @Override public void onResponse(        ClientMessage response){
          connection.onHeartbeatReceived();
        }
        @Override public void onFailure(        Throwable t){
          logger.warning("Error receiving heartbeat for connection: " + connection,t);
        }
      }
);
    }
 else {
      if (!connection.isHeartBeating()) {
        logger.warning("Heartbeat is back to healthy for connection : " + connection);
        connection.onHeartbeatResumed();
        fireHeartbeatResumed(connection);
      }
    }
  }
}
