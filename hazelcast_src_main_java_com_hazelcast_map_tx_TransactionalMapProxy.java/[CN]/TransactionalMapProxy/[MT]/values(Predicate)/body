{
  checkTransactionState();
  if (predicate == null) {
    throw new NullPointerException("Predicate can not be null!");
  }
  if (predicate instanceof PagingPredicate) {
    throw new IllegalArgumentException("Paging is not supported for Transactional queries");
  }
  final MapService service=getService();
  final MapServiceContext mapServiceContext=service.getMapServiceContext();
  final QueryResultSet queryResultSet=(QueryResultSet)queryInternal(predicate,IterationType.ENTRY,false);
  final Set<Object> valueSet=new HashSet<Object>();
  final Set<Object> keyWontBeIncluded=new HashSet<Object>();
  for (  final Map.Entry<Object,TxnValueWrapper> entry : txMap.entrySet()) {
    final boolean isRemoved=TxnValueWrapper.Type.REMOVED.equals(entry.getValue().type);
    final boolean isUpdated=TxnValueWrapper.Type.UPDATED.equals(entry.getValue().type);
    if (isRemoved) {
      keyWontBeIncluded.add(entry.getKey());
    }
 else {
      if (isUpdated) {
        keyWontBeIncluded.add(entry.getKey());
      }
      final Object entryValue=entry.getValue().value;
      final Object objectValue=entryValue instanceof Data ? mapServiceContext.toObject(entryValue) : entryValue;
      final QueryEntry queryEntry=new QueryEntry(null,mapServiceContext.toData(entry.getKey()),entry.getKey(),objectValue);
      if (predicate.apply(queryEntry)) {
        valueSet.add(entryValue);
      }
    }
  }
  final Iterator<Map.Entry> iterator=queryResultSet.rawIterator();
  while (iterator.hasNext()) {
    final Map.Entry entry=iterator.next();
    if (keyWontBeIncluded.contains(entry.getKey())) {
      continue;
    }
    valueSet.add(entry.getValue());
  }
  return valueSet;
}
