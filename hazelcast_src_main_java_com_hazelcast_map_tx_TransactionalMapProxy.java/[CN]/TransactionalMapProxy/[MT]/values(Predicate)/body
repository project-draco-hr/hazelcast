{
  checkTransactionState();
  if (predicate == null) {
    throw new NullPointerException("Predicate can not be null!");
  }
  if (predicate instanceof PagingPredicate) {
    throw new IllegalArgumentException("Paging is not supported for Transactional queries");
  }
  final MapService service=getService();
  final QueryResultSet queryResultSet=(QueryResultSet)queryInternal(predicate,IterationType.ENTRY,false);
  final Set<Object> valueSet=new HashSet<Object>();
  final Set<Object> keyWontBeIncluded=new HashSet<Object>();
  for (  final Map.Entry<Object,TxnValueWrapper> entry : txMap.entrySet()) {
    final boolean isRemoved=TxnValueWrapper.Type.REMOVED.equals(entry.getValue().type);
    final boolean isUpdated=TxnValueWrapper.Type.UPDATED.equals(entry.getValue().type);
    Object objectKey=entry.getKey();
    if (isRemoved) {
      keyWontBeIncluded.add(objectKey);
    }
 else {
      if (isUpdated) {
        keyWontBeIncluded.add(objectKey);
      }
      Object entryValue=entry.getValue().value;
      Object objectValue=entryValue instanceof Data ? service.toObject(entryValue) : entryValue;
      Data dataKey=service.toData(objectKey);
      final QueryEntry queryEntry=new QueryEntry(null,dataKey,objectKey,objectValue);
      if (predicate.apply(queryEntry)) {
        valueSet.add(entryValue);
      }
    }
  }
  removeFromResultSet(queryResultSet,valueSet,keyWontBeIncluded);
  return valueSet;
}
