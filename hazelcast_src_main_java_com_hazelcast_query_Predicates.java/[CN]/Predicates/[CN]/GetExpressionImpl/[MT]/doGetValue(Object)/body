{
  if (obj instanceof MapEntry) {
    obj=((MapEntry)obj).getValue();
  }
  if (obj == null)   return null;
  try {
    if (getter == null) {
      Getter parent=null;
      Object o=obj;
      List<String> possibleMethodNames=new ArrayList<String>(3);
      for (      final String name : input.split("\\.")) {
        Getter localGetter=null;
        o=parent != null ? parent.getValue(obj) : obj;
        if (o == null)         return null;
        Class clazz=o.getClass();
        possibleMethodNames.clear();
        possibleMethodNames.add(name);
        final String camelName=Character.toUpperCase(name.charAt(0)) + name.substring(1);
        possibleMethodNames.add("get" + camelName);
        possibleMethodNames.add("is" + camelName);
        for (        String methodName : possibleMethodNames) {
          try {
            localGetter=new MethodGetter(parent,clazz.getMethod(methodName,null));
            break;
          }
 catch (          NoSuchMethodException ignored) {
          }
        }
        if (localGetter == null) {
          try {
            localGetter=new FieldGetter(parent,clazz.getField(name));
          }
 catch (          NoSuchFieldException ignored) {
          }
        }
        if (localGetter == null) {
          throw new RuntimeException("There is no method of field matching " + name);
        }
        parent=localGetter;
      }
      getter=parent;
    }
    return getter.getValue(obj);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}
