{
  String valueString=String.valueOf(value);
  Object result=null;
  if (type instanceof Boolean) {
    result="true".equalsIgnoreCase(valueString) ? true : false;
  }
 else   if (type instanceof Integer) {
    if (value instanceof Number) {
      result=((Number)value).intValue();
    }
 else {
      result=Integer.valueOf(valueString);
    }
  }
 else   if (type instanceof Long) {
    if (value instanceof Number) {
      result=((Number)value).longValue();
    }
 else {
      result=Long.valueOf(valueString);
    }
  }
 else   if (type instanceof Double) {
    if (value instanceof Number) {
      result=((Number)value).doubleValue();
    }
 else {
      result=Double.valueOf(valueString);
    }
  }
 else   if (type instanceof Float) {
    if (value instanceof Number) {
      result=((Number)value).floatValue();
    }
 else {
      result=Float.valueOf(valueString);
    }
  }
 else   if (type instanceof Byte) {
    if (value instanceof Number) {
      result=((Number)value).byteValue();
    }
 else {
      result=Byte.valueOf(valueString);
    }
  }
 else   if (type instanceof Timestamp) {
    if (value instanceof Date) {
      result=value;
    }
 else {
      result=DateHelper.parseTimeStamp(valueString);
    }
  }
 else   if (type instanceof java.sql.Date) {
    if (value instanceof Date) {
      result=value;
    }
 else {
      result=DateHelper.parseSqlDate(valueString);
    }
  }
 else   if (type instanceof Date) {
    if (value instanceof Date) {
      result=value;
    }
 else {
      result=DateHelper.parseDate(valueString);
    }
  }
 else   if (type.getClass().isEnum()) {
    try {
      Enum enumType=(Enum)type;
      String lastEnum=valueString;
      if (valueString.indexOf(".") != -1) {
        lastEnum=valueString.substring(1 + valueString.lastIndexOf("."));
      }
      result=enumType.valueOf(enumType.getClass(),lastEnum);
    }
 catch (    IllegalArgumentException iae) {
      throw new IllegalArgumentException("Illegal enum value specification: " + iae.getMessage());
    }
  }
 else {
    throw new RuntimeException("Unknown type " + type + " value="+ valueString);
  }
  return result;
}
