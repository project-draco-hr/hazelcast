{
  if (live) {
    return;
  }
  live=true;
  log(Level.FINEST,"Starting ConnectionManager and IO selectors.");
  OutOfMemoryPolicy oomePolicy=new OutOfMemoryPolicy(){
    @Override public void handle(    OutOfMemoryError error){
      ioService.onOutOfMemory(error);
    }
  }
;
  for (int i=0; i < inSelectors.length; i++) {
    inSelectors[i]=new InSelectorImpl(ioService.getThreadGroup(),ioService.getThreadPrefix() + "in-" + i,ioService.getLogger(InSelectorImpl.class.getName()),oomePolicy);
    outSelectors[i]=new OutSelectorImpl(ioService.getThreadGroup(),ioService.getThreadPrefix() + "out-" + i,ioService.getLogger(OutSelectorImpl.class.getName()),oomePolicy);
    inSelectors[i].start();
    outSelectors[i].start();
  }
  if (serverSocketChannel != null) {
    if (socketAcceptorThread != null) {
      logger.warning("SocketAcceptor thread is already live! Shutting down old acceptor...");
      shutdownSocketAcceptor();
    }
    Runnable acceptRunnable=new SocketAcceptor(serverSocketChannel,this);
    socketAcceptorThread=new Thread(ioService.getThreadGroup(),acceptRunnable,ioService.getThreadPrefix() + "Acceptor");
    socketAcceptorThread.start();
  }
}
