{
  try {
    if (remoteEndPoint.equals(ioService.getThisAddress())) {
      return false;
    }
    if (!connection.isAlive()) {
      if (logger.isFinestEnabled()) {
        logger.finest(connection + " to " + remoteEndPoint+ " is not registered since connection is not active.");
      }
      return false;
    }
    if (connection instanceof TcpIpConnection) {
      TcpIpConnection tcpConnection=(TcpIpConnection)connection;
      Address currentEndPoint=tcpConnection.getEndPoint();
      if (currentEndPoint != null && !currentEndPoint.equals(remoteEndPoint)) {
        throw new IllegalArgumentException(connection + " has already a different endpoint than: " + remoteEndPoint);
      }
      tcpConnection.setEndPoint(remoteEndPoint);
      if (!connection.isClient()) {
        TcpIpConnectionMonitor connectionMonitor=getConnectionMonitor(remoteEndPoint,true);
        tcpConnection.setMonitor(connectionMonitor);
      }
    }
    connectionsMap.put(remoteEndPoint,connection);
    ioService.getEventService().executeEventCallback(new StripedRunnable(){
      @Override public void run(){
        for (        ConnectionListener listener : connectionListeners) {
          listener.connectionAdded(connection);
        }
      }
      @Override public int getKey(){
        return remoteEndPoint.hashCode();
      }
    }
);
    return true;
  }
  finally {
    connectionsInProgress.remove(remoteEndPoint);
  }
}
