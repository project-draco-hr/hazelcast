{
  if (!node.joined() || !node.isActive()) {
    if (logger.isFinestEnabled()) {
      logger.finest("Node is not ready to process join request...");
    }
    return;
  }
  lock.lock();
  try {
    JoinRequest joinRequest=op.getRequest();
    long now=Clock.currentTimeMillis();
    if (logger.isFinestEnabled()) {
      String msg="Handling join from " + joinRequest.getAddress() + ", inProgress: "+ joinInProgress+ (timeToStartJoin > 0 ? ", timeToStart: " + (timeToStartJoin - now) : "");
      logger.finest(msg);
    }
    Connection conn=op.getConnection();
    if (!isValidJoinRequest(joinRequest)) {
      logger.info("Received an invalid join request from " + joinRequest.getAddress());
      conn.close();
      return;
    }
    if (isJoinRequestFromAnExistingMember(joinRequest)) {
      return;
    }
    if (!node.isMaster()) {
      if (!isMulticastEnabled()) {
        sendMasterAnswer(joinRequest.getAddress());
      }
      return;
    }
    MemberInfo memberInfo=new MemberInfo(joinRequest.getAddress(),joinRequest.getUuid(),joinRequest.getAttributes());
    try {
      checkSecureLogin(joinRequest,memberInfo);
    }
 catch (    Exception e) {
      ILogger securityLogger=node.loggingService.getLogger("com.hazelcast.security");
      sentAuthenticationFailure(joinRequest.getAddress());
      securityLogger.severe(e);
      return;
    }
    if (!joinInProgress) {
      if (firstJoinRequest == 0) {
        firstJoinRequest=now;
      }
      if (setJoins.add(memberInfo)) {
        sendMasterAnswer(joinRequest.getAddress());
        if (now - firstJoinRequest < maxWaitMillisBeforeJoin) {
          timeToStartJoin=now + waitMillisBeforeJoin;
        }
      }
      if (now > timeToStartJoin) {
        startJoin();
      }
    }
  }
  finally {
    lock.unlock();
  }
}
