{
  logger.info("Removing " + deadMember);
  lock.lock();
  try {
    final Map<Address,MemberImpl> members=membersMapRef.get();
    if (members.containsKey(deadMember.getAddress())) {
      Map<Address,MemberImpl> newMembers=new LinkedHashMap<Address,MemberImpl>(members);
      newMembers.remove(deadMember.getAddress());
      masterConfirmationTimes.remove(deadMember);
      setMembersRef(newMembers);
      node.getPartitionService().memberRemoved(deadMember);
      nodeEngine.onMemberLeft(deadMember);
      if (node.isMaster()) {
        if (logger.isFinestEnabled()) {
          logger.finest(deadMember + " is dead. Sending remove to all other members.");
        }
        invokeMemberRemoveOperation(deadMember.getAddress());
      }
      sendMembershipEventNotifications(deadMember,unmodifiableSet(new LinkedHashSet<Member>(newMembers.values())),false);
    }
  }
  finally {
    lock.unlock();
  }
}
