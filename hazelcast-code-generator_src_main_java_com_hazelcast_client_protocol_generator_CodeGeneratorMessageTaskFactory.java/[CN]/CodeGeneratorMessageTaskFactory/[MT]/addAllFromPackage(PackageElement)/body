{
  Map<String,String> map=new HashMap<String,String>();
  for (  Element enclosedElement : packageElement.getEnclosedElements()) {
    if (!enclosedElement.getKind().equals(ElementKind.CLASS)) {
      continue;
    }
    TypeElement typeElement=(TypeElement)enclosedElement;
    final Set<Modifier> modifiers=typeElement.getModifiers();
    if (modifiers.contains(Modifier.ABSTRACT) || modifiers.contains(Modifier.PROTECTED) || typeElement.getKind().isInterface()) {
      continue;
    }
    final DeclaredType superclass=(DeclaredType)typeElement.getSuperclass();
    final List<? extends TypeMirror> typeArguments=superclass.getTypeArguments();
    if (typeArguments.size() > 0) {
      final TypeMirror typeMirror=typeArguments.get(0);
      final String key=typeMirror.toString();
      if (key.endsWith("Parameters")) {
        final String fullNameKey=key.startsWith("com.") ? key : "com.hazelcast.client.impl.protocol.parameters." + key;
        map.put(fullNameKey,typeElement.toString());
      }
    }
  }
  return map;
}
