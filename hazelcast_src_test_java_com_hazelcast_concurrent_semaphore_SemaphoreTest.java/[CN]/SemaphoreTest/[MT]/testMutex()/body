{
  final int k=5;
  final Config config=new Config();
  final HazelcastInstance[] instances=StaticNodeFactory.newInstances(config,k);
  final CountDownLatch latch=new CountDownLatch(k);
  final int loopCount=1000;
class Counter {
    int count=0;
    void inc(){
      count++;
    }
    int get(){
      return count;
    }
  }
  final Counter counter=new Counter();
  Assert.assertTrue(instances[0].getSemaphore("test").init(1));
  for (int i=0; i < k; i++) {
    final ISemaphore semaphore=instances[i].getSemaphore("test");
    new Thread(){
      public void run(){
        for (int j=0; j < loopCount; j++) {
          try {
            semaphore.acquire();
          }
 catch (          InterruptedException e) {
            System.err.println("Acquire : " + e.getMessage());
            return;
          }
          try {
            sleep((int)(Math.random() * 3));
            counter.inc();
          }
 catch (          InterruptedException e) {
            return;
          }
 finally {
            semaphore.release();
          }
        }
        latch.countDown();
      }
    }
.start();
  }
  try {
    Assert.assertTrue(latch.await(60,TimeUnit.SECONDS));
    Assert.assertEquals(loopCount * k,counter.get());
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
