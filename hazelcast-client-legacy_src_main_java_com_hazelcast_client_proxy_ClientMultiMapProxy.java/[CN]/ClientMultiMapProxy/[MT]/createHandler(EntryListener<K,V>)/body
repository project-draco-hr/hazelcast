{
  return new EventHandler<PortableEntryEvent>(){
    public void handle(    PortableEntryEvent event){
      Member member=getContext().getClusterService().getMember(event.getUuid());
switch (event.getEventType()) {
case ADDED:
        listener.entryAdded(createEntryEvent(event,member));
      break;
case REMOVED:
    listener.entryRemoved(createEntryEvent(event,member));
  break;
case CLEAR_ALL:
listener.mapCleared(createMapEvent(event,member));
break;
default :
throw new IllegalArgumentException("Not a known event type " + event.getEventType());
}
}
private MapEvent createMapEvent(PortableEntryEvent event,Member member){
return new MapEvent(name,member,event.getEventType().getType(),event.getNumberOfAffectedEntries());
}
private EntryEvent<K,V> createEntryEvent(PortableEntryEvent event,Member member){
EntryEventType eventType=event.getEventType();
Data keyData=event.getKey();
Data valueData=event.getValue();
Data oldValueData=event.getOldValue();
Data mergingValueData=event.getMergingValue();
return new DataAwareEntryEvent(member,eventType.getType(),name,keyData,valueData,oldValueData,mergingValueData,getContext().getSerializationService());
}
@Override public void beforeListenerRegister(){
}
@Override public void onListenerRegister(){
}
}
;
}
