{
  logger.log(Level.INFO,"Building ClientConfig " + (resource != null ? " using " + resource : "") + ".");
  if (props.containsKey(GROUP_NAME)) {
    config.getGroupConfig().setName(props.getProperty(GROUP_NAME));
  }
  if (props.containsKey(GROUP_PASS)) {
    config.getGroupConfig().setPassword(props.getProperty(GROUP_PASS));
  }
  if (props.containsKey(CONNECTION_TIMEOUT)) {
    config.setConnectionTimeout(Integer.parseInt(props.getProperty(CONNECTION_TIMEOUT)));
  }
  if (props.containsKey(CONNECTION_ATTEMPT_LIMIT)) {
    config.setInitialConnectionAttemptLimit(Integer.parseInt(props.getProperty(CONNECTION_ATTEMPT_LIMIT)));
  }
  if (props.containsKey(RECONNECTION_TIMEOUT)) {
    config.setReConnectionTimeOut(Integer.parseInt(props.getProperty(RECONNECTION_TIMEOUT)));
  }
  if (props.containsKey(RECONNECTION_ATTEMPT_LIMIT)) {
    config.setReconnectionAttemptLimit(Integer.parseInt(props.getProperty(RECONNECTION_ATTEMPT_LIMIT)));
  }
  if (props.containsKey(SHUFFLE_ADDRESSES)) {
    config.setShuffle(Boolean.valueOf(props.getProperty(SHUFFLE_ADDRESSES)));
  }
  if (props.containsKey(UPDATE_AUTOMATIC)) {
    config.setUpdateAutomatic(Boolean.valueOf(props.getProperty(UPDATE_AUTOMATIC)));
  }
  if (props.containsKey(ADDRESSES)) {
    final String addressesProp=props.getProperty(ADDRESSES);
    if (addressesProp != null) {
      final String[] addresses=addressesProp.split("[,; ]");
      for (      String address : addresses) {
        address=address.trim();
        if (address.length() > 0) {
          config.addAddress(address);
        }
      }
    }
  }
  return config;
}
