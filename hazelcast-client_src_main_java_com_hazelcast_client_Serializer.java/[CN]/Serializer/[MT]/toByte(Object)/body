{
  FastByteArrayOutputStream dos=new FastByteArrayOutputStream();
  dos.reset();
  if (object == null)   return new byte[0];
  try {
    if (object instanceof DataSerializable) {
      dos.writeByte(SERIALIZER_TYPE_DATA);
      dos.writeUTF(object.getClass().getName().replaceFirst("com.hazelcast.client","com.hazelcast"));
      ((DataSerializable)object).writeData(dos);
    }
 else     if (object instanceof String) {
      String string=(String)object;
      dos.writeByte(SERIALIZER_TYPE_STRING);
      dos.writeUTF(string);
    }
 else     if (object instanceof byte[]) {
      byte[] bytes=(byte[])object;
      dos.writeByte(SERIALIZER_TYPE_BYTE_ARRAY);
      dos.writeInt(bytes.length);
      dos.write(bytes);
    }
 else     if (object instanceof Integer) {
      dos.writeByte(SERIALIZER_TYPE_INTEGER);
      dos.writeInt((Integer)object);
    }
 else     if (object instanceof Long) {
      dos.writeByte(SERIALIZER_TYPE_LONG);
      dos.writeLong((Long)object);
    }
 else     if (object instanceof Class) {
      dos.writeByte(SERIALIZER_TYPE_CLASS);
      dos.writeUTF(((Class<?>)object).getName());
    }
 else     if (object instanceof Date) {
      dos.writeByte(SERIALIZER_TYPE_DATE);
      dos.writeLong(((Date)object).getTime());
    }
 else     if (object instanceof BigInteger) {
      dos.writeByte(SERIALIZER_TYPE_BIG_INTEGER);
      byte[] bytes=((BigInteger)object).toByteArray();
      dos.writeInt(bytes.length);
      dos.write(bytes);
    }
 else {
      dos.writeByte(SERIALIZER_TYPE_OBJECT);
      if (gzipEnabled)       writeGZip(dos,object);
 else       writeNormal(dos,object);
    }
    dos.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return dos.toByteArray();
}
