{
  FastByteArrayInputStream dis=new FastByteArrayInputStream(bytes);
  int type=dis.read();
  try {
    if (type == SERIALIZER_TYPE_DATA) {
      String className=dis.readUTF();
      if (className.equals("com.hazelcast.impl.Keys")) {
        className="com.hazelcast.client.impl.CollectionWrapper";
      }
 else       if (className.equals("com.hazelcast.impl.CMap$Values")) {
        className="com.hazelcast.client.impl.Values";
      }
      DataSerializable data=(DataSerializable)Class.forName(className).newInstance();
      data.readData(dis);
      return data;
    }
 else     if (type == SERIALIZER_TYPE_STRING) {
      return dis.readUTF();
    }
 else     if (type == SERIALIZER_TYPE_BYTE_ARRAY) {
      int size=dis.readInt();
      byte[] b=new byte[size];
      int redSize=dis.read(b);
      if (size != 0 && size != redSize) {
        throw new RuntimeException("Couldn't read all of the data Size: " + size + ", But I red:"+ redSize);
      }
      return b;
    }
 else     if (type == SERIALIZER_TYPE_INTEGER) {
      return dis.readInt();
    }
 else     if (type == SERIALIZER_TYPE_LONG) {
      return dis.readLong();
    }
 else     if (type == SERIALIZER_TYPE_CLASS) {
      return Class.forName(dis.readUTF());
    }
 else     if (type == SERIALIZER_TYPE_DATE) {
      return new Date(dis.readLong());
    }
 else     if (type == SERIALIZER_TYPE_BIG_INTEGER) {
      byte[] intBytes=new byte[dis.readInt()];
      dis.read(intBytes);
      return new BigInteger(intBytes);
    }
 else     if (type == SERIALIZER_TYPE_OBJECT) {
      ObjectInputStream os=new ObjectInputStream(dis);
      Object o=os.readObject();
      os.close();
      return o;
    }
    dis.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}
