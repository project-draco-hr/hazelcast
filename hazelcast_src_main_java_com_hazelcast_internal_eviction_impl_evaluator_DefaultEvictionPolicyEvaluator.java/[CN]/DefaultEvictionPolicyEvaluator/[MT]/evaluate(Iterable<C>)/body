{
  C selectedEvictionCandidate=null;
  long now=Clock.currentTimeMillis();
  for (  C currentEvictionCandidate : evictionCandidates) {
    if (selectedEvictionCandidate == null) {
      selectedEvictionCandidate=currentEvictionCandidate;
    }
 else {
      E evictable=currentEvictionCandidate.getEvictable();
      if (isExpired(now,evictable)) {
        return returnEvictionCandidate(currentEvictionCandidate);
      }
      int comparisonResult=evictionPolicyComparator.compare(selectedEvictionCandidate,currentEvictionCandidate);
      if (comparisonResult == EvictionPolicyComparator.SECOND_ENTRY_HAS_HIGHER_PRIORITY_TO_BE_EVICTED) {
        selectedEvictionCandidate=currentEvictionCandidate;
      }
    }
  }
  return returnEvictionCandidate(selectedEvictionCandidate);
}
