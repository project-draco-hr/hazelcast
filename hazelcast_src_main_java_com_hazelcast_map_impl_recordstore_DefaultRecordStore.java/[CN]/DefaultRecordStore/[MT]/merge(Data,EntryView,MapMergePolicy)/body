{
  checkIfLoaded();
  final long now=getNow();
  Record record=getRecordOrNull(key,now,false);
  mergingEntry=EntryViews.convertToLazyEntryView(mergingEntry,serializationService,mergePolicy);
  Object newValue;
  Object oldValue=null;
  if (record == null) {
    final Object notExistingKey=mapServiceContext.toObject(key);
    final EntryView nullEntryView=EntryViews.createNullEntryView(notExistingKey);
    newValue=mergePolicy.merge(name,mergingEntry,nullEntryView);
    if (newValue == null) {
      return false;
    }
    newValue=mapDataStore.add(key,newValue,now);
    record=createRecord(newValue,DEFAULT_TTL,now);
    mergeRecordExpiration(record,mergingEntry);
    storage.put(key,record);
  }
 else {
    oldValue=record.getValue();
    EntryView existingEntry=EntryViews.createLazyEntryView(record.getKey(),record.getValue(),record,serializationService,mergePolicy);
    newValue=mergePolicy.merge(name,mergingEntry,existingEntry);
    if (newValue == null) {
      removeIndex(record);
      mapDataStore.remove(key,now);
      onStore(record);
      storage.removeRecord(record);
      return true;
    }
    if (newValue == mergingEntry.getValue()) {
      mergeRecordExpiration(record,mergingEntry);
    }
    if (recordFactory.isEquals(newValue,oldValue)) {
      return true;
    }
    newValue=mapDataStore.add(key,newValue,now);
    onStore(record);
    storage.updateRecordValue(key,record,newValue);
  }
  saveIndex(record,oldValue);
  return newValue != null;
}
