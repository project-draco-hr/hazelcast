{
  Set<Address> addresses=new HashSet<Address>();
  for (  Set<Address> remoteReducers : this.remoteReducers.values()) {
    addresses.addAll(remoteReducers);
  }
  for (  JobPartitionState partitionState : jobProcessInformation.getPartitionStates()) {
    if (partitionState != null) {
      addresses.add(partitionState.getOwner());
    }
  }
  String name=getConfiguration().getName();
  String jobId=getConfiguration().getJobId();
  for (  Address address : addresses) {
    try {
      CancelJobSupervisorOperation operation=new CancelJobSupervisorOperation(name,jobId);
      mapReduceService.processRequest(address,operation,name);
    }
 catch (    Exception ignore) {
    }
  }
  TrackableJobFuture future=jobTracker.unregisterTrackableJob(jobId);
  jobTracker.unregisterMapCombineTask(jobId);
  jobTracker.unregisterReducerTask(jobId);
  mapReduceService.destroyJobSupervisor(this);
  ExceptionUtil.fixRemoteStackTrace(exception,Thread.currentThread().getStackTrace());
  future.setResult(exception);
}
