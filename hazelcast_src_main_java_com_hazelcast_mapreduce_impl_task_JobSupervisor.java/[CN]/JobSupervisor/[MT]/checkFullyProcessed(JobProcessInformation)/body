{
  if (isOwnerNode()) {
    JobPartitionState[] partitionStates=processInformation.getPartitionStates();
    for (    JobPartitionState partitionState : partitionStates) {
      if (partitionState == null || partitionState.getState() != JobPartitionState.State.PROCESSED) {
        return;
      }
    }
    String name=configuration.getName();
    String jobId=configuration.getJobId();
    NodeEngine nodeEngine=configuration.getNodeEngine();
    GetResultOperationFactory operationFactory=new GetResultOperationFactory(name,jobId);
    TrackableJobFuture future=jobTracker.unregisterTrackableJob(jobId);
    if (future == null) {
      return;
    }
    Object finalResult=null;
    try {
      List<Map> results=MapReduceUtil.executeOperation(operationFactory,mapReduceService,nodeEngine,true);
      boolean reducedResult=configuration.getReducerFactory() != null;
      if (results != null) {
        Map<Object,Object> mergedResults=new HashMap<Object,Object>();
        for (        Map<?,?> map : results) {
          for (          Map.Entry entry : map.entrySet()) {
            collectResults(reducedResult,mergedResults,entry);
          }
        }
        finalResult=mergedResults;
      }
    }
 catch (    Exception e) {
      finalResult=e;
    }
 finally {
      jobTracker.unregisterMapCombineTask(jobId);
      jobTracker.unregisterReducerTask(jobId);
      mapReduceService.destroyJobSupervisor(this);
      future.setResult(finalResult);
    }
  }
}
