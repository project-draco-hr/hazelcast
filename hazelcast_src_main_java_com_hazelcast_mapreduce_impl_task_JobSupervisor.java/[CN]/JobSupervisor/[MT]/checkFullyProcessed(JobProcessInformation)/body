{
  if (isOwnerNode()) {
    JobPartitionState[] partitionStates=processInformation.getPartitionStates();
    for (    JobPartitionState partitionState : partitionStates) {
      if (partitionState == null || partitionState.getState() != JobPartitionState.State.PROCESSED) {
        return;
      }
    }
    final String name=configuration.getName();
    final String jobId=configuration.getJobId();
    final NodeEngine nodeEngine=configuration.getNodeEngine();
    final GetResultOperationFactory operationFactory=new GetResultOperationFactory(name,jobId);
    final TrackableJobFuture future=jobTracker.unregisterTrackableJob(jobId);
    if (future == null) {
      return;
    }
    final JobSupervisor jobSupervisor=this;
    Runnable runnable=new Runnable(){
      public void run(){
        Object finalResult=null;
        try {
          List<Map> results=MapReduceUtil.executeOperation(operationFactory,mapReduceService,nodeEngine,true);
          boolean reducedResult=configuration.getReducerFactory() != null;
          if (results != null) {
            Map<Object,Object> mergedResults=new HashMap<Object,Object>();
            for (            Map<?,?> map : results) {
              for (              Map.Entry entry : map.entrySet()) {
                collectResults(reducedResult,mergedResults,entry);
              }
            }
            finalResult=mergedResults;
          }
        }
 catch (        Exception e) {
          finalResult=e;
        }
 finally {
          jobTracker.unregisterMapCombineTask(jobId);
          jobTracker.unregisterReducerTask(jobId);
          mapReduceService.destroyJobSupervisor(jobSupervisor);
          future.setResult(finalResult);
        }
      }
    }
;
    ExecutionService executionService=nodeEngine.getExecutionService();
    ManagedExecutorService executor=executionService.getExecutor(ExecutionService.ASYNC_EXECUTOR);
    executor.submit(runnable);
  }
}
