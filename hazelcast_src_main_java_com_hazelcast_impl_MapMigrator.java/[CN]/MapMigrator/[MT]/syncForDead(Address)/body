{
  if (deadAddress.equals(thisAddress))   return;
  Set<Integer> blocksOwnedAfterDead=new HashSet<Integer>();
  for (  Block block : blocks) {
    if (block != null) {
      if (deadAddress.equals(block.getOwner())) {
        MemberImpl member=concurrentMapManager.getNextMemberBeforeSync(block.getOwner(),true,1);
        if (member == null) {
          if (!concurrentMapManager.isSuperClient()) {
            block.setOwner(thisAddress);
          }
 else {
            block.setOwner(null);
          }
        }
 else {
          if (!deadAddress.equals(member.getAddress())) {
            block.setOwner(member.getAddress());
          }
 else {
            block.setOwner(null);
          }
        }
        if (thisAddress.equals(block.getOwner())) {
          blocksOwnedAfterDead.add(block.getBlockId());
        }
      }
      if (block.getMigrationAddress() != null) {
        if (deadAddress.equals(block.getMigrationAddress())) {
          MemberImpl member=concurrentMapManager.getNextMemberBeforeSync(block.getMigrationAddress(),true,1);
          if (member == null) {
            if (!concurrentMapManager.isSuperClient()) {
              block.setMigrationAddress(thisAddress);
            }
 else {
              block.setMigrationAddress(null);
            }
          }
 else {
            if (!deadAddress.equals(member.getAddress())) {
              block.setMigrationAddress(member.getAddress());
            }
 else {
              block.setMigrationAddress(null);
            }
          }
        }
      }
    }
  }
  Collection<CMap> cmaps=concurrentMapManager.maps.values();
  for (  CMap map : cmaps) {
    Collection<Record> records=map.mapRecords.values();
    for (    Record record : records) {
      concurrentMapManager.onDisconnect(record,deadAddress);
      if (record.isActive()) {
        if (blocksOwnedAfterDead.contains(record.getBlockId())) {
          map.markAsOwned(record);
          node.queryService.updateIndex(map.name,null,null,record,record.getValueHash());
        }
      }
    }
  }
  onMembershipChange();
}
