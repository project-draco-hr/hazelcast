{
  if (concurrentMapManager.isMaster()) {
    if (concurrentMapManager.isSuperClient()) {
      MemberImpl nonSuperMember=null;
      for (      MemberImpl member : concurrentMapManager.getMembers()) {
        if (!member.isSuperClient()) {
          nonSuperMember=member;
        }
      }
      if (nonSuperMember != null) {
        for (int i=0; i < BLOCK_COUNT; i++) {
          Block block=blocks[i];
          if (block == null) {
            block=concurrentMapManager.getOrCreateBlock(i);
          }
          if (block.getOwner() == null) {
            block.setOwner(nonSuperMember.getAddress());
          }
        }
      }
    }
    for (int i=0; i < BLOCK_COUNT; i++) {
      Block block=blocks[i];
      if (block == null) {
        block=concurrentMapManager.getOrCreateBlock(i);
      }
    }
    quickBlockRearrangement();
    Data dataAllBlocks=null;
    for (    MemberImpl member : concurrentMapManager.getMembers()) {
      if (!member.localMember()) {
        if (dataAllBlocks == null) {
          ConcurrentMapManager.BlockOwners allBlockOwners=new ConcurrentMapManager.BlockOwners();
          for (          Block block : blocks) {
            allBlockOwners.addBlock(block);
          }
          dataAllBlocks=ThreadContext.get().toData(allBlockOwners);
        }
        concurrentMapManager.send("blocks",CONCURRENT_MAP_BLOCKS,dataAllBlocks,member.getAddress());
      }
    }
  }
  InitialState initialState=new InitialState();
  Collection<CMap> cmaps=concurrentMapManager.maps.values();
  for (  final CMap cmap : cmaps) {
    initialState.createAndAddMapState(cmap);
  }
  concurrentMapManager.sendProcessableToAll(initialState,false);
  onMembershipChange();
}
