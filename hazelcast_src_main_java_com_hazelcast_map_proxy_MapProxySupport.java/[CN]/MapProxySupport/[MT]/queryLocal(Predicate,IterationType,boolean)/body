{
  final NodeEngine nodeEngine=getNodeEngine();
  OperationService operationService=nodeEngine.getOperationService();
  final SerializationService ss=nodeEngine.getSerializationService();
  List<Integer> partitionIds=nodeEngine.getPartitionService().getMemberPartitions(nodeEngine.getThisAddress());
  PagingPredicate pagingPredicate=null;
  if (predicate instanceof PagingPredicate) {
    pagingPredicate=(PagingPredicate)predicate;
    pagingPredicate.setIterationType(iterationType);
    if (pagingPredicate.getPage() > 0 && pagingPredicate.getAnchor() == null) {
      pagingPredicate.previousPage();
      query(pagingPredicate,iterationType,dataResult);
      pagingPredicate.nextPage();
    }
  }
  Set result;
  if (pagingPredicate == null) {
    result=new QueryResultSet(ss,iterationType,dataResult);
  }
 else {
    result=new SortedQueryResultSet(pagingPredicate.getComparator(),iterationType,pagingPredicate.getPageSize());
  }
  List<Integer> returnedPartitionIds=new ArrayList<Integer>();
  try {
    Future future=operationService.invokeOnTarget(SERVICE_NAME,new QueryOperation(name,predicate),nodeEngine.getThisAddress());
    QueryResult queryResult=(QueryResult)future.get();
    if (queryResult != null) {
      returnedPartitionIds=queryResult.getPartitionIds();
      if (pagingPredicate == null) {
        result.addAll(queryResult.getResult());
      }
 else {
        for (        QueryResultEntry queryResultEntry : queryResult.getResult()) {
          Object key=ss.toObject(queryResultEntry.getKeyData());
          Object value=ss.toObject(queryResultEntry.getValueData());
          result.add(new AbstractMap.SimpleImmutableEntry(key,value));
        }
      }
    }
    if (returnedPartitionIds.size() == partitionIds.size()) {
      if (pagingPredicate != null) {
        PagingPredicateAccessor.setPagingPredicateAnchor(pagingPredicate,((SortedQueryResultSet)result).last());
      }
      return result;
    }
    List<Integer> missingList=new ArrayList<Integer>();
    for (    Integer partitionId : partitionIds) {
      if (!returnedPartitionIds.contains(partitionId)) {
        missingList.add(partitionId);
      }
    }
    List<Future> futures=new ArrayList<Future>(missingList.size());
    for (    Integer pid : missingList) {
      QueryPartitionOperation queryPartitionOperation=new QueryPartitionOperation(name,predicate);
      queryPartitionOperation.setPartitionId(pid);
      try {
        Future f=operationService.invokeOnPartition(SERVICE_NAME,queryPartitionOperation,pid);
        futures.add(f);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
    for (    Future f : futures) {
      QueryResult qResult=(QueryResult)f.get();
      if (pagingPredicate == null) {
        result.addAll(qResult.getResult());
      }
 else {
        for (        QueryResultEntry queryResultEntry : qResult.getResult()) {
          Object key=ss.toObject(queryResultEntry.getKeyData());
          Object value=ss.toObject(queryResultEntry.getValueData());
          result.add(new AbstractMap.SimpleImmutableEntry(key,value));
        }
      }
    }
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
  return result;
}
