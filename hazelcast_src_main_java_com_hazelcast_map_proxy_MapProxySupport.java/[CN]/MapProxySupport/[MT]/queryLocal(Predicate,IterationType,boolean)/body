{
  final NodeEngine nodeEngine=getNodeEngine();
  OperationService operationService=nodeEngine.getOperationService();
  List<Integer> partitionIds=nodeEngine.getPartitionService().getMemberPartitions(nodeEngine.getThisAddress());
  QueryResultStream result=new QueryResultStream(nodeEngine.getSerializationService(),iterationType,dataResult,true);
  List<Integer> returnedPartitionIds=new ArrayList<Integer>();
  try {
    Invocation invocation=operationService.createInvocationBuilder(SERVICE_NAME,new QueryOperation(name,predicate),nodeEngine.getThisAddress()).build();
    Future future=invocation.invoke();
    QueryResult queryResult=(QueryResult)future.get();
    if (queryResult != null) {
      returnedPartitionIds=queryResult.getPartitionIds();
      result.addAll(queryResult.getResult());
    }
    if (returnedPartitionIds.size() == partitionIds.size()) {
      return result;
    }
    List<Integer> missingList=new ArrayList<Integer>();
    for (    Integer partitionId : partitionIds) {
      if (!returnedPartitionIds.contains(partitionId))       missingList.add(partitionId);
    }
    List<Future> futures=new ArrayList<Future>(missingList.size());
    for (    Integer pid : missingList) {
      QueryPartitionOperation queryPartitionOperation=new QueryPartitionOperation(name,predicate);
      queryPartitionOperation.setPartitionId(pid);
      try {
        Future f=operationService.createInvocationBuilder(SERVICE_NAME,queryPartitionOperation,pid).build().invoke();
        futures.add(f);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
    for (    Future f : futures) {
      QueryResult qResult=(QueryResult)f.get();
      result.addAll(qResult.getResult());
    }
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
 finally {
    result.end();
  }
  return result;
}
