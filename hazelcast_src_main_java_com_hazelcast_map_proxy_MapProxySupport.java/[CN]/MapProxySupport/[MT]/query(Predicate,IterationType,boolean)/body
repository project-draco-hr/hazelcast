{
  final NodeEngine nodeEngine=getNodeEngine();
  OperationService operationService=nodeEngine.getOperationService();
  final SerializationService ss=nodeEngine.getSerializationService();
  Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
  int partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  Set<Integer> plist=new HashSet<Integer>(partitionCount);
  PagingPredicate pagingPredicate=null;
  if (predicate instanceof PagingPredicate) {
    pagingPredicate=(PagingPredicate)predicate;
    pagingPredicate.setIterationType(iterationType);
    if (pagingPredicate.getPage() > 0 && pagingPredicate.getAnchor() == null) {
      pagingPredicate.previousPage();
      query(pagingPredicate,iterationType,dataResult);
      pagingPredicate.nextPage();
    }
  }
  Set result;
  if (pagingPredicate == null) {
    result=new QueryResultSet(ss,iterationType,dataResult);
  }
 else {
    result=new SortedQueryResultSet(pagingPredicate.getComparator(),iterationType,pagingPredicate.getPageSize());
  }
  List<Integer> missingList=new ArrayList<Integer>();
  try {
    List<Future> flist=new ArrayList<Future>();
    for (    MemberImpl member : members) {
      Invocation invocation=operationService.createInvocationBuilder(SERVICE_NAME,new QueryOperation(name,predicate,iterationType),member.getAddress()).build();
      Future future=invocation.invoke();
      flist.add(future);
    }
    for (    Future future : flist) {
      QueryResult queryResult=(QueryResult)future.get();
      if (queryResult != null) {
        final List<Integer> partitionIds=queryResult.getPartitionIds();
        if (partitionIds != null) {
          plist.addAll(partitionIds);
          if (pagingPredicate == null) {
            result.addAll(queryResult.getResult());
          }
 else {
            for (            QueryResultEntry queryResultEntry : queryResult.getResult()) {
              Object key=ss.toObject(queryResultEntry.getKeyData());
              Object value=ss.toObject(queryResultEntry.getValueData());
              result.add(new AbstractMap.SimpleImmutableEntry(key,value));
            }
          }
        }
      }
    }
    if (plist.size() == partitionCount) {
      if (pagingPredicate != null) {
        ObjectAccessor.setPagingPredicateAnchor(pagingPredicate,((SortedQueryResultSet)result).last());
      }
      return result;
    }
    for (int i=0; i < partitionCount; i++) {
      if (!plist.contains(i)) {
        missingList.add(i);
      }
    }
  }
 catch (  Throwable t) {
    missingList.clear();
    for (int i=0; i < partitionCount; i++) {
      if (!plist.contains(i)) {
        missingList.add(i);
      }
    }
  }
  try {
    List<Future> futures=new ArrayList<Future>(missingList.size());
    for (    Integer pid : missingList) {
      QueryPartitionOperation queryPartitionOperation=new QueryPartitionOperation(name,predicate);
      queryPartitionOperation.setPartitionId(pid);
      try {
        Future f=operationService.createInvocationBuilder(SERVICE_NAME,queryPartitionOperation,pid).build().invoke();
        futures.add(f);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
    for (    Future future : futures) {
      QueryResult queryResult=(QueryResult)future.get();
      if (pagingPredicate == null) {
        result.addAll(queryResult.getResult());
      }
 else {
        for (        QueryResultEntry queryResultEntry : queryResult.getResult()) {
          Object key=ss.toObject(queryResultEntry.getKeyData());
          Object value=ss.toObject(queryResultEntry.getValueData());
          result.add(new AbstractMap.SimpleImmutableEntry(key,value));
        }
      }
    }
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
  if (pagingPredicate != null) {
    ObjectAccessor.setPagingPredicateAnchor(pagingPredicate,((SortedQueryResultSet)result).last());
  }
  return result;
}
