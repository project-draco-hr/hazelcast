{
  final MemberImpl currentOwnerMember=(MemberImpl)getPartitionById(oldest.getPartitionService(),partitionId).getOwner();
  final MemberImpl toMember=(MemberImpl)to.getCluster().getLocalMember();
  if (currentOwnerMember.equals(toMember)) {
    return false;
  }
  final ConcurrentMapManager concurrentMapManagerOldest=getConcurrentMapManager(oldest);
  final ConcurrentMapManager concurrentMapManagerFrom=getConcurrentMapManager(from);
  final Address addressCurrentOwner=currentOwnerMember.getAddress();
  final Address addressNewOwner=toMember.getAddress();
  final int blockId=getPartitionById(oldest.getPartitionService(),partitionId).getPartitionId();
  final CountDownLatch migrationLatch=new CountDownLatch(2);
  MigrationListener migrationListener=new MigrationListener(){
    public void migrationCompleted(    MigrationEvent migrationEvent){
    }
    public void migrationStarted(    MigrationEvent migrationEvent){
      migrationLatch.countDown();
    }
  }
;
  from.getPartitionService().addMigrationListener(migrationListener);
  to.getPartitionService().addMigrationListener(migrationListener);
  concurrentMapManagerFrom.enqueueAndReturn(new Processable(){
    public void process(){
      concurrentMapManagerFrom.partitionManager.MIGRATION_COMPLETE_WAIT_SECONDS=completeWaitSeconds;
    }
  }
);
  concurrentMapManagerOldest.enqueueAndReturn(new Processable(){
    public void process(){
      Block blockToMigrate=new Block(blockId,addressCurrentOwner,addressNewOwner);
      concurrentMapManagerOldest.partitionManager.lsBlocksToMigrate.clear();
      concurrentMapManagerOldest.partitionManager.lsBlocksToMigrate.add(blockToMigrate);
      concurrentMapManagerOldest.partitionManager.initiateMigration();
    }
  }
);
  if (!migrationLatch.await(20,TimeUnit.SECONDS)) {
    fail("Migration should get started in 20 seconds!!");
  }
  return true;
}
