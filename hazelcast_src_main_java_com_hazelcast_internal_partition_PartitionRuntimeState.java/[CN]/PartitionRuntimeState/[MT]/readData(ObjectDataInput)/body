{
  version=in.readInt();
  int size=in.readInt();
  members=new MemberInfo[size];
  for (int memberIndex=0; memberIndex < size; memberIndex++) {
    MemberInfo memberInfo=new MemberInfo();
    memberInfo.readData(in);
    members[memberIndex]=memberInfo;
  }
  int partitionCount=in.readInt();
  minimizedPartitionTable=new int[partitionCount][InternalPartition.MAX_REPLICA_COUNT];
  for (int i=0; i < partitionCount; i++) {
    int[] indexes=minimizedPartitionTable[i];
    for (int ix=0; ix < InternalPartition.MAX_REPLICA_COUNT; ix++) {
      indexes[ix]=in.readInt();
    }
  }
  if (in.readBoolean()) {
    activeMigration=new MigrationInfo();
    activeMigration.readData(in);
  }
  int k=in.readInt();
  if (k > 0) {
    completedMigrations=new ArrayList<MigrationInfo>(k);
    for (int i=0; i < k; i++) {
      MigrationInfo migrationInfo=new MigrationInfo();
      migrationInfo.readData(in);
      completedMigrations.add(migrationInfo);
    }
  }
}
