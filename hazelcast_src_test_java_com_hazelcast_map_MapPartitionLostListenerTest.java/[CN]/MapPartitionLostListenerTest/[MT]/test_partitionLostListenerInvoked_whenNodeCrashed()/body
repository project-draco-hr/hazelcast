{
  final List<HazelcastInstance> instances=getCreatedInstancesShuffledAfterWarmedUp();
  final HazelcastInstance survivingInstance=instances.get(0);
  final HazelcastInstance terminatingInstance=instances.get(1);
  final EventCollectingMapPartitionLostListener listener=new EventCollectingMapPartitionLostListener(0);
  survivingInstance.getMap(getIthMapName(0)).addPartitionLostListener(listener);
  final Set<Integer> survivingPartitionIds=new HashSet<Integer>();
  final Node survivingNode=getNode(survivingInstance);
  final Address survivingAddress=survivingNode.getThisAddress();
  for (  InternalPartition partition : survivingNode.getPartitionService().getPartitions()) {
    if (survivingAddress.equals(partition.getReplicaAddress(0))) {
      survivingPartitionIds.add(partition.getPartitionId());
    }
  }
  terminatingInstance.getLifecycleService().terminate();
  waitAllForSafeState(survivingInstance);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      final List<MapPartitionLostEvent> events=listener.getEvents();
      assertFalse(events.isEmpty());
      for (      MapPartitionLostEvent event : events) {
        assertFalse(survivingPartitionIds.contains(event.getPartitionId()));
      }
    }
  }
);
}
