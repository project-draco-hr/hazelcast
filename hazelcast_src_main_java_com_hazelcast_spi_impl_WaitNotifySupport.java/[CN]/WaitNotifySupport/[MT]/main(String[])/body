{
  final WaitNotifySupport ss=new WaitNotifySupport(new WaitingOpProcessor(){
    public void process(    WaitingOp so){
    }
    public void processUnderExistingLock(    Operation operation){
    }
  }
);
  final Timer timer=new Timer();
  timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      int count=5000;
      for (int i=0; i < count; i++) {
        ss.wait(new WaitSupport(){
          public Object getWaitKey(){
            return "a";
          }
          public boolean shouldWait(){
            return false;
          }
          public long getWaitTimeoutMillis(){
            return 1200;
          }
          public void onWaitExpire(){
            Queue<WaitingOp> q=ss.getScheduleQueue(getWaitKey());
            q.remove(this);
            System.out.println("invalid");
          }
        }
);
      }
      System.out.println("offered " + count);
      System.out.println(ss);
    }
  }
,0,1000);
}
