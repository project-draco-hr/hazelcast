{
  this.node=node;
  nodeEngine=node.nodeEngine;
  logger=node.getLogger(ClusterService.class.getName());
  clusterClock=new ClusterClockImpl(logger);
  whileFinalizeJoinsExceptionHandler=logAllExceptions(logger,"While waiting finalize join calls...",Level.WARNING);
  thisAddress=node.getThisAddress();
  thisMember=node.getLocalMember();
  setMembers(thisMember);
  sendMembershipEvents(Collections.<MemberImpl>emptySet(),Collections.singleton(thisMember));
  maxWaitMillisBeforeJoin=node.groupProperties.getMillis(GroupProperty.MAX_WAIT_SECONDS_BEFORE_JOIN);
  waitMillisBeforeJoin=node.groupProperties.getMillis(GroupProperty.WAIT_SECONDS_BEFORE_JOIN);
  maxNoHeartbeatMillis=node.groupProperties.getMillis(GroupProperty.MAX_NO_HEARTBEAT_SECONDS);
  maxNoMasterConfirmationMillis=node.groupProperties.getMillis(GroupProperty.MAX_NO_MASTER_CONFIRMATION_SECONDS);
  heartbeatIntervalMillis=getHeartBeatInterval(node.groupProperties);
  pingIntervalMillis=heartbeatIntervalMillis * HEART_BEAT_INTERVAL_FACTOR;
  icmpEnabled=node.groupProperties.getBoolean(GroupProperty.ICMP_ENABLED);
  icmpTtl=node.groupProperties.getInteger(GroupProperty.ICMP_TTL);
  icmpTimeoutMillis=(int)node.groupProperties.getMillis(GroupProperty.ICMP_TIMEOUT);
  node.connectionManager.addConnectionListener(this);
  registerMetrics();
}
