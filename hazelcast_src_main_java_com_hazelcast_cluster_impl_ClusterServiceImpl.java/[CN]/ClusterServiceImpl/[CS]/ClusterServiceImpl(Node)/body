{
  this.node=node;
  nodeEngine=node.nodeEngine;
  logger=node.getLogger(ClusterService.class.getName());
  clusterClock=new ClusterClockImpl(logger);
  whileFinalizeJoinsExceptionHandler=logAllExceptions(logger,"While waiting finalize join calls...",Level.WARNING);
  thisAddress=node.getThisAddress();
  thisMember=node.getLocalMember();
  setMembers(thisMember);
  sendMembershipEvents(Collections.<MemberImpl>emptySet(),Collections.singleton(thisMember));
  waitMillisBeforeJoin=node.groupProperties.WAIT_SECONDS_BEFORE_JOIN.getInteger() * 1000L;
  maxWaitMillisBeforeJoin=node.groupProperties.MAX_WAIT_SECONDS_BEFORE_JOIN.getInteger() * 1000L;
  maxNoHeartbeatMillis=node.groupProperties.MAX_NO_HEARTBEAT_SECONDS.getInteger() * 1000L;
  maxNoMasterConfirmationMillis=node.groupProperties.MAX_NO_MASTER_CONFIRMATION_SECONDS.getInteger() * 1000L;
  icmpEnabled=node.groupProperties.ICMP_ENABLED.getBoolean();
  icmpTtl=node.groupProperties.ICMP_TTL.getInteger();
  icmpTimeout=node.groupProperties.ICMP_TIMEOUT.getInteger();
  long heartbeatInterval=node.groupProperties.HEARTBEAT_INTERVAL_SECONDS.getInteger();
  heartbeatIntervalMillis=heartbeatInterval > 0 ? heartbeatInterval * 1000L : 1000L;
  pingIntervalMillis=heartbeatIntervalMillis * 10;
  node.connectionManager.addConnectionListener(this);
  registerMetrics();
}
