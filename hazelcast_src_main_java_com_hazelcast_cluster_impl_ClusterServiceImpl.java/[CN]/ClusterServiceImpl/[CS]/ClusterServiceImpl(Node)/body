{
  this.node=node;
  nodeEngine=node.nodeEngine;
  logger=node.getLogger(ClusterService.class.getName());
  clusterClock=new ClusterClockImpl(logger);
  whileFinalizeJoinsExceptionHandler=logAllExceptions(logger,"While waiting finalize join calls...",Level.WARNING);
  thisAddress=node.getThisAddress();
  thisMember=node.getLocalMember();
  setMembers(thisMember);
  waitMillisBeforeJoin=node.groupProperties.WAIT_SECONDS_BEFORE_JOIN.getInteger() * 1000L;
  maxWaitMillisBeforeJoin=node.groupProperties.MAX_WAIT_SECONDS_BEFORE_JOIN.getInteger() * 1000L;
  long heartbeatIntervalSeconds=node.groupProperties.HEARTBEAT_INTERVAL_SECONDS.getInteger();
  heartbeatIntervalSeconds=heartbeatIntervalSeconds <= 0 ? 1 : heartbeatIntervalSeconds;
  heartbeatInterval=heartbeatIntervalSeconds;
  maxNoHeartbeatMillis=node.groupProperties.MAX_NO_HEARTBEAT_SECONDS.getInteger() * 1000L;
  maxNoMasterConfirmationMillis=node.groupProperties.MAX_NO_MASTER_CONFIRMATION_SECONDS.getInteger() * 1000L;
  icmpEnabled=node.groupProperties.ICMP_ENABLED.getBoolean();
  icmpTtl=node.groupProperties.ICMP_TTL.getInteger();
  icmpTimeout=node.groupProperties.ICMP_TIMEOUT.getInteger();
  node.connectionManager.addConnectionListener(this);
  nodeEngine.getExecutionService().register(MEMBERSHIP_EVENT_EXECUTOR_NAME,1,Integer.MAX_VALUE,ExecutorType.CACHED);
}
