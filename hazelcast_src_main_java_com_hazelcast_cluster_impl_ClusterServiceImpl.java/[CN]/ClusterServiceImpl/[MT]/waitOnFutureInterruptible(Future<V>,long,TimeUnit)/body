{
  isNotNull(timeUnit,"timeUnit");
  long deadline=Clock.currentTimeMillis() + timeUnit.toMillis(timeout);
  while (true) {
    long localTimeout=Math.min(1000 * 10,deadline);
    try {
      return future.get(localTimeout,TimeUnit.MILLISECONDS);
    }
 catch (    TimeoutException te) {
      deadline-=localTimeout;
      if (deadline <= 0) {
        throw te;
      }
      if (!node.isActive()) {
        future.cancel(true);
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
}
