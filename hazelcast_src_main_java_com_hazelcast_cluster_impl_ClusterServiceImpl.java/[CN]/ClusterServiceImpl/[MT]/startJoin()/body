{
  logger.finest("Starting join...");
  lock.lock();
  try {
    try {
      joinInProgress=true;
      node.getPartitionService().pauseMigration();
      Collection<MemberImpl> members=getMemberImpls();
      Collection<MemberInfo> memberInfos=createMemberInfoList(members);
      for (      MemberInfo memberJoining : setJoins) {
        memberInfos.add(memberJoining);
      }
      long time=clusterClock.getClusterTime();
      Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      boolean createPostJoinOperation=(postJoinOps != null && postJoinOps.length > 0);
      PostJoinOperation postJoinOp=(createPostJoinOperation ? new PostJoinOperation(postJoinOps) : null);
      int count=members.size() - 1 + setJoins.size();
      List<Future> calls=new ArrayList<Future>(count);
      for (      MemberInfo member : setJoins) {
        long startTime=clusterClock.getClusterStartTime();
        Operation joinOperation=new FinalizeJoinOperation(memberInfos,postJoinOp,time,clusterId,startTime,clusterStateManager.getState());
        calls.add(invokeClusterOperation(joinOperation,member.getAddress()));
      }
      for (      MemberImpl member : members) {
        if (!member.getAddress().equals(thisAddress)) {
          Operation infoUpdateOperation=new MemberInfoUpdateOperation(memberInfos,time,true);
          calls.add(invokeClusterOperation(infoUpdateOperation,member.getAddress()));
        }
      }
      updateMembers(memberInfos);
      int timeout=Math.min(calls.size() * FINALIZE_JOIN_TIMEOUT_FACTOR,FINALIZE_JOIN_MAX_TIMEOUT);
      waitWithDeadline(calls,timeout,TimeUnit.SECONDS,whileFinalizeJoinsExceptionHandler);
    }
  finally {
      node.getPartitionService().resumeMigration();
    }
  }
  finally {
    lock.unlock();
  }
}
