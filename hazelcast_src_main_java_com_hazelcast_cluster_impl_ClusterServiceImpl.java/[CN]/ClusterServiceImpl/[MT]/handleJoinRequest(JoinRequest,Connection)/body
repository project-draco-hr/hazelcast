{
  if (!node.joined() || !node.isActive()) {
    if (logger.isFinestEnabled()) {
      logger.finest("Node is not ready to process join request...");
    }
    return;
  }
  if (!ensureValidConfiguration(joinRequest)) {
    return;
  }
  Address target=joinRequest.getAddress();
  boolean isRequestFromCurrentMaster=target.equals(node.getMasterAddress());
  if (!node.isMaster() && !isRequestFromCurrentMaster) {
    sendMasterAnswer(target);
    return;
  }
  if (joinInProgress) {
    if (logger.isFinestEnabled()) {
      logger.finest("Join is in-progress. Cannot handle join request from " + target + " at the moment.");
    }
    return;
  }
  lock.lock();
  try {
    if (isJoinRequestFromAnExistingMember(joinRequest,connection)) {
      return;
    }
    long now=Clock.currentTimeMillis();
    if (logger.isFinestEnabled()) {
      String msg="Handling join from " + target + ", inProgress: "+ joinInProgress+ (timeToStartJoin > 0 ? ", timeToStart: " + (timeToStartJoin - now) : "");
      logger.finest(msg);
    }
    MemberInfo memberInfo=new MemberInfo(target,joinRequest.getUuid(),joinRequest.getAttributes());
    if (!setJoins.contains(memberInfo)) {
      try {
        checkSecureLogin(joinRequest,memberInfo);
      }
 catch (      Exception e) {
        ILogger securityLogger=node.loggingService.getLogger("com.hazelcast.security");
        sendAuthenticationFailure(target);
        securityLogger.severe(e);
        return;
      }
    }
    if (firstJoinRequest == 0) {
      firstJoinRequest=now;
    }
    if (setJoins.add(memberInfo)) {
      sendMasterAnswer(target);
      if (now - firstJoinRequest < maxWaitMillisBeforeJoin) {
        timeToStartJoin=now + waitMillisBeforeJoin;
      }
    }
    if (now > timeToStartJoin) {
      startJoin();
    }
  }
  finally {
    lock.unlock();
  }
}
