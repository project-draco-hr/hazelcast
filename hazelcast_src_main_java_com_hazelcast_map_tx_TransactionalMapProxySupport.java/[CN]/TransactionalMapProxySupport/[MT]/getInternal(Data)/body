{
  if (tx.getState() != Transaction.State.ACTIVE) {
    throw new IllegalStateException("Transaction is not active!");
  }
  final MapService mapService=getService();
  final boolean nearCacheEnabled=mapService.getMapContainer(name).isNearCacheEnabled();
  if (nearCacheEnabled) {
    Data cachedData=mapService.getFromNearCache(name,key);
    if (cachedData != null)     return cachedData;
  }
  GetOperation operation=new GetOperation(name,key,tx.getTxnId());
  final NodeEngine nodeEngine=getNodeEngine();
  int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
  try {
    Invocation invocation=nodeEngine.getOperationService().createInvocationBuilder(MapService.SERVICE_NAME,operation,partitionId).build();
    Future f=invocation.invoke();
    return (Data)f.get();
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}
