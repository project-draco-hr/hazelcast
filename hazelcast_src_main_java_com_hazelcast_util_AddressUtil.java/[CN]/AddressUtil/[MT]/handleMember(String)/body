{
  final List<String> members=new ArrayList<String>();
  final Pattern ipPattern=Pattern.compile("(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\.((\\*)||(\\d{1,3}-\\d{1,3}))");
  for (  String token : value.split("[;, ]")) {
    token=token.trim();
    if (token.length() == 0)     continue;
    final Matcher matcher=ipPattern.matcher(token);
    if (matcher.matches()) {
      final String first3=matcher.group(1);
      final String star=matcher.group(3);
      final String range=matcher.group(4);
      if (star != null && star.length() > 0) {
        for (int j=0; j < 256; j++) {
          members.add(first3 + "." + j);
        }
      }
 else       if (range != null && range.length() > 0) {
        final int dashPos=range.indexOf('-');
        final int start=Integer.parseInt(range.substring(0,dashPos));
        final int end=Integer.parseInt(range.substring(dashPos + 1));
        for (int j=start; j <= end; j++) {
          members.add(first3 + "." + j);
        }
      }
 else {
        members.add(token);
      }
    }
 else {
      members.add(token);
    }
  }
  return members;
}
