{
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(4);
  Config config=new Config();
  HazelcastInstance[] instances=factory.newInstances(config);
  warmUpPartitions(instances);
  String partitionKey="someKey";
  String id="foo@" + partitionKey;
  Partition partition=instances[0].getPartitionService().getPartition(partitionKey);
  Member owner=partition.getOwner();
  HazelcastInstance hz=null;
  for (  HazelcastInstance instance : instances) {
    if (instance.getCluster().getLocalMember().equals(owner)) {
      hz=instance;
      break;
    }
  }
  assertNotNull(hz);
  hz.getQueue(id).offer(1);
  hz.getSemaphore(id).release(1);
  hz.getCountDownLatch(id).trySetCount(5);
  hz.getAtomicLong(id).set(111);
  hz.getList(id).add(1);
  hz.getSet(id).add(2);
  hz.getLock(id).lock();
  Node node=getNode(hz);
  NodeEngineImpl nodeEngine=node.nodeEngine;
  QueueService queueService=nodeEngine.getService(QueueService.SERVICE_NAME);
  assertTrue(queueService.containsQueue(id));
  SemaphoreService semaphoreService=nodeEngine.getService(SemaphoreService.SERVICE_NAME);
  assertTrue(semaphoreService.containsSemaphore(id));
  CountDownLatchService latchService=nodeEngine.getService(CountDownLatchService.SERVICE_NAME);
  assertTrue(latchService.containsLatch(id));
  AtomicLongService atomicLongService=nodeEngine.getService(AtomicLongService.SERVICE_NAME);
  assertTrue(atomicLongService.containsAtomicLong(id));
  CollectionService collectionService=nodeEngine.getService(CollectionService.SERVICE_NAME);
  CollectionPartitionContainer cpc=collectionService.getPartitionContainer(partition.getPartitionId());
  assertTrue(cpc.containsCollection(new CollectionProxyId(ObjectListProxy.COLLECTION_LIST_NAME,id,CollectionProxyType.LIST)));
  assertTrue(cpc.containsCollection(new CollectionProxyId(ObjectSetProxy.COLLECTION_SET_NAME,id,CollectionProxyType.SET)));
  LockServiceImpl lockService=nodeEngine.getService(LockServiceImpl.SERVICE_NAME);
  LockStore lockStore=lockService.getLockStore(partition.getPartitionId(),new InternalLockNamespace());
  assertTrue(lockStore.isLocked(node.getSerializationService().toData(id)));
}
