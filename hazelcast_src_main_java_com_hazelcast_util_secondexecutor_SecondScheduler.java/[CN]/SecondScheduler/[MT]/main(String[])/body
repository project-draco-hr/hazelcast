{
  final ScheduledExecutorService se=Executors.newScheduledThreadPool(10);
  final SecondBulkTaskFactory sbtf=new SecondBulkTaskFactory(){
    @Override public SecondBulkTask newSecondTask(){
      return new SecondBulkTask(){
        public void executeAll(        SecondExecutorService ses,        ConcurrentMap<Object,Object> entries,        int delaySecond){
          for (          Object o : entries.values()) {
            System.out.println("bulk execute: " + o);
          }
        }
        public void endSecond(){
        }
      }
;
    }
  }
;
  final SecondEntryTaskFactory setf=new SecondEntryTaskFactory(){
    @Override public SecondEntryTask newSecondTask(){
      return new SecondEntryTask(){
        @Override public void executeEntry(        SecondExecutorService ses,        Map.Entry entry,        int delaySeconds){
          System.out.println("entry execute: " + entry.getValue());
        }
        public void endSecond(){
        }
      }
;
    }
  }
;
  final SecondExecutorService ses=SecondExecutorServiceFactory.newSecondBulkExecutor(se,sbtf);
  new Thread(){
    @Override public synchronized void run(){
      while (true) {
        System.out.println(ses);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
.start();
  for (int i=0; i < 10; i++) {
    ses.schedule(100,i,"value" + i);
    ses.schedule(100,i,"value" + i);
    ses.schedule(100,i,"value" + i);
  }
  for (int i=10; i < 20; i++) {
    ses.schedule(3330,i,"value" + i);
    ses.schedule(4330,i,"value" + i);
    ses.schedule(5330,i,"value" + i);
  }
}
