{
  final ILock lock=hz.getLock(randomString());
  final AtomicInteger upTotal=new AtomicInteger(0);
  final AtomicInteger downTotal=new AtomicInteger(0);
  LockTestThread threads[]=new LockTestThread[8];
  for (int i=0; i < threads.length; i++) {
    LockTestThread t;
    if (tryLockWithTimeOut) {
      t=new TryLockWithTimeOutThread(lock,upTotal,downTotal);
    }
 else {
      t=new TryLockThread(lock,upTotal,downTotal);
    }
    t.start();
    threads[i]=t;
  }
  assertJoinable(threads);
  for (  LockTestThread t : threads) {
    assertNull("thread " + t + " has error "+ t.error,t.error);
  }
  assertTrue("concurrent access to locked code caused wrong total",upTotal.get() + downTotal.get() == 0);
}
