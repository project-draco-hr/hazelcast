{
  HazelcastInstance instance1=createInstance("1",1);
  HazelcastInstance instance2=createInstance("1",1);
  List<Thread> putThreads=new ArrayList<Thread>();
  IMap<Object,Object> testMapInstance1=instance1.getMap("testMap");
  IMap<Object,Object> testMapInstance2=instance2.getMap("testMap");
  putThreads.add(new PutThread(SIZE_PER_PUT_THREAD,testMapInstance1,instance1));
  putThreads.add(new PutThread(SIZE_PER_PUT_THREAD,testMapInstance1,instance1));
  List<Thread> takeThreads=new ArrayList<Thread>();
  CopyOnWriteArrayList<String> destination=new CopyOnWriteArrayList<String>();
  takeThreads.add(new TakeThread(testMapInstance1,destination,instance1));
  takeThreads.add(new TakeThread(testMapInstance1,destination,instance1));
  TakeThread takeThreadSecondInstance=new TakeThread(testMapInstance2,destination,instance2);
  takeThreads.add(takeThreadSecondInstance);
  for (  Thread putThread : putThreads) {
    putThread.start();
  }
  for (  Thread takeThread : takeThreads) {
    takeThread.start();
  }
  while (!((PutThread)putThreads.get(0)).isAlmostFinished()) {
    Thread.sleep(10l);
  }
  takeThreadSecondInstance.setStop(true);
  instance2.getLifecycleService().kill();
  while (!testMapInstance1.isEmpty()) {
    Thread.sleep(10l);
  }
  org.junit.Assert.assertThat(destination.size(),Is.is(SIZE_PER_PUT_THREAD / 4));
  while (true) {
    Thread.sleep(100);
  }
}
