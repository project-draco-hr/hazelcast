{
  final ClientEndpoint endpoint=getEndpoint();
  CacheService cacheService=getService(CacheService.SERVICE_NAME);
  String registrationId=cacheService.addInvalidationListener(parameters.name,new CacheEventListener(){
    @Override public void handleEvent(    Object eventObject){
      if (!endpoint.isAlive()) {
        return;
      }
      if (eventObject instanceof CacheInvalidationMessage) {
        if (eventObject instanceof CacheSingleInvalidationMessage) {
          CacheSingleInvalidationMessage message=(CacheSingleInvalidationMessage)eventObject;
          ClientMessage eventMessage=CacheAddInvalidationListenerCodec.encodeCacheInvalidationEvent(message.getName(),message.getKey(),message.getSourceUuid());
          sendClientMessage(message.getName(),eventMessage);
        }
 else         if (eventObject instanceof CacheBatchInvalidationMessage) {
          CacheBatchInvalidationMessage message=(CacheBatchInvalidationMessage)eventObject;
          List<CacheSingleInvalidationMessage> invalidationMessages=message.getInvalidationMessages();
          List<Data> keys=new ArrayList<Data>(invalidationMessages.size());
          List<String> sourceUuids=new ArrayList<String>(invalidationMessages.size());
          for (          CacheSingleInvalidationMessage invalidationMessage : invalidationMessages) {
            keys.add(invalidationMessage.getKey());
            sourceUuids.add(invalidationMessage.getSourceUuid());
          }
          ClientMessage eventMessage=CacheAddInvalidationListenerCodec.encodeCacheBatchInvalidationEvent(message.getName(),keys,sourceUuids);
          sendClientMessage(message.getName(),eventMessage);
        }
      }
    }
  }
);
  endpoint.setListenerRegistration(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}
