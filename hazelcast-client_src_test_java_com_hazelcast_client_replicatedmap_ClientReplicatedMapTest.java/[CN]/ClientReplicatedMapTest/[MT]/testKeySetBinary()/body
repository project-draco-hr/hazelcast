{
  Config cfg=new Config();
  cfg.getReplicatedMapConfig("default").setInMemoryFormat(InMemoryFormat.BINARY);
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(cfg);
  HazelcastInstance instance2=HazelcastClient.newHazelcastClient();
  final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");
  final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");
  final SimpleEntry<Integer,Integer>[] testValues=buildTestValues();
  final List<Integer> keySetTestValues=new ArrayList<Integer>(testValues.length);
  WatchedOperationExecutor executor=new WatchedOperationExecutor();
  executor.execute(new Runnable(){
    @Override public void run(){
      int half=testValues.length / 2;
      for (int i=0; i < testValues.length; i++) {
        final ReplicatedMap map=i < half ? map1 : map2;
        final SimpleEntry<Integer,Integer> entry=testValues[i];
        map.put(entry.getKey(),entry.getValue());
        keySetTestValues.add(entry.getKey());
      }
    }
  }
,2,200,EntryEventType.ADDED,map1,map2);
  List<Integer> keySet1=new ArrayList<Integer>(map1.keySet());
  List<Integer> keySet2=new ArrayList<Integer>(map2.keySet());
  Collections.sort(keySet1);
  Collections.sort(keySet2);
  Collections.sort(keySetTestValues);
  assertEquals(keySetTestValues,keySet1);
  assertEquals(keySetTestValues,keySet2);
}
