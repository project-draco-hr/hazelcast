{
  Set<Long> values=mapRecords.keySet();
  for (  Long value : values) {
    boolean valid=false;
    if (doubleValue) {
      double v=Double.longBitsToDouble(value);
      double searchedV=Double.longBitsToDouble(searchedValue);
switch (predicateType) {
case LESSER:
        valid=v < searchedV;
      break;
case LESSER_EQUAL:
    valid=v <= searchedV;
  break;
case GREATER:
valid=v > searchedV;
break;
case GREATER_EQUAL:
valid=v >= searchedV;
break;
case NOT_EQUAL:
valid=v != searchedV;
break;
}
}
switch (predicateType) {
case LESSER:
valid=value < searchedValue;
break;
case LESSER_EQUAL:
valid=value <= searchedValue;
break;
case GREATER:
valid=value > searchedValue;
break;
case GREATER_EQUAL:
valid=value >= searchedValue;
break;
case NOT_EQUAL:
valid=value.longValue() != searchedValue.longValue();
break;
}
if (valid) {
ConcurrentMap<Long,Record> records=mapRecords.get(value);
if (records != null) {
results.addResultSet(value,records.values());
}
}
}
}
