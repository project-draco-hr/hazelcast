{
  int maxSameHostCount=3;
  int[] partitionCounts=new int[]{271,787,1549,3217,8707};
  int[] members=new int[]{3,6,7,9,10,5,11,13,8,17,57,100,130,77,255,179,93,37,26,15,5};
  for (int i=0; i < partitionCounts.length; i++) {
    int partitionCount=partitionCounts[i];
    int memberCount=members[0];
    List<Member> memberList=createMembers(memberCount,maxSameHostCount);
    Collection<MemberGroup> groups=nodeGroupFactory.createMemberGroups(memberList);
    println("PARTITION-COUNT= " + partitionCount + ", MEMBER-COUNT= "+ members[0]+ ", GROUP-COUNT= "+ groups.size());
    println();
    PartitionInfo[] state=generator.initialize(memberList,partitionCount);
    checkTestResult(state,groups,partitionCount);
    int previousMemberCount=memberCount;
    for (int j=1; j < members.length; j++) {
      memberCount=members[j];
      if ((float)partitionCount / memberCount > 2) {
        if (previousMemberCount == 0) {
          memberList=createMembers(memberCount,maxSameHostCount);
        }
 else         if (memberCount > previousMemberCount) {
          MemberImpl last=(MemberImpl)memberList.get(previousMemberCount - 1);
          List<Member> extra=createMembers(last,(memberCount - previousMemberCount),maxSameHostCount);
          memberList.addAll(extra);
        }
 else {
          memberList=memberList.subList(0,memberCount);
          shift(state,memberList);
        }
        groups=nodeGroupFactory.createMemberGroups(memberList);
        println("PARTITION-COUNT= " + partitionCount + ", MEMBER-COUNT= "+ memberCount+ ", GROUP-COUNT= "+ groups.size());
        state=generator.reArrange(state,memberList,partitionCount,new LinkedList<MigrationInfo>());
        checkTestResult(state,groups,partitionCount);
        previousMemberCount=memberCount;
      }
    }
  }
}
