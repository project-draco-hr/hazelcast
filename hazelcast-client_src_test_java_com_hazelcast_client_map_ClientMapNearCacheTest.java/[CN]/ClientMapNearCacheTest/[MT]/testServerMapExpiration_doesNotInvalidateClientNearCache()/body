{
  final String mapName=randomMapName(NEAR_CACHE_WITH_LONG_MAX_IDLE_TIME);
  final IMap clientMap=client.getMap(mapName);
  final CountDownLatch addEventsToBeFired=new CountDownLatch(1);
  final CountDownLatch waitEventsToBeFired=new CountDownLatch(1);
  clientMap.addEntryListener(new EntryAdapter(){
    @Override public void entryAdded(    EntryEvent event){
      addEventsToBeFired.countDown();
    }
    @Override public void entryEvicted(    EntryEvent event){
      waitEventsToBeFired.countDown();
    }
  }
,false);
  clientMap.put(1,1,3,TimeUnit.SECONDS);
  assertOpenEventually(addEventsToBeFired);
  clientMap.get(1);
  assertOpenEventually(waitEventsToBeFired);
  sleepSeconds(2);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      final LocalMapStats localMapStats=clientMap.getLocalMapStats();
      NearCacheStats stats=localMapStats.getNearCacheStats();
      assertEquals(1,stats.getOwnedEntryCount());
    }
  }
);
}
