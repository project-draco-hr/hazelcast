{
  String mapName=recordStore.getName();
  int partitionId=recordStore.getPartitionId();
  MapContainer mapContainer=recordStore.getMapContainer();
  MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  MaxSizeConfig.MaxSizePolicy maxSizePolicy=maxSizeConfig.getMaxSizePolicy();
  boolean result;
switch (maxSizePolicy) {
case PER_NODE:
    result=checkPerNodeEviction(mapName,maxSizeConfig);
  break;
case PER_PARTITION:
result=checkPerPartitionEviction(mapName,maxSizeConfig,partitionId);
break;
case USED_HEAP_PERCENTAGE:
result=checkHeapPercentageEviction(mapName,maxSizeConfig);
break;
case USED_HEAP_SIZE:
result=checkHeapSizeEviction(mapName,maxSizeConfig);
break;
case FREE_HEAP_PERCENTAGE:
result=checkFreeHeapPercentageEviction(maxSizeConfig);
break;
case FREE_HEAP_SIZE:
result=checkFreeHeapSizeEviction(maxSizeConfig);
break;
default :
throw new IllegalArgumentException("Not an appropriate max size policy [" + maxSizePolicy + ']');
}
return result;
}
