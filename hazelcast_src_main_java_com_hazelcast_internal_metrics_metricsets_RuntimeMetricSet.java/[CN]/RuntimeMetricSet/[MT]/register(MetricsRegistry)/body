{
  checkNotNull(metricsRegistry,"metricsRegistry");
  Runtime runtime=Runtime.getRuntime();
  RuntimeMXBean mxBean=ManagementFactory.getRuntimeMXBean();
  metricsRegistry.register(runtime,"runtime.freeMemory",new LongProbeFunction<Runtime>(){
    @Override public long get(    Runtime runtime){
      return runtime.freeMemory();
    }
  }
);
  metricsRegistry.register(runtime,"runtime.totalMemory",new LongProbeFunction<Runtime>(){
    @Override public long get(    Runtime runtime){
      return runtime.totalMemory();
    }
  }
);
  metricsRegistry.register(runtime,"runtime.maxMemory",new LongProbeFunction<Runtime>(){
    @Override public long get(    Runtime runtime){
      return runtime.maxMemory();
    }
  }
);
  metricsRegistry.register(runtime,"runtime.usedMemory",new LongProbeFunction<Runtime>(){
    @Override public long get(    Runtime runtime){
      return runtime.totalMemory() - runtime.freeMemory();
    }
  }
);
  metricsRegistry.register(runtime,"runtime.availableProcessors",new LongProbeFunction<Runtime>(){
    @Override public long get(    Runtime runtime){
      return runtime.availableProcessors();
    }
  }
);
  metricsRegistry.register(mxBean,"runtime.uptime",new LongProbeFunction<RuntimeMXBean>(){
    @Override public long get(    RuntimeMXBean runtimeMXBean){
      return runtimeMXBean.getUptime();
    }
  }
);
}
