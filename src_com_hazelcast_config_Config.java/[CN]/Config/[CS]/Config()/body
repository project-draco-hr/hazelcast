{
  boolean usingSystemConfig=false;
  String configFile=System.getProperty("hazelcast.config");
  File fileConfig=null;
  InputStream in=null;
  try {
    if (configFile != null) {
      fileConfig=new File(configFile);
      if (!fileConfig.exists()) {
        String msg="Config file at '" + configFile + "' doesn't exist.";
        msg+="\nHazelcast will try to use the hazelcast.xml config file in the classpath.";
        logger.log(Level.WARNING,msg);
        fileConfig=null;
      }
    }
    if (fileConfig == null) {
      configFile="hazelcast.xml";
      fileConfig=new File("hazelcast.xml");
      if (!fileConfig.exists()) {
        fileConfig=null;
      }
    }
    if (fileConfig != null) {
      logger.log(Level.INFO,"Using configuration file at " + fileConfig.getAbsolutePath());
      try {
        in=new FileInputStream(fileConfig);
        urlConfig=fileConfig.toURI().toURL();
        usingSystemConfig=true;
      }
 catch (      final Exception e) {
        String msg="Having problem reading config file at '" + configFile + "'.";
        msg+="\nException message: " + e.getMessage();
        msg+="\nHazelcast will try to use the hazelcast.xml config file in the jar.";
        logger.log(Level.WARNING,msg);
        in=null;
      }
    }
    if (in == null) {
      urlConfig=Config.class.getClassLoader().getResource("hazelcast.xml");
      if (urlConfig == null)       return;
      in=Config.class.getClassLoader().getResourceAsStream("hazelcast.xml");
      if (in == null) {
        String msg="Having problem reading config file hazelcast.xml in the classpath.";
        msg+="\nHazelcast will start with default configuration.";
        logger.log(Level.WARNING,msg);
      }
    }
    if (in == null)     return;
    final DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document doc=null;
    try {
      doc=builder.parse(in);
      final ByteArrayOutputStream baos=new ByteArrayOutputStream();
      Util.streamXML(doc,baos);
      final byte[] bytes=baos.toByteArray();
      final ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
      xmlConfig=Util.inputStreamToString(bais);
      if ("true".equals(System.getProperty("hazelcast.config.print"))) {
        logger.log(Level.INFO,"Hazelcast config URL : " + urlConfig);
        logger.log(Level.INFO,"=== Hazelcast config xml ===");
        logger.log(Level.INFO,xmlConfig);
        logger.log(Level.INFO,"==============================");
        logger.log(Level.INFO,"");
      }
    }
 catch (    final Exception e) {
      String msgPart="config file '" + configFile + "' set as a system property.";
      if (!usingSystemConfig)       msgPart="hazelcast.xml config file in the classpath.";
      String msg="Having problem parsing the " + msgPart;
      msg+="\nException: " + e.getMessage();
      msg+="\nHazelcast will start with default configuration.";
      logger.log(Level.WARNING,msg);
      return;
    }
    final Element docElement=doc.getDocumentElement();
    try {
      docElement.getTextContent();
    }
 catch (    final Throwable e) {
      domLevel3=false;
    }
    final NodeList nodelist=docElement.getChildNodes();
    for (int i=0; i < nodelist.getLength(); i++) {
      final org.w3c.dom.Node node=nodelist.item(i);
      if (node.getNodeName().equals("network")) {
        handleNetwork(node);
      }
 else       if (node.getNodeName().equals("group")) {
        handleGroup(node);
      }
 else       if (node.getNodeName().equals("executor-service")) {
        handleExecutor(node);
      }
 else       if (node.getNodeName().equals("queue")) {
        handleQueue(node);
      }
 else       if (node.getNodeName().equals("map")) {
        handleMap(node);
      }
 else       if (node.getNodeName().equals("topic")) {
        handleTopic(node);
      }
    }
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
}
