{
  final String concurrencyLevelStr=(args == null || args.length <= 0) ? "0" : args[0];
  final String profile=(args == null || args.length <= 1) ? "all" : args[1];
  final int concurrencyLevel=Integer.parseInt(concurrencyLevelStr);
  final Thread[] threads=new Thread[concurrencyLevel];
  System.out.println(format.format(new Date()) + " PARALLEL TESTS STARTED concurrency:" + concurrencyLevel+ " profile:"+ profile);
  long start=System.currentTimeMillis();
  for (int i=0; i < concurrencyLevel; i++) {
    final String index=Integer.toString(i);
    Thread t=new Thread(new Runnable(){
      public void run(){
        try {
          long processStart=System.currentTimeMillis();
          String[] exec=new String[]{"mvn","-Dhazelcast.test.index=" + index,"-Dhazelcast.test.concurrency.level=" + concurrencyLevel,"-P",profile,"test","-DreportNameSuffix=" + index};
          ProcessBuilder processBuilder=new ProcessBuilder(exec);
          processBuilder.redirectErrorStream(true);
          Process proc=processBuilder.start();
          InputStream in=proc.getInputStream();
          BufferedReader br=new BufferedReader(new InputStreamReader(in));
          String str;
          while ((str=br.readLine()) != null) {
            if (str.contains("Started") || str.contains("Finished")) {
              System.out.println(str);
            }
          }
          try {
            proc.waitFor();
          }
 catch (          InterruptedException e) {
            System.err.println("Process was interrupted");
          }
          System.out.println(proc.exitValue());
          br.close();
          long now=System.currentTimeMillis();
          long seconds=(now - processStart) / 1000;
          long minutes=seconds / 60;
          long remainingSeconds=seconds % 60;
          System.out.println("-------------------------------------------------");
          System.out.println();
          System.out.println(format.format(new Date()) + ": DONE!! [" + index+ "] in "+ minutes+ " min. and "+ remainingSeconds+ " secs.");
          System.out.println();
          System.out.println("-------------------------------------------------");
          proc.destroy();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    threads[i]=t;
    t.start();
  }
  for (  Thread thread : threads) {
    try {
      thread.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  long now=System.currentTimeMillis();
  long seconds=(now - start) / 1000;
  long minutes=seconds / 60;
  long remainingSeconds=seconds % 60;
  System.out.println("=================================================");
  System.out.println();
  System.out.println(format.format(new Date()) + ": Completed.");
  System.out.println("TOOK : " + minutes + " minutes and "+ remainingSeconds+ " secs.");
  System.out.println();
  System.out.println("=================================================");
}
