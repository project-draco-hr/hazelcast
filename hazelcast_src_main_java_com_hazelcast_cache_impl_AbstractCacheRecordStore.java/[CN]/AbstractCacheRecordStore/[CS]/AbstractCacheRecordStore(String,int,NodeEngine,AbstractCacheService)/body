{
  this.name=name;
  this.partitionId=partitionId;
  this.nodeEngine=nodeEngine;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException("Cache " + name + " is already destroyed or not created yet, on "+ nodeEngine.getLocalMember());
  }
  evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException("Eviction config cannot be null!");
  }
  wanReplicationEnabled=cacheService.isWanReplicationEnabled(name);
  disablePerEntryInvalidationEvents=cacheConfig.isDisablePerEntryInvalidationEvents();
  if (cacheConfig.isStatisticsEnabled()) {
    statistics=cacheService.createCacheStatIfAbsent(name);
  }
  if (cacheConfig.getCacheLoaderFactory() != null) {
    Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    injectDependencies(cacheLoaderFactory);
    cacheLoader=cacheLoaderFactory.create();
    injectDependencies(cacheLoader);
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    injectDependencies(cacheWriterFactory);
    cacheWriter=cacheWriterFactory.create();
    injectDependencies(cacheWriter);
  }
  if (cacheConfig.getExpiryPolicyFactory() != null) {
    Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
    injectDependencies(expiryPolicyFactory);
    defaultExpiryPolicy=expiryPolicyFactory.create();
    injectDependencies(defaultExpiryPolicy);
  }
 else {
    throw new IllegalStateException("Expiry policy factory cannot be null!");
  }
  cacheContext=cacheService.getOrCreateCacheContext(name);
  records=createRecordCacheMap();
  maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaximumSizePolicy());
  evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  evictionChecker=createEvictionChecker(evictionConfig);
  evictionStrategy=createEvictionStrategy(evictionConfig);
  registerResourceIfItIsClosable(cacheWriter);
  registerResourceIfItIsClosable(cacheLoader);
  registerResourceIfItIsClosable(defaultExpiryPolicy);
  init();
}
