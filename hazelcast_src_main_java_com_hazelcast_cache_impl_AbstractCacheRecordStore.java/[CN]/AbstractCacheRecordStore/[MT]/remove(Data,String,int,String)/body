{
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  deleteCacheEntry(key);
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isEventsEnabled()) {
        publishEvent(createCacheCompleteEvent(toEventData(key),CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin,completionId));
      }
    }
 else {
      removed=deleteRecord(key,completionId,source,origin);
    }
    onRemove(key,null,source,false,record,removed);
    if (removed && isStatisticsEnabled()) {
      statistics.increaseCacheRemovals(1);
      statistics.addRemoveTimeNanos(System.nanoTime() - start);
    }
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}
