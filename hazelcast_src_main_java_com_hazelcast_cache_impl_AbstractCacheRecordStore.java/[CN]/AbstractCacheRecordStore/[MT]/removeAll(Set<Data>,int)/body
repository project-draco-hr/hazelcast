{
  final long now=Clock.currentTimeMillis();
  final Set<Data> localKeys=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
  try {
    deleteAllCacheEntry(localKeys);
  }
  finally {
    final Set<Data> keysToClean=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
    for (    Data key : keysToClean) {
      eventsBatchingEnabled=true;
      final R record=records.get(key);
      if (localKeys.contains(key) && record != null) {
        final boolean isExpired=processExpiredEntry(key,record,now);
        if (!isExpired) {
          deleteRecord(key,IGNORE_COMPLETION);
          if (isStatisticsEnabled()) {
            statistics.increaseCacheRemovals(1);
          }
        }
        keys.add(key);
      }
 else {
        keys.remove(key);
      }
      eventsBatchingEnabled=false;
      hasExpiringEntry=false;
    }
    int orderKey=keys.hashCode();
    publishBatchedEvents(name,CacheEventType.REMOVED,orderKey);
    if (isEventsEnabled()) {
      publishEvent(createCacheCompleteEvent(new HeapData(),completionId));
    }
  }
}
