{
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean result=true;
  if (record == null || isExpired) {
    if (isStatisticsEnabled()) {
      statistics.increaseCacheMisses(1);
    }
    result=false;
  }
 else {
    hitCount++;
    if (compare(toValue(record),toValue(value))) {
      deleteCacheEntry(key);
      deleteRecord(key,completionId);
    }
 else {
      long expiryTime=updateAccessDuration(record,defaultExpiryPolicy,now);
      processExpiredEntry(key,record,expiryTime,now);
      result=false;
    }
  }
  if (!result) {
    publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
  }
  onRemove(key,value,caller,false,record,result);
  if (records.size() == 0) {
    hasExpiringEntry=false;
  }
  if (result && isStatisticsEnabled()) {
    statistics.increaseCacheRemovals(1);
    statistics.addRemoveTimeNanos(System.nanoTime() - start);
    if (hitCount == 1) {
      statistics.increaseCacheHits(hitCount);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
  return result;
}
