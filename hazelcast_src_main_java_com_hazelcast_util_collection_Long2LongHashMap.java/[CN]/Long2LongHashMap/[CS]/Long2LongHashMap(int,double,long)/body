{
  this.loadFactor=loadFactor;
  this.missingValue=missingValue;
  capacity(QuickMath.nextPowerOfTwo(initialCapacity));
  final LongIterator keyIterator=new LongIterator(0);
  keySet=new MapDelegatingSet<Long>(this,new IteratorSupplier(keyIterator),new Predicate(){
    @Override public boolean test(    Object value){
      return containsValue(value);
    }
  }
);
  values=new MapDelegatingSet<Long>(this,new Supplier<Iterator<Long>>(){
    @Override public Iterator<Long> get(){
      return valueIterator.reset();
    }
  }
,new Predicate(){
    @Override public boolean test(    Object key){
      return containsKey(key);
    }
  }
);
  final EntryIterator entryIterator=new EntryIterator();
  entrySet=new MapDelegatingSet<Entry<Long,Long>>(this,new EntryIteratorSupplier(entryIterator),new Predicate(){
    @Override public boolean test(    Object e){
      return Long2LongHashMap.this.containsKey(((Entry<Long,Long>)e).getKey());
    }
  }
);
}
