{
  final Config config=new XmlConfigBuilder().build();
  config.setProperty("hazelcast.logging.type","log4j");
  config.setProperty("hazelcast.jmx","false");
  MapConfig mapConfig=config.getMapConfig(mapName);
  final InMemoryMapStore store=new InMemoryMapStore(false,300,false);
  store.preload(preloadSize);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setEnabled(true);
  mapStoreConfig.setInitialLoadMode(InitialLoadMode.LAZY);
  mapStoreConfig.setWriteDelaySeconds(writeDelaySeconds);
  mapStoreConfig.setClassName(null);
  mapStoreConfig.setImplementation(store);
  mapConfig.setMapStoreConfig(mapStoreConfig);
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  Thread thread1=new Thread(new Runnable(){
    @Override public void run(){
      HazelcastInstance hcInstance=factory.newHazelcastInstance(config);
      try {
        IMap<String,String> map=hcInstance.getMap(mapName);
        map.size();
      }
  finally {
        thread1Shutdown.set(System.currentTimeMillis());
        hcInstance.getLifecycleService().shutdown();
      }
    }
  }
,"Thread 1");
  thread1.start();
  sleep(10000,true);
  Thread thread2=new Thread(new Runnable(){
    @Override public void run(){
      HazelcastInstance hcInstance=factory.newHazelcastInstance(config);
      try {
        final IMap<Object,Object> map=hcInstance.getMap(mapName);
        sleep(20000,true);
      }
  finally {
        thread2Shutdown.set(System.currentTimeMillis());
        hcInstance.getLifecycleService().shutdown();
      }
    }
  }
,"Thread 2");
  thread2.start();
  thread1.join();
  thread2.join();
  if (thread1Shutdown.get() > thread2Shutdown.get()) {
    fail("Thread 2 was shutdown before thread 1.");
  }
}
