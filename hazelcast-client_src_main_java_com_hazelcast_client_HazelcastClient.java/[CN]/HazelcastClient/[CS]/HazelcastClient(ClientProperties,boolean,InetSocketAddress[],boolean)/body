{
  this.properties=properties;
  this.id=counter.incrementAndGet();
  final String groupName=properties.getProperty(ClientPropertyName.GROUP_NAME);
  final String prefix="hz.client." + this.id + ".";
  final ThreadFactory threadFactory=new ThreadFactory(){
    final AtomicInteger atomicInteger=new AtomicInteger();
    public Thread newThread(    Runnable r){
      Thread t=new Thread(r,prefix + groupName + "_cached_thread_"+ atomicInteger.incrementAndGet());
      if (t.isDaemon()) {
        t.setDaemon(false);
      }
      if (t.getPriority() != Thread.NORM_PRIORITY) {
        t.setPriority(Thread.NORM_PRIORITY);
      }
      return t;
    }
  }
;
  executor=Executors.newCachedThreadPool(threadFactory);
  lifecycleService=new LifecycleServiceClientImpl(this);
  lifecycleService.fireLifecycleEvent(STARTING);
  parallelExecutorService=new ParallelExecutorService(executor);
  parallelExecutorDefault=parallelExecutorService.newParallelExecutor(10);
  connectionManager=automatic ? new ConnectionManager(this,lifecycleService,clusterMembers[0]) : new ConnectionManager(this,lifecycleService,clusterMembers,shuffle);
  connectionManager.setBinder(new DefaultClientBinder(this));
  out=new OutRunnable(this,calls,new PacketWriter());
  in=new InRunnable(this,out,calls,new PacketReader());
  listenerManager=new ListenerManager(this);
  try {
    final Connection c=connectionManager.getInitConnection();
    if (c == null) {
      throw new IllegalStateException("Unable to connect to cluster");
    }
  }
 catch (  IOException e) {
    throw new ClusterClientException(e.getMessage(),e);
  }
  new Thread(out,prefix + "OutThread").start();
  new Thread(in,prefix + "InThread").start();
  new Thread(listenerManager,prefix + "Listener").start();
  mapLockProxy=getMap("__hz_Locks");
  clusterClientProxy=new ClusterClientProxy(this);
  partitionClientProxy=new PartitionClientProxy(this);
  if (automatic) {
    this.getCluster().addMembershipListener(connectionManager);
    connectionManager.updateMembers();
  }
  lifecycleService.fireLifecycleEvent(STARTED);
}
