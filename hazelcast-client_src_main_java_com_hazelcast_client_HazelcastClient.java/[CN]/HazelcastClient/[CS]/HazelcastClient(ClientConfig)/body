{
  this.config=config;
  final GroupConfig groupConfig=config.getGroupConfig();
  name="hz.client_" + id + (groupConfig != null ? "_" + groupConfig.getName() : "");
  threadGroup=new ThreadGroup(name);
  lifecycleService=new LifecycleServiceImpl(this);
  proxyManager=new ProxyManager(this);
  executionService=new ClientExecutionServiceImpl(name,threadGroup,Thread.currentThread().getContextClassLoader());
  clusterService=new ClientClusterServiceImpl(this);
  LoadBalancer loadBalancer=config.getLoadBalancer();
  if (loadBalancer == null) {
    loadBalancer=new RoundRobinLB();
  }
  if (config.isSmart()) {
    connectionManager=new SmartClientConnectionManager(this,clusterService.getAuthenticator(),loadBalancer);
  }
 else {
    connectionManager=new DummyClientConnectionManager(this,clusterService.getAuthenticator(),loadBalancer);
  }
  partitionService=new ClientPartitionServiceImpl(this);
  invocationService=new ClientInvocationServiceImpl(this);
  userContext=new ConcurrentHashMap<String,Object>();
  clusterService.start();
  loadBalancer.init(getCluster(),config);
  partitionService.start();
  proxyManager.init(config.getProxyFactoryConfig());
  lifecycleService.setStarted();
}
