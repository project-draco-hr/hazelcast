{
  final MapReduceService mapReduceService=getService(MapReduceService.SERVICE_NAME);
  final JobTrackerConfig config=((AbstractJobTracker)jobTracker).getJobTrackerConfig();
  final boolean communicateStats=config.isCommunicateStats();
  final int chunkSize=getChunkSizeOrConfigChunkSize(config);
  final TopologyChangedStrategy topologyChangedStrategy=getTopologyChangedStrategyOrConfigTopologyChangedStrategy(config);
  final String name=getDistributedObjectName();
  final String jobId=getJobId();
  final KeyValueSource keyValueSource=getKeyValueSource();
  final Mapper mapper=getMapper();
  final CombinerFactory combinerFactory=getCombinerFactory();
  final ReducerFactory reducerFactory=getReducerFactory();
  final Collection keys=getKeys();
  final Collection<Object> keyObjects=getKeyObjects(keys);
  final KeyPredicate predicate=getPredicate();
  final ClusterService clusterService=nodeEngine.getClusterService();
  for (  Member member : clusterService.getMembers(KeyValueJobOperation.MEMBER_SELECTOR)) {
    Operation operation=new KeyValueJobOperation(name,jobId,chunkSize,keyValueSource,mapper,combinerFactory,reducerFactory,communicateStats,topologyChangedStrategy);
    executeOperation(operation,member.getAddress(),mapReduceService,nodeEngine);
  }
  for (  Member member : clusterService.getMembers(DATA_MEMBER_SELECTOR)) {
    Operation operation=new StartProcessingJobOperation(name,jobId,keyObjects,predicate);
    executeOperation(operation,member.getAddress(),mapReduceService,nodeEngine);
  }
}
