{
  MapReduceService mapReduceService=getService(MapReduceService.SERVICE_NAME);
  JobTrackerConfig config=((AbstractJobTracker)jobTracker).getJobTrackerConfig();
  boolean communicateStats=config.isCommunicateStats();
  int chunkSize=getChunkSize();
  if (chunkSize == -1) {
    chunkSize=config.getChunkSize();
  }
  String topologyChangedStrategyStr=getTopologyChangedStrategy();
  TopologyChangedStrategy topologyChangedStrategy;
  if (topologyChangedStrategyStr == null) {
    topologyChangedStrategy=config.getTopologyChangedStrategy();
  }
 else {
    topologyChangedStrategy=TopologyChangedStrategy.valueOf(topologyChangedStrategyStr.toUpperCase(Locale.ENGLISH));
  }
  ClusterService cs=nodeEngine.getClusterService();
  Collection<Member> members=cs.getMembers();
  String name=getDistributedObjectName();
  String jobId=getJobId();
  KeyValueSource keyValueSource=getKeyValueSource();
  Mapper mapper=getMapper();
  CombinerFactory combinerFactory=getCombinerFactory();
  ReducerFactory reducerFactory=getReducerFactory();
  Collection keys=getKeys();
  Collection<Object> keyObjects=null;
  if (keys != null) {
    keyObjects=new ArrayList<Object>(keys.size());
    for (    Object key : keys) {
      keyObjects.add(serializationService.toObject(key));
    }
  }
  KeyPredicate predicate=getPredicate();
  for (  Member member : members) {
    Operation operation=new KeyValueJobOperation(name,jobId,chunkSize,keyValueSource,mapper,combinerFactory,reducerFactory,communicateStats,topologyChangedStrategy);
    executeOperation(operation,member.getAddress(),mapReduceService,nodeEngine);
  }
  for (  Member member : members) {
    Operation operation=new StartProcessingJobOperation(name,jobId,keyObjects,predicate);
    executeOperation(operation,member.getAddress(),mapReduceService,nodeEngine);
  }
}
