{
  String first=args[0];
  int threadCount=Integer.parseInt(first.substring(1,first.indexOf(".")));
  if (threadCount < 1 || threadCount > 16) {
    throw new RuntimeException("threadcount can't be smaller than 1 or larger than 16");
  }
  int taskCount=Integer.parseInt(args[1]);
  int durationSec=Integer.parseInt(args[2]);
  long startMs=System.currentTimeMillis();
  IExecutorService executor=hazelcast.getExecutorService(executorNamespace + " " + threadCount);
  List<Future> futures=new LinkedList<Future>();
  List<Member> members=new LinkedList<Member>(hazelcast.getCluster().getMembers());
  int totalThreadCount=hazelcast.getCluster().getMembers().size() * threadCount;
  int latchId=0;
  for (int k=0; k < taskCount; k++) {
    Member member=members.get(k % members.size());
    if (taskCount % totalThreadCount == 0) {
      latchId=taskCount / totalThreadCount;
      hazelcast.getCountDownLatch("latch" + latchId).trySetCount(totalThreadCount);
    }
    Future f=executor.submitToMember(new SimulateLoadTask(durationSec,k + 1,"latch" + latchId),member);
    futures.add(f);
  }
  for (  Future f : futures) {
    try {
      f.get();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
  }
  long durationMs=System.currentTimeMillis() - startMs;
  println(format("Executed %s tasks in %s ms",taskCount,durationMs));
}
