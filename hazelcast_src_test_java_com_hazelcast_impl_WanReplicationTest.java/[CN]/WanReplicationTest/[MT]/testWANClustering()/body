{
  Config c1=new Config();
  Config c2=new Config();
  c1.getGroupConfig().setName("newyork");
  c1.addWanReplicationConfig(new WanReplicationConfig().setName("my-wan").addTargetClusterConfig(new WanTargetClusterConfig().addEndpoint("127.0.0.1:5702").setGroupName("london")));
  c1.getMapConfig("default").setWanReplicationRef(new WanReplicationRef().setName("my-wan").setMergePolicy(PassThroughMergePolicy.NAME));
  c2.getGroupConfig().setName("london");
  c2.addWanReplicationConfig(new WanReplicationConfig().setName("my-wan").addTargetClusterConfig(new WanTargetClusterConfig().addEndpoint("127.0.0.1:5701").setGroupName("newyork")));
  c2.getMapConfig("default").setWanReplicationRef(new WanReplicationRef().setName("my-wan").setMergePolicy(PassThroughMergePolicy.NAME));
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  HazelcastInstance h12=Hazelcast.newHazelcastInstance(c1);
  HazelcastInstance h13=Hazelcast.newHazelcastInstance(c1);
  HazelcastInstance h22=Hazelcast.newHazelcastInstance(c2);
  int size=100;
  MergeLatch mergeLatch1=new MergeLatch(2 * size);
  MergeLatch mergeLatch2=new MergeLatch(size);
  getConcurrentMapManager(h1).addWanMergeListener(mergeLatch1);
  getConcurrentMapManager(h12).addWanMergeListener(mergeLatch1);
  getConcurrentMapManager(h13).addWanMergeListener(mergeLatch1);
  getConcurrentMapManager(h2).addWanMergeListener(mergeLatch2);
  getConcurrentMapManager(h22).addWanMergeListener(mergeLatch2);
  for (int i=0; i < size; i++) {
    h2.getMap("default").put(i,"value" + i);
    h22.getMap("default").put(size + i,"value" + (size + i));
  }
  assertTrue("Latch state 1: " + mergeLatch1,mergeLatch1.await(60,TimeUnit.SECONDS));
  Thread.sleep(1000);
  assertEquals(0,mergeLatch2.totalOperations());
  assertEquals(2 * size,mergeLatch1.getUpdateCount());
  assertEquals(2 * size,mergeLatch1.totalOperations());
  assertEquals(2 * size,h2.getMap("default").size());
  assertEquals(2 * size,h1.getMap("default").size());
  assertEquals(2 * size,h12.getMap("default").size());
  assertEquals(2 * size,h13.getMap("default").size());
  assertEquals(2 * size,h22.getMap("default").size());
  mergeLatch1.reset();
  for (int i=0; i < size / 2; i++) {
    h1.getMap("default").remove(i);
    h13.getMap("default").remove(size + i);
  }
  assertTrue("Latch state 2: " + mergeLatch2,mergeLatch2.await(60,TimeUnit.SECONDS));
  Thread.sleep(1000);
  assertEquals(size,mergeLatch2.getRemoveCount());
  assertEquals(size,mergeLatch2.totalOperations());
  assertEquals(0,mergeLatch1.totalOperations());
  assertEquals(size,h1.getMap("default").size());
  assertEquals(size,h2.getMap("default").size());
  assertEquals(size,h12.getMap("default").size());
  assertEquals(size,h13.getMap("default").size());
  assertEquals(size,h22.getMap("default").size());
}
