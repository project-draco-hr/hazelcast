{
  Config config=new Config();
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  HazelcastInstance[] instances=factory.newInstances(config);
  HazelcastInstance hz1=instances[0];
  HazelcastInstance hz2=instances[1];
  HazelcastInstance hz3=instances[2];
  final InternalPartitionService partitionService=getNode(hz1).getPartitionService();
  final int initialPartitionStateVersion=partitionService.getPartitionStateVersion();
  final ClusterServiceImpl cluster=getNode(hz2).getClusterService();
  final ClusterState newState=ClusterState.PASSIVE;
  final Future future=spawn(new Runnable(){
    public void run(){
      try {
        cluster.changeClusterState(newState,initialPartitionStateVersion);
      }
 catch (      Exception ignored) {
      }
    }
  }
);
  partitionService.firstArrangement();
  future.get(2,TimeUnit.MINUTES);
  final ClusterState currentState=cluster.getClusterState();
  if (currentState == newState) {
    assertEquals(initialPartitionStateVersion,partitionService.getPartitionStateVersion());
  }
 else {
    assertEquals(ClusterState.ACTIVE,currentState);
    final InternalPartition partition=partitionService.getPartition(0,false);
    if (partition.getOwnerOrNull() == null) {
      assertEquals(initialPartitionStateVersion,partitionService.getPartitionStateVersion());
    }
 else {
      final int partitionStateVersion=partitionService.getPartitionStateVersion();
      assertTrue("Version should be positive: " + partitionService,partitionStateVersion > 0);
    }
  }
}
