{
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  final HazelcastInstance[] instances=factory.newInstances();
  final HazelcastInstance hz=instances[2];
  TransactionManagerServiceImpl transactionManagerService=spyTransactionManagerService(hz);
  final Address address=getAddress(instances[0]);
  TransactionOptions options=TransactionOptions.getDefault().setDurability(0);
  when(transactionManagerService.newAllowedDuringPassiveStateTransaction(options)).thenAnswer(new TransactionAnswer(){
    @Override protected void beforePrepare(){
      terminateInstance(instances[0]);
    }
  }
);
  try {
    hz.getCluster().changeClusterState(ClusterState.FROZEN,options);
    fail("A member is terminated. Cannot commit the transaction!");
  }
 catch (  TargetNotMemberException ignored) {
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertClusterState(ClusterState.ACTIVE,instances[2],instances[1]);
    }
  }
);
  instances[0]=factory.newHazelcastInstance(address);
  assertClusterSizeEventually(3,instances[0]);
  assertClusterSizeEventually(3,instances[1]);
  assertClusterSizeEventually(3,instances[2]);
  assertClusterState(ClusterState.ACTIVE,instances);
}
