{
synchronized (lifecycleLock) {
    fireLifecycleEvent(RESTARTING);
    paused.set(true);
    List<Record> lsOwnedRecords=new ArrayList<Record>();
    for (    CMap cmap : node.concurrentMapManager.getCMaps().values()) {
      if (cmap.isUserMap()) {
        lsOwnedRecords.addAll(cmap.getMapIndexService().getOwnedRecords());
      }
    }
    node.clientService.restart();
    node.connectionManager.onRestart();
    node.clusterManager.onRestart();
    node.concurrentMapManager.onRestart();
    node.rejoin();
    final CountDownLatch latch=new CountDownLatch(lsOwnedRecords.size());
    final ParallelExecutor executor=node.executorManager.newParallelExecutor(16);
    for (    final Record ownedRecord : lsOwnedRecords) {
      executor.execute(new Runnable(){
        public void run(){
          try {
            ConcurrentMapManager.MPut mput=node.concurrentMapManager.new MPut();
            mput.merge(ownedRecord);
            latch.countDown();
          }
 catch (          Exception e) {
            logger.log(Level.WARNING,e.getMessage(),e);
          }
        }
      }
);
    }
    try {
      latch.await(60,TimeUnit.SECONDS);
    }
 catch (    InterruptedException ignored) {
    }
    paused.set(false);
    fireLifecycleEvent(RESTARTED);
  }
}
