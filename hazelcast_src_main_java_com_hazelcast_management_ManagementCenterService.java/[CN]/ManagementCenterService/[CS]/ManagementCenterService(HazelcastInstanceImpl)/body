{
  this.instance=instance;
  logger=this.instance.node.getLogger(ManagementCenterService.class.getName());
  managementCenterConfig=this.instance.node.config.getManagementCenterConfig();
  if (managementCenterConfig == null) {
    throw new IllegalStateException("ManagementCenterConfig should not be null!");
  }
  this.securityToken=managementCenterConfig.getSecurityToken();
  String projectId=managementCenterConfig.getProjectId();
  if (managementCenterConfig.isEnabled() && managementCenterConfig.getUrl() == null) {
    managementCenterConfig.setUrl(HOSTED_MANCENTER_URL);
    if (managementCenterConfig.getSecurityToken() == null) {
      if (DISPLAYED_HOSTED_MANAGEMENT_CENTER_INFO.compareAndSet(false,true)) {
        logger.info("======================================================");
        logger.info("Manage your Hazelcast cluster with the Management Center SaaS Application");
        logger.info(HOSTED_MANCENTER_URL + "/register.jsp");
        logger.info("======================================================");
      }
    }
 else {
      if (projectId == null) {
        IAtomicReference<String> clusterIdAtomicLong=instance.getAtomicReference("___projectIdGenerator");
        String id=clusterIdAtomicLong.get();
        if (id == null) {
          id="" + Math.abs(new Random().nextLong());
          if (!clusterIdAtomicLong.compareAndSet(null,id)) {
            id=clusterIdAtomicLong.get();
          }
        }
        projectId="" + id;
      }
      logger.info("======================================================");
      logger.info("You can access your Hazelcast instance at:");
      logger.info(managementCenterConfig.getUrl() + "/start.do?projectid=" + projectId+ "&securitytoken="+ securityToken);
      logger.info("======================================================");
    }
  }
  this.projectId=projectId;
  this.instance.getLifecycleService().addLifecycleListener(this);
  this.instance.getCluster().addMembershipListener(this);
  maxVisibleInstanceCount=this.instance.node.groupProperties.MC_MAX_INSTANCE_COUNT.getInteger();
  commandHandler=new ConsoleCommandHandler(this.instance);
  String tmpWebServerUrl=managementCenterConfig.getUrl();
  webServerUrl=tmpWebServerUrl != null ? (!tmpWebServerUrl.endsWith("/") ? tmpWebServerUrl + '/' : tmpWebServerUrl) : null;
  updateIntervalMs=(managementCenterConfig.getUpdateInterval() > 0) ? managementCenterConfig.getUpdateInterval() * 1000 : 5000;
  taskPoller=new TaskPoller();
  stateSender=new StateSender();
  serializationService=instance.node.getSerializationService();
  final Address address=instance.node.address;
  identifier=new ManagementCenterIdentifier(instance.node.getBuildInfo().getVersion(),instance.getConfig().getGroupConfig().getName(),address.getHost() + ":" + address.getPort());
}
