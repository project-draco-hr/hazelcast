{
  if (webServerUrl == null) {
    logger.warning("Web server url is null!");
    return;
  }
  try {
    Random rand=new Random();
    Address address=((MemberImpl)instance.node.getClusterService().getLocalMember()).getAddress();
    GroupConfig groupConfig=instance.getConfig().getGroupConfig();
    while (running.get()) {
      if (versionMismatch) {
        Thread.sleep(1000 * 60);
        versionMismatch=false;
      }
      try {
        URL url=new URL(webServerUrl + "getTask.do?member=" + address.getHost()+ ":"+ address.getPort()+ "&cluster="+ groupConfig.getName());
        HttpURLConnection connection=(HttpURLConnection)url.openConnection();
        connection.setRequestProperty("Connection","keep-alive");
        InputStream inputStream=connection.getInputStream();
        ObjectDataInputStream input=serializationService.createObjectDataInputStream(inputStream);
        final int taskId=input.readInt();
        if (taskId > 0) {
          final int requestType=input.readInt();
          final ConsoleRequest request=consoleRequests.get(requestType).newInstance();
          if (request == null) {
            throw new RuntimeException("Failed to find a request for requestType:" + requestType);
          }
          request.readData(input);
          sendResponse(taskId,request);
        }
      }
 catch (      Exception e) {
        logger.finest(e);
      }
      Thread.sleep(700 + rand.nextInt(300));
    }
  }
 catch (  Throwable throwable) {
    if (throwable instanceof OutOfMemoryError) {
      OutOfMemoryErrorDispatcher.onOutOfMemory((OutOfMemoryError)throwable);
    }
    logger.finest("Problem on management center while polling task.",throwable);
  }
}
