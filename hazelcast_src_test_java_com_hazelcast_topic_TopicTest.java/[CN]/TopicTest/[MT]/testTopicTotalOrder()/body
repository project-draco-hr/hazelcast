{
  final Config config=new Config();
  config.getTopicConfig("default").setGlobalOrderingEnabled(true);
  final int k=4;
  final Map<Long,String> stringMap=new HashMap<Long,String>();
  final CountDownLatch countDownLatch=new CountDownLatch(k);
  final CountDownLatch mainLatch=new CountDownLatch(k);
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k);
  final HazelcastInstance[] instances=factory.newInstances(config);
  Assert.assertEquals(true,instances[0].getConfig().getTopicConfig("default").isGlobalOrderingEnabled());
  for (int i=0; i < k; i++) {
    final HazelcastInstance hazelcastInstance=instances[i];
    new Thread(new Runnable(){
      public void run(){
        ITopic<Long> topic=hazelcastInstance.getTopic("first");
        final long threadId=Thread.currentThread().getId();
        topic.addMessageListener(new MessageListener<Long>(){
          public void onMessage(          Message<Long> message){
            String str=stringMap.get(threadId) + message.getMessageObject().toString();
            stringMap.put(threadId,str);
          }
        }
);
        countDownLatch.countDown();
        try {
          countDownLatch.await();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        for (int j=0; j < 20; j++) {
          if (threadId % 2 == 0)           topic.publish((long)j);
 else           topic.publish(Long.valueOf(-1));
        }
        mainLatch.countDown();
      }
    }
,String.valueOf(i)).start();
  }
  mainLatch.await();
  Thread.sleep(500);
  String ref=stringMap.values().iterator().next();
  for (  String s : stringMap.values()) {
    if (!ref.equals(s)) {
      assertFalse("no total order",true);
      return;
    }
  }
  assertTrue("total order",true);
}
