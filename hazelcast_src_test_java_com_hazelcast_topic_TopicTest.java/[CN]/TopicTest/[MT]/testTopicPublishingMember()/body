{
  final Config config=new Config();
  config.getTopicConfig("default").setGlobalOrderingEnabled(true);
  final int k=3;
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k);
  final HazelcastInstance[] instances=factory.newInstances(config);
  final CountDownLatch mainLatch=new CountDownLatch(k);
  final AtomicInteger count=new AtomicInteger(0);
  final AtomicInteger count1=new AtomicInteger(0);
  final AtomicInteger count2=new AtomicInteger(0);
  final String name="testTopicPublishingMember";
  for (int i=0; i < k; i++) {
    final HazelcastInstance instance=instances[i];
    new Thread(new Runnable(){
      public void run(){
        ITopic<Long> topic=instance.getTopic(name);
        topic.addMessageListener(new MessageListener<Long>(){
          public void onMessage(          Message<Long> message){
            if (message.getPublishingMember().equals(instance.getCluster().getLocalMember()))             count.incrementAndGet();
            if (message.getPublishingMember().equals(message.getMessageObject()))             count1.incrementAndGet();
            if (message.getPublishingMember().localMember())             count2.incrementAndGet();
          }
        }
);
        mainLatch.countDown();
      }
    }
).start();
  }
  try {
    mainLatch.await(1,TimeUnit.MINUTES);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  for (int i=0; i < k; i++) {
    final HazelcastInstance instance=instances[i];
    instance.getTopic(name).publish(instance.getCluster().getLocalMember());
  }
  try {
    Thread.sleep(3000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  Assert.assertEquals(k,count.get());
  Assert.assertEquals(k * k,count1.get());
  Assert.assertEquals(k,count2.get());
}
