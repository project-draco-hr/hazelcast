{
  final int nodeCount=3;
  final String randomName="testTopicPublishingMember" + generateRandomString(5);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(nodeCount);
  HazelcastInstance[] instances=factory.newInstances();
  final CountDownLatch mainLatch=new CountDownLatch(nodeCount);
  final AtomicInteger count1=new AtomicInteger(0);
  final AtomicInteger count2=new AtomicInteger(0);
  final AtomicInteger count3=new AtomicInteger(0);
  for (int i=0; i < nodeCount; i++) {
    final HazelcastInstance instance=instances[i];
    new Thread(new Runnable(){
      public void run(){
        ITopic<Long> topic=instance.getTopic(randomName);
        topic.addMessageListener(new MessageListener<Long>(){
          public void onMessage(          Message<Long> message){
            Member publishingMember=message.getPublishingMember();
            if (publishingMember.equals(instance.getCluster().getLocalMember()))             count1.incrementAndGet();
            if (publishingMember.equals(message.getMessageObject()))             count2.incrementAndGet();
            if (publishingMember.localMember())             count3.incrementAndGet();
          }
        }
);
        mainLatch.countDown();
      }
    }
).start();
  }
  try {
    mainLatch.await(1,TimeUnit.MINUTES);
  }
 catch (  InterruptedException e) {
    fail();
  }
  for (int i=0; i < nodeCount; i++) {
    HazelcastInstance instance=instances[i];
    instance.getTopic(randomName).publish(instance.getCluster().getLocalMember());
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run(){
      assertEquals(nodeCount,count1.get());
      assertEquals(nodeCount * nodeCount,count2.get());
      assertEquals(nodeCount,count3.get());
    }
  }
);
}
