{
  this.nodeEngine=nodeEngine;
  this.serializationService=nodeEngine.getSerializationService();
  this.logger=nodeEngine.getLogger(EventService.class.getName());
  final Node node=nodeEngine.getNode();
  GroupProperties groupProperties=node.getGroupProperties();
  this.eventThreadCount=groupProperties.getInteger(GroupProperty.EVENT_THREAD_COUNT);
  this.eventQueueCapacity=groupProperties.getInteger(GroupProperty.EVENT_QUEUE_CAPACITY);
  this.eventQueueTimeoutMs=groupProperties.getMillis(GroupProperty.EVENT_QUEUE_TIMEOUT_MILLIS);
  HazelcastThreadGroup threadGroup=node.getHazelcastThreadGroup();
  this.eventExecutor=new StripedExecutor(node.getLogger(EventServiceImpl.class),threadGroup.getThreadNamePrefix("event"),threadGroup.getInternalThreadGroup(),eventThreadCount,eventQueueCapacity);
  this.registrationExceptionHandler=new FutureUtilExceptionHandler(logger,"Member left while registering listener...");
  this.deregistrationExceptionHandler=new FutureUtilExceptionHandler(logger,"Member left while de-registering listener...");
  this.segments=new ConcurrentHashMap<String,EventServiceSegment>();
  nodeEngine.getMetricsRegistry().scanAndRegister(this,"event");
}
