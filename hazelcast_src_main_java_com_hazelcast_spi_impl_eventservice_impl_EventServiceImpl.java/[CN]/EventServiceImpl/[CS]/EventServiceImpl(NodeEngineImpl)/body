{
  this.nodeEngine=nodeEngine;
  this.serializationService=(InternalSerializationService)nodeEngine.getSerializationService();
  this.logger=nodeEngine.getLogger(EventService.class.getName());
  HazelcastProperties hazelcastProperties=nodeEngine.getProperties();
  this.eventThreadCount=hazelcastProperties.getInteger(GroupProperty.EVENT_THREAD_COUNT);
  this.eventQueueCapacity=hazelcastProperties.getInteger(GroupProperty.EVENT_QUEUE_CAPACITY);
  this.eventQueueTimeoutMs=hazelcastProperties.getMillis(GroupProperty.EVENT_QUEUE_TIMEOUT_MILLIS);
  int eventSyncFrequency;
  try {
    eventSyncFrequency=Integer.parseInt(System.getProperty(EVENT_SYNC_FREQUENCY_PROP));
    if (eventSyncFrequency <= 0) {
      eventSyncFrequency=EVENT_SYNC_FREQUENCY;
    }
  }
 catch (  Exception e) {
    eventSyncFrequency=EVENT_SYNC_FREQUENCY;
  }
  this.eventSyncFrequency=eventSyncFrequency;
  HazelcastThreadGroup threadGroup=nodeEngine.getNode().getHazelcastThreadGroup();
  this.eventExecutor=new StripedExecutor(nodeEngine.getNode().getLogger(EventServiceImpl.class),threadGroup.getThreadNamePrefix("event"),threadGroup.getInternalThreadGroup(),eventThreadCount,eventQueueCapacity);
  this.registrationExceptionHandler=new FutureUtilExceptionHandler(logger,"Member left while registering listener...");
  this.deregistrationExceptionHandler=new FutureUtilExceptionHandler(logger,"Member left while de-registering listener...");
  this.segments=new ConcurrentHashMap<String,EventServiceSegment>();
}
