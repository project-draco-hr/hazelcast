{
  Map<Address,ArrayList<Integer>> memberPartitions=getMemberPartitions();
  List<Future> responses=new ArrayList<Future>(memberPartitions.size());
  Data data=toData(op);
  for (  Map.Entry<Address,ArrayList<Integer>> mp : memberPartitions.entrySet()) {
    Address target=mp.getKey();
    Invocation inv=createSingleInvocation(serviceName,new PartitionIterator(mp.getValue(),data),EXECUTOR_THREAD_ID).setTarget(target).setTryCount(100).setTryPauseMillis(500).build();
    Future future=inv.invoke();
    responses.add(future);
  }
  Map<Integer,Object> partitionResults=new HashMap<Integer,Object>(partitionCount);
  for (  Future r : responses) {
    Object result=r.get();
    Map<Integer,Object> partialResult=null;
    if (result instanceof Data) {
      partialResult=(Map<Integer,Object>)toObject(result);
    }
 else {
      partialResult=(Map<Integer,Object>)result;
    }
    partitionResults.putAll(partialResult);
  }
  List<Integer> failedPartitions=new ArrayList<Integer>(0);
  for (  Map.Entry<Integer,Object> partitionResult : partitionResults.entrySet()) {
    int partitionId=partitionResult.getKey();
    Object result=partitionResult.getValue();
    if (result instanceof Exception) {
      failedPartitions.add(partitionId);
    }
  }
  Thread.sleep(500);
  for (  Integer failedPartition : failedPartitions) {
    Invocation inv=createSingleInvocation(serviceName,op,failedPartition).build();
    inv.invoke();
    partitionResults.put(failedPartition,inv);
  }
  for (  Integer failedPartition : failedPartitions) {
    Future f=(Future)partitionResults.get(failedPartition);
    Object result=f.get();
    partitionResults.put(failedPartition,result);
  }
  return partitionResults;
}
