{
  final Map<Address,ArrayList<Integer>> memberPartitions=getMemberPartitions();
  final Map<Address,Future> responses=new HashMap<Address,Future>(memberPartitions.size());
  final Data operationData=toData(op);
  for (  Entry<Address,ArrayList<Integer>> mp : memberPartitions.entrySet()) {
    Address target=mp.getKey();
    Invocation inv=createSingleInvocation(serviceName,new PartitionIterator(mp.getValue(),operationData),EXECUTOR_THREAD_ID).setTarget(target).setTryCount(5).setTryPauseMillis(300).build();
    Future future=inv.invoke();
    responses.put(target,future);
  }
  final Map<Integer,Object> partitionResults=new HashMap<Integer,Object>(partitionCount);
  for (  Entry<Address,Future> response : responses.entrySet()) {
    try {
      Object result=response.getValue().get();
      partitionResults.putAll((Map<Integer,Object>)toObject(result));
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,t.getMessage(),t);
      List<Integer> partitions=memberPartitions.get(response.getKey());
      for (      Integer partition : partitions) {
        partitionResults.put(partition,t);
      }
    }
  }
  final List<Integer> failedPartitions=new LinkedList<Integer>();
  for (  Map.Entry<Integer,Object> partitionResult : partitionResults.entrySet()) {
    int partitionId=partitionResult.getKey();
    Object result=partitionResult.getValue();
    if (result instanceof Exception) {
      failedPartitions.add(partitionId);
    }
  }
  for (  Integer failedPartition : failedPartitions) {
    Invocation inv=createSingleInvocation(serviceName,new OperationWrapper(operationData),failedPartition).build();
    Future f=inv.invoke();
    partitionResults.put(failedPartition,f);
  }
  for (  Integer failedPartition : failedPartitions) {
    Future f=(Future)partitionResults.get(failedPartition);
    Object result=f.get();
    partitionResults.put(failedPartition,result);
  }
  return partitionResults;
}
