{
  final ThreadContext threadContext=ThreadContext.get();
  final Object parentOperation=threadContext.getCurrentOperation();
  threadContext.setCurrentOperation(op);
  ResponseHandler responseHandler=op.getResponseHandler();
  if (op instanceof KeyBasedOperation) {
    System.out.println("Process Under lock " + op);
  }
  try {
    op.beforeRun();
    if (op instanceof WaitSupport) {
      WaitSupport so=(WaitSupport)op;
      System.out.println(op + " should wait " + so.shouldWait());
      if (so.shouldWait()) {
        waitNotifyService.wait(so);
        return;
      }
    }
    op.run();
    if (op instanceof BackupAwareOperation) {
      final Collection<Future> sync=new LinkedList<Future>();
      final Collection<Future> async=new LinkedList<Future>();
      final Object response=sendBackups(op,sync,async);
      waitResponses(sync);
      if (responseHandler != null && op.returnsResponse()) {
        responseHandler.sendResponse(response);
      }
      waitResponses(async);
    }
 else {
      if (responseHandler != null && op.returnsResponse()) {
        responseHandler.sendResponse(op.getResponse());
      }
    }
    op.afterRun();
    if (op instanceof Notifier) {
      waitNotifyService.notify((Notifier)op);
    }
  }
 catch (  Exception e) {
    if (e instanceof RetryableException) {
      logger.log(Level.WARNING,"While executing op: " + op + " -> "+ e.getClass()+ ": "+ e.getMessage());
      logger.log(Level.FINEST,e.getMessage(),e);
    }
 else {
      logger.log(Level.SEVERE,"While executing op: " + op + " -> "+ e.getMessage(),e);
    }
    if (responseHandler != null && op.returnsResponse()) {
      responseHandler.sendResponse(e);
    }
  }
 finally {
    threadContext.setCurrentOperation(parentOperation);
  }
}
