{
  final ThreadContext threadContext=ThreadContext.get();
  threadContext.setCurrentOperation(op);
  Lock partitionLock=null;
  Lock keyLock=null;
  try {
    final int partitionId=op.getPartitionId();
    if (op instanceof PartitionAwareOperation) {
      if (partitionId < 0) {
        throw new IllegalArgumentException();
      }
      if (!isMigrationOperation(op) && node.partitionService.isPartitionMigrating(partitionId)) {
        throw new PartitionMigratingException(getThisAddress(),partitionId,op.getClass().getName(),op.getServiceName());
      }
      PartitionInfo partitionInfo=getPartitionInfo(partitionId);
      if (op instanceof PartitionLevelOperation) {
        partitionLock=partitionInfo.getWriteLock();
        partitionLock.lock();
      }
 else {
        partitionLock=partitionInfo.getReadLock();
        if (!partitionLock.tryLock()) {
          partitionLock=null;
          throw new PartitionMigratingException(getThisAddress(),partitionId,op.getClass().getName(),op.getServiceName());
        }
        final Address owner=partitionInfo.getReplicaAddress(op.getReplicaIndex());
        final boolean validatesTarget=op.validatesTarget();
        if (validatesTarget && !getThisAddress().equals(owner)) {
          throw new WrongTargetException(getThisAddress(),owner,partitionId,op.getClass().getName(),op.getServiceName());
        }
        if (!(op instanceof BackupOperation) && op instanceof KeyBasedOperation) {
          final int hash=((KeyBasedOperation)op).getKeyHash();
          keyLock=locks[Math.abs(hash) % locks.length];
          keyLock.lock();
        }
      }
    }
    runOperationUnderExistingLock(op);
  }
 catch (  Throwable e) {
    handleOperationError(op,e);
  }
 finally {
    if (keyLock != null) {
      keyLock.unlock();
    }
    if (partitionLock != null) {
      partitionLock.unlock();
    }
    threadContext.setCurrentOperation(null);
  }
}
