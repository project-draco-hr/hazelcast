{
  final Node node=factory.node;
  memberState.setAddress(((MemberImpl)node.getClusterImpl().getLocalMember()).getAddress());
  memberState.getMemberHealthStats().setOutOfMemory(node.isOutOfMemory());
  memberState.getMemberHealthStats().setActive(node.isActive());
  memberState.getMemberHealthStats().setServiceThreadStats(node.getCpuUtilization().serviceThread);
  memberState.getMemberHealthStats().setOutThreadStats(node.getCpuUtilization().outThread);
  memberState.getMemberHealthStats().setInThreadStats(node.getCpuUtilization().inThread);
  PartitionService partitionService=factory.getPartitionService();
  Set<Partition> partitions=partitionService.getPartitions();
  memberState.clearPartitions();
  for (  Partition partition : partitions) {
    if (partition.getOwner() != null && partition.getOwner().localMember()) {
      memberState.addPartition(partition.getPartitionId());
    }
  }
  Collection<HazelcastInstanceAwareInstance> proxyObjects=new ArrayList<HazelcastInstanceAwareInstance>(factory.getProxies());
  createMemState(memberState,proxyObjects.iterator(),Instance.InstanceType.MAP);
  createMemState(memberState,proxyObjects.iterator(),Instance.InstanceType.QUEUE);
  createMemState(memberState,proxyObjects.iterator(),Instance.InstanceType.TOPIC);
}
