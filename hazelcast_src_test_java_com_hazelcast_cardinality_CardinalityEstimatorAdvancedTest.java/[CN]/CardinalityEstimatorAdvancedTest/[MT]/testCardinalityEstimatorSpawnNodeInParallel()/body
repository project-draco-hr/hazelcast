{
  int total=6;
  int parallel=2;
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(total + 1);
  HazelcastInstance instance=nodeFactory.newHazelcastInstance();
  final String name="testSpawnNodeInParallel";
  CardinalityEstimator estimator=instance.getCardinalityEstimator(name);
  estimator.add(1L);
  final ExecutorService ex=Executors.newFixedThreadPool(parallel);
  try {
    for (int i=0; i < total / parallel; i++) {
      final HazelcastInstance[] instances=new HazelcastInstance[parallel];
      final CountDownLatch countDownLatch=new CountDownLatch(parallel);
      final AtomicInteger counter=new AtomicInteger(0);
      final AtomicInteger exceptionCount=new AtomicInteger(0);
      for (int j=0; j < parallel; j++) {
        final int id=j;
        ex.execute(new Runnable(){
          public void run(){
            try {
              counter.incrementAndGet();
              instances[id]=nodeFactory.newHazelcastInstance();
              instances[id].getCardinalityEstimator(name).add(String.valueOf(counter.get()));
            }
 catch (            Exception e) {
              exceptionCount.incrementAndGet();
              e.printStackTrace();
            }
 finally {
              countDownLatch.countDown();
            }
          }
        }
);
      }
      assertOpenEventually(countDownLatch);
      final int thrownExceptionCount=exceptionCount.get();
      final long expectedValue=(long)counter.get() - thrownExceptionCount;
      CardinalityEstimator newEstimator=instance.getCardinalityEstimator(name);
      assertEquals(expectedValue,newEstimator.estimate());
      instance.shutdown();
      instance=instances[0];
    }
  }
  finally {
    ex.shutdownNow();
  }
}
