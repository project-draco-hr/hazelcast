{
  if (!node.isMaster() || !node.isActive()) {
    return;
  }
  if (!initialized) {
    lock.lock();
    try {
      if (initialized) {
        return;
      }
      PartitionStateGenerator psg=partitionStateGenerator;
      final Set<Member> members=node.getClusterService().getMembers();
      Collection<MemberGroup> memberGroups=memberGroupFactory.createMemberGroups(members);
      if (memberGroups.isEmpty()) {
        logger.warning("No member group is available to assign partition ownership...");
        return;
      }
      logger.info("Initializing cluster partition table first arrangement...");
      Address[][] newState=psg.initialize(memberGroups,partitionCount);
      if (newState.length != partitionCount) {
        throw new HazelcastException("Invalid partition count! " + "Expected: " + partitionCount + ", Actual: "+ newState.length);
      }
      for (int partitionId=0; partitionId < partitionCount; partitionId++) {
        InternalPartitionImpl partition=partitions[partitionId];
        Address[] replicas=newState[partitionId];
        partition.setPartitionInfo(replicas);
      }
      initialized=true;
      publishPartitionRuntimeState();
    }
  finally {
      lock.unlock();
    }
  }
}
