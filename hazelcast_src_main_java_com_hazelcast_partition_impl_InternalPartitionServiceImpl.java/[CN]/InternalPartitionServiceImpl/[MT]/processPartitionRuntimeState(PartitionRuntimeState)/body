{
  lock.lock();
  try {
    if (!node.isActive() || !node.joined()) {
      if (logger.isFinestEnabled()) {
        logger.finest("Node should be active(" + node.isActive() + ") and joined("+ node.joined()+ ") to be able to process partition table!");
      }
      return;
    }
    final Address sender=partitionState.getEndpoint();
    final Address master=node.getMasterAddress();
    if (node.isMaster()) {
      logger.warning("This is the master node and received a PartitionRuntimeState from " + sender + ". Ignoring incoming state! ");
      return;
    }
 else {
      if (sender == null || !sender.equals(master)) {
        if (node.clusterService.getMember(sender) == null) {
          logger.severe("Received a ClusterRuntimeState from an unknown member!" + " => Sender: " + sender + ", Master: "+ master+ "! ");
          return;
        }
 else {
          logger.warning("Received a ClusterRuntimeState, but its sender doesn't seem to be master!" + " => Sender: " + sender + ", Master: "+ master+ "! "+ "(Ignore if master node has changed recently.)");
        }
      }
    }
    final Set<Address> unknownAddresses=new HashSet<Address>();
    PartitionInfo[] state=partitionState.getPartitions();
    for (int partitionId=0; partitionId < state.length; partitionId++) {
      PartitionInfo partitionInfo=state[partitionId];
      InternalPartitionImpl currentPartition=partitions[partitionId];
      for (int index=0; index < InternalPartition.MAX_REPLICA_COUNT; index++) {
        Address address=partitionInfo.getReplicaAddress(index);
        if (address != null && getMember(address) == null) {
          if (logger.isFinestEnabled()) {
            logger.finest("Unknown " + address + " found in partition table sent from master "+ sender+ ". It has probably already left the cluster. Partition: "+ partitionId);
          }
          unknownAddresses.add(address);
        }
      }
      currentPartition.setOwner(partitionInfo.getReplicaAddress(0));
    }
    if (!unknownAddresses.isEmpty() && logger.isLoggable(Level.WARNING)) {
      StringBuilder s=new StringBuilder("Following unknown addresses are found in partition table").append(" sent from master[").append(sender).append("].").append(" (Probably they have recently joined or left the cluster.)").append(" {");
      for (      Address address : unknownAddresses) {
        s.append("\n\t").append(address);
      }
      s.append("\n}");
      logger.warning(s.toString());
    }
    stateVersion.set(partitionState.getVersion());
    initialized=true;
    Collection<MigrationInfo> completedMigrations=partitionState.getCompletedMigrations();
    for (    MigrationInfo completedMigration : completedMigrations) {
      addCompletedMigration(completedMigration);
      finalizeActiveMigration(completedMigration);
    }
    if (!activeMigrations.isEmpty()) {
      final MemberImpl masterMember=getMasterMember();
      rollbackActiveMigrationsFromPreviousMaster(masterMember.getUuid());
    }
    for (int partitionId=0; partitionId < partitionCount; partitionId++) {
      InternalPartitionImpl partition=partitions[partitionId];
      Address[] replicas=state[partitionId].getReplicaAddresses();
      partition.setPartitionInfo(replicas);
    }
  }
  finally {
    lock.unlock();
  }
}
