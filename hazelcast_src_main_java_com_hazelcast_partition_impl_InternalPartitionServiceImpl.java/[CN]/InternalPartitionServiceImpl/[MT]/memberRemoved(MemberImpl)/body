{
  updateMemberGroupsSize();
  final Address deadAddress=member.getAddress();
  final Address thisAddress=node.getThisAddress();
  if (deadAddress == null || deadAddress.equals(thisAddress)) {
    return;
  }
  lock.lock();
  try {
    migrationQueue.clear();
    if (!activeMigrations.isEmpty()) {
      if (node.isMaster()) {
        rollbackActiveMigrationsFromPreviousMaster(node.getLocalMember().getUuid());
      }
      for (      MigrationInfo migrationInfo : activeMigrations.values()) {
        if (deadAddress.equals(migrationInfo.getSource()) || deadAddress.equals(migrationInfo.getDestination())) {
          migrationInfo.invalidate();
        }
      }
    }
    pauseMigration();
    promoteFromBackups(deadAddress,thisAddress);
    if (node.isMaster() && initialized) {
      migrationQueue.add(new RepartitioningTask());
    }
    resumeMigrationEventually();
  }
  finally {
    lock.unlock();
  }
}
