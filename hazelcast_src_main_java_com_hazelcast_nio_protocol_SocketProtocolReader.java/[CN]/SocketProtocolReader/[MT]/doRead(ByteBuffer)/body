{
  try {
    while (firstNewLineRead.hasRemaining()) {
      firstNewLineRead.put(bb.get());
    }
    readLine(bb,commandLineRead,commandLine);
    if (commandLineRead.get()) {
      parseCommandLine(SocketTextReader.toStringAndClear(commandLine));
      if (commandLineIsParsed && bufferSize.length > 0) {
        readLine(bb,sizeLineRead,sizeLine);
      }
 else       if (commandLineIsParsed) {
        sizeLineRead.set(true);
      }
      if (commandLineIsParsed && bufferSize.length == 0 || sizeLineRead.get()) {
        parseSizeLine(SocketTextReader.toStringAndClear(sizeLine));
        for (int i=0; bb.hasRemaining() && i < buffers.length; i++) {
          if (buffers[i].hasRemaining()) {
            copy(bb,buffers[i]);
          }
          if (i == buffers.length - 1) {
            if (endOfTheCommand.hasRemaining())             copy(bb,endOfTheCommand);
          }
        }
        if ((buffers.length == 0 || !buffers[buffers.length - 1].hasRemaining())) {
          if (args.length <= 0)           throw new RuntimeException("No argument to the command, at least flag should be provided!");
          Protocol protocol=new Protocol(connection,command,flag,noreply,args,buffers);
          connection.setType(Connection.Type.PROTOCOL_CLIENT);
          ioService.handleClientCommand(protocol);
          reset();
        }
      }
    }
  }
 catch (  Exception e) {
    connection.getWriteHandler().enqueueSocketWritable(new Protocol(connection,Command.ERROR.value,new String[]{flag,"Malformed_request",e.toString()}));
    logger.log(Level.SEVERE,e.toString(),e);
  }
}
