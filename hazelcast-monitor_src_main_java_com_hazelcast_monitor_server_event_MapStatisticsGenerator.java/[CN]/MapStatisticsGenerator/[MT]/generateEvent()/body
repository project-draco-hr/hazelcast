{
  ExecutorService esService=client.getExecutorService();
  Set<Member> members=client.getCluster().getMembers();
  final List<Member> lsMembers=new ArrayList<Member>(members);
  MultiTask<DistributedMapStatsCallable.MemberMapStat> task=new MultiTask<DistributedMapStatsCallable.MemberMapStat>(new DistributedMapStatsCallable(mapName),members);
  esService.execute(task);
  Collection<DistributedMapStatsCallable.MemberMapStat> mapStats;
  try {
    mapStats=task.get();
  }
 catch (  InterruptedException e) {
    return null;
  }
catch (  ExecutionException e) {
    return null;
  }
  if (mapStats == null) {
    return null;
  }
  List<DistributedMapStatsCallable.MemberMapStat> lsMapStats=new ArrayList(mapStats);
  Collections.sort(lsMapStats,new Comparator<DistributedMapStatsCallable.MemberMapStat>(){
    public int compare(    DistributedMapStatsCallable.MemberMapStat o1,    DistributedMapStatsCallable.MemberMapStat o2){
      int i1=lsMembers.indexOf(o1.getMember());
      int i2=lsMembers.indexOf(o2.getMember());
      return i1 - i2;
    }
  }
);
  List<MapStatistics.LocalMapStatistics> listOfStats=new ArrayList<MapStatistics.LocalMapStatistics>();
  for (  DistributedMapStatsCallable.MemberMapStat memberMapStat : lsMapStats) {
    MapStatistics.LocalMapStatistics stat=new MapStatistics.LocalMapStatistics();
    stat.backupEntryCount=memberMapStat.getLocalMapStats().getBackupEntryCount();
    stat.backupEntryMemoryCost=memberMapStat.getLocalMapStats().getBackupEntryMemoryCost();
    stat.creationTime=memberMapStat.getLocalMapStats().getCreationTime();
    stat.hits=memberMapStat.getLocalMapStats().getHits();
    stat.lastAccessTime=memberMapStat.getLocalMapStats().getLastAccessTime();
    stat.lastUpdateTime=memberMapStat.getLocalMapStats().getLastUpdateTime();
    stat.lockedEntryCount=memberMapStat.getLocalMapStats().getLockedEntryCount();
    stat.lockWaitCount=memberMapStat.getLocalMapStats().getLockWaitCount();
    stat.markedAsRemovedEntryCount=memberMapStat.getLocalMapStats().getMarkedAsRemovedEntryCount();
    stat.markedAsRemovedMemoryCost=memberMapStat.getLocalMapStats().getMarkedAsRemovedMemoryCost();
    stat.ownedEntryCount=memberMapStat.getLocalMapStats().getOwnedEntryCount();
    stat.ownedEntryMemoryCost=memberMapStat.getLocalMapStats().getOwnedEntryMemoryCost();
    stat.lastEvictionTime=memberMapStat.getLocalMapStats().getLastEvictionTime();
    stat.memberName=memberMapStat.getMember().getInetSocketAddress().getHostName() + ":" + memberMapStat.getMember().getInetSocketAddress().getPort();
    MapOperationStats mapOpStats=memberMapStat.getLocalMapStats().getOperationStats();
    stat.periodStart=mapOpStats.getPeriodStart();
    stat.periodEnd=mapOpStats.getPeriodEnd();
    long periodInSec=(stat.periodEnd - stat.periodStart) / 1000;
    if (periodInSec != 0) {
      stat.numberOfPutsInSec=mapOpStats.getNumberOfPuts() / periodInSec;
      stat.numberOfGetsInSec=mapOpStats.getNumberOfGets() / periodInSec;
      stat.numberOfRemovesInSec=mapOpStats.getNumberOfRemoves() / periodInSec;
      stat.numberOfOthersInSec=mapOpStats.getNumberOfOtherOperations() / periodInSec;
    }
    listOfStats.add(stat);
  }
  MapStatistics event=new MapStatistics(clusterId);
  event.setSize(map.size());
  event.setListOfLocalStats(listOfStats);
  if (!list.isEmpty() && list.get(list.size() - 1).equals(event)) {
    list.remove(list.size() - 1);
  }
  list.add(event);
  while (list.size() > 100) {
    list.remove(0);
  }
  return event;
}
