{
  final int partitionSize=recordStore.size();
  if (partitionSize < 1) {
    return EmptyArrays.EMPTY_2D_OBJECT_ARRAY;
  }
  final int evictableSize=getEvictableSize(partitionSize,mapConfig);
  if (evictableSize < 1) {
    return EmptyArrays.EMPTY_2D_OBJECT_ARRAY;
  }
  final MapConfig.EvictionPolicy evictionPolicy=mapConfig.getEvictionPolicy();
  final Map<Data,Record> entries=recordStore.getReadonlyRecordMap();
  final int size=entries.size();
  if (entries.isEmpty()) {
    return EmptyArrays.EMPTY_2D_OBJECT_ARRAY;
  }
  final long[] criterias=new long[size];
  int index=0;
  for (  final Record record : entries.values()) {
    criterias[index]=getEvictionCriteriaValue(record,evictionPolicy);
    index++;
    if (index == size) {
      break;
    }
  }
  if (criterias.length == 0) {
    return EmptyArrays.EMPTY_2D_OBJECT_ARRAY;
  }
  if (index < criterias.length) {
    for (int i=index; i < criterias.length; i++) {
      criterias[i]=Long.MAX_VALUE;
    }
  }
  Arrays.sort(criterias);
  final Object[][] evictableKeyValuePairs=new Object[evictableSize][2];
  int indexKVP=0;
  final int evictableBaseIndex=Math.min(evictableSize,index - 1);
  final long criteriaValue=criterias[evictableBaseIndex];
  for (  final Map.Entry<Data,Record> entry : entries.entrySet()) {
    final Record record=entry.getValue();
    final long value=getEvictionCriteriaValue(record,evictionPolicy);
    if (value <= criteriaValue) {
      evictableKeyValuePairs[indexKVP][0]=record.getKey();
      evictableKeyValuePairs[indexKVP][1]=record.getValue();
      indexKVP++;
    }
    if (indexKVP >= evictableSize) {
      break;
    }
  }
  if (evictableKeyValuePairs.length == 0) {
    return EmptyArrays.EMPTY_2D_OBJECT_ARRAY;
  }
  return evictableKeyValuePairs;
}
