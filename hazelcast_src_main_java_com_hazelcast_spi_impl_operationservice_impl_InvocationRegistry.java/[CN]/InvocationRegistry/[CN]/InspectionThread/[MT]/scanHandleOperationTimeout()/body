{
  if (invocations.isEmpty()) {
    return;
  }
  long now=Clock.currentTimeMillis();
  int backupTimeouts=0;
  int invocationTimeouts=0;
  Iterator<Map.Entry<Long,Invocation>> iterator=invocations.entrySet().iterator();
  while (iterator.hasNext()) {
    if (shutdown) {
      return;
    }
    Map.Entry<Long,Invocation> entry=iterator.next();
    Long callId=entry.getKey();
    Invocation invocation=entry.getValue();
    if (!callIdMatches(callId,invocation) && isInvocationDone(invocation)) {
      iterator.remove();
      continue;
    }
    detectSlowInvocation(now,invocation);
    if (checkInvocationTimeout(invocation)) {
      invocationTimeouts++;
    }
    if (checkBackupTimeout(invocation)) {
      backupTimeouts++;
    }
  }
  log(backupTimeouts,invocationTimeouts);
}
