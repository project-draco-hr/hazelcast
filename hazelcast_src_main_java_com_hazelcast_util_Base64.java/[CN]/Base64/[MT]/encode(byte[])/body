{
  if (binaryData == null) {
    return null;
  }
  int lengthDataBits=binaryData.length * EIGHTBIT;
  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;
  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;
  byte[] encodedData=null;
  if (fewerThan24bits != 0) {
    encodedData=new byte[(numberTriplets + 1) * 4];
  }
 else {
    encodedData=new byte[numberTriplets * 4];
  }
  byte k=0;
  byte l=0;
  byte b1=0;
  byte b2=0;
  byte b3=0;
  int encodedIndex=0;
  int dataIndex=0;
  int i=0;
  if (F_DEBUG) {
    System.out.println("number of triplets = " + numberTriplets);
  }
  for (i=0; i < numberTriplets; i++) {
    dataIndex=i * 3;
    b1=binaryData[dataIndex];
    b2=binaryData[dataIndex + 1];
    b3=binaryData[dataIndex + 2];
    if (F_DEBUG) {
      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);
    }
    l=(byte)(b2 & 0x0f);
    k=(byte)(b1 & 0x03);
    encodedIndex=i * 4;
    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);
    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);
    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);
    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];
    if (F_DEBUG) {
      System.out.println("val2 = " + val2);
      System.out.println("k4   = " + (k << 4));
      System.out.println("vak  = " + (val2 | (k << 4)));
    }
    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];
    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];
    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];
  }
  dataIndex=i * 3;
  encodedIndex=i * 4;
  if (fewerThan24bits == EIGHTBIT) {
    b1=binaryData[dataIndex];
    k=(byte)(b1 & 0x03);
    if (F_DEBUG) {
      System.out.println("b1=" + b1);
      System.out.println("b1<<2 = " + (b1 >> 2));
    }
    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);
    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];
    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];
    encodedData[encodedIndex + 2]=PAD;
    encodedData[encodedIndex + 3]=PAD;
  }
 else   if (fewerThan24bits == SIXTEENBIT) {
    b1=binaryData[dataIndex];
    b2=binaryData[dataIndex + 1];
    l=(byte)(b2 & 0x0f);
    k=(byte)(b1 & 0x03);
    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);
    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);
    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];
    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];
    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];
    encodedData[encodedIndex + 3]=PAD;
  }
  return encodedData;
}
