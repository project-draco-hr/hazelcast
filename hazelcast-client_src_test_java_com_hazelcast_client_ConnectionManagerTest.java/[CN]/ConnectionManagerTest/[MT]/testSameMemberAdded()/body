{
  HazelcastClient client=mock(HazelcastClient.class);
  InetSocketAddress inetSocketAddress=new InetSocketAddress("localhost",5701);
  final Connection connection=mock(Connection.class);
  final CountDownLatch latch=new CountDownLatch(2);
  final List<LifecycleState> lifecycleEvents=new ArrayList<LifecycleState>();
  final LifecycleServiceClientImpl lifecycleService=createLifecycleServiceClientImpl(client,lifecycleEvents);
  ConnectionManager connectionManager=new ConnectionManager(client,lifecycleService,inetSocketAddress){
    protected Connection getNextConnection(){
      latch.countDown();
      return connection;
    }
  }
;
  ClientBinder binder=mock(ClientBinder.class);
  connectionManager.setBinder(binder);
  Cluster cluster=mock(Cluster.class);
  Member member=mock(Member.class);
  when(member.getInetSocketAddress()).thenReturn(inetSocketAddress);
  MembershipEvent membershipEvent=new MembershipEvent(cluster,member,MembershipEvent.MEMBER_ADDED);
  connectionManager.memberAdded(membershipEvent);
  connectionManager.getClusterMembers().contains(inetSocketAddress);
  assertEquals(1,connectionManager.getClusterMembers().size());
  assertArrayEquals(new Object[0],lifecycleEvents.toArray());
}
