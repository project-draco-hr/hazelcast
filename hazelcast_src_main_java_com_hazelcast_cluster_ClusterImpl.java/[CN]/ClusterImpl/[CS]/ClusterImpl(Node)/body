{
  this.node=node;
  logger=node.getLogger(getClass().getName());
  thisAddress=node.getThisAddress();
  thisMember=node.getLocalMember();
  securityLogger=node.loggingService.getLogger("com.hazelcast.security");
  waitMillisBeforeJoin=node.groupProperties.WAIT_SECONDS_BEFORE_JOIN.getInteger() * 1000L;
  maxWaitSecondsBeforeJoin=node.groupProperties.MAX_WAIT_SECONDS_BEFORE_JOIN.getInteger();
  maxNoHeartbeatMillis=node.groupProperties.MAX_NO_HEARTBEAT_SECONDS.getInteger() * 1000L;
  icmpEnabled=node.groupProperties.ICMP_ENABLED.getBoolean();
  icmpTtl=node.groupProperties.ICMP_TTL.getInteger();
  icmpTimeout=node.groupProperties.ICMP_TIMEOUT.getInteger();
  heartbeatOperationData=toData(new HeartbeatOperation());
  final long mergeFirstRunDelay=node.getGroupProperties().MERGE_FIRST_RUN_DELAY_SECONDS.getLong();
  final long mergeNextRunDelay=node.getGroupProperties().MERGE_NEXT_RUN_DELAY_SECONDS.getLong();
  node.nodeService.getScheduledExecutorService().scheduleWithFixedDelay(new SplitBrainHandler(node),mergeFirstRunDelay,mergeNextRunDelay,TimeUnit.SECONDS);
  final long heartbeatInterval=node.groupProperties.HEARTBEAT_INTERVAL_SECONDS.getInteger();
  node.nodeService.getScheduledExecutorService().scheduleWithFixedDelay(new Runnable(){
    public void run(){
      heartBeater();
    }
  }
,heartbeatInterval,heartbeatInterval,TimeUnit.SECONDS);
  node.connectionManager.addConnectionListener(this);
  node.nodeService.registerService(SERVICE_NAME,this);
}
