{
  final Set<MemberImpl> newMembers=new LinkedHashSet<MemberImpl>(incomingMembers.size());
  final Set<MemberImpl> oldMembers=members.get();
  final List<MemberImpl> addedMembers=new LinkedList<MemberImpl>();
  final List<MemberImpl> removedMembers=new LinkedList<MemberImpl>();
  for (  MemberImpl incomingMember : incomingMembers) {
    MemberImpl member=memberMap.get(incomingMember);
    if (member == null) {
      member=incomingMember;
      addedMembers.add(member);
      memberMap.put(member,member);
      memberAddressMap.put(member.getAddress(),member);
    }
    if (member.localMember()) {
      localMember.set(member);
    }
    newMembers.add(member);
  }
  for (  MemberImpl oldMember : oldMembers) {
    if (!newMembers.contains(oldMember)) {
      removedMembers.add(oldMember);
      memberMap.remove(oldMember);
      memberAddressMap.remove(oldMember.getAddress());
    }
  }
synchronized (memberChangeMutex) {
    members.set(unmodifiableSet(newMembers));
    if (listeners.isEmpty()) {
      return;
    }
    final LinkedHashSet<Member> membersAfterEvent=new LinkedHashSet<Member>(oldMembers);
    final NamedExecutorService eventExecutor=node.executorManager.getEventExecutorService();
    for (    Member addedMember : addedMembers) {
      membersAfterEvent.add(addedMember);
      final MembershipEvent event=new MembershipEvent(this,addedMember,MembershipEvent.MEMBER_ADDED,unmodifiableSet(new LinkedHashSet<Member>(membersAfterEvent)));
      for (      final MembershipListener listener : listeners) {
        eventExecutor.executeOrderedRunnable(listener.hashCode(),new Runnable(){
          public void run(){
            listener.memberAdded(event);
          }
        }
);
      }
    }
    for (    Member removedMember : removedMembers) {
      membersAfterEvent.remove(removedMember);
      final MembershipEvent event=new MembershipEvent(this,removedMember,MembershipEvent.MEMBER_REMOVED,unmodifiableSet(new LinkedHashSet<Member>(membersAfterEvent)));
      for (      final MembershipListener listener : listeners) {
        eventExecutor.executeOrderedRunnable(listener.hashCode(),new Runnable(){
          public void run(){
            listener.memberRemoved(event);
          }
        }
);
      }
    }
  }
}
