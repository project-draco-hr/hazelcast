{
  systemLogService.logJoin("PostJoin master: " + node.getMasterAddress() + ", isMaster: "+ node.isMaster());
  if (!node.isActive()) {
    return;
  }
  if (tryCount.incrementAndGet() == 5) {
    node.setAsMaster();
  }
  if (!node.isMaster()) {
    boolean allConnected=false;
    int checkCount=0;
    long maxJoinMillis=node.getGroupProperties().MAX_JOIN_SECONDS.getInteger() * 1000;
    if (node.joined()) {
      systemLogService.logJoin("Waiting for all connections");
      while (checkCount++ < node.groupProperties.CONNECT_ALL_WAIT_SECONDS.getInteger() && !allConnected) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ignored) {
        }
        Set<Member> members=node.getClusterImpl().getMembers();
        allConnected=true;
        for (        Member member : members) {
          MemberImpl memberImpl=(MemberImpl)member;
          if (!memberImpl.localMember() && node.connectionManager.getConnection(memberImpl.getAddress()) == null) {
            allConnected=false;
            systemLogService.logJoin("Not-connected to " + memberImpl.getAddress());
          }
        }
      }
    }
    if (!node.joined() || !allConnected) {
      if (Clock.currentTimeMillis() - joinStartTime < maxJoinMillis) {
        logger.log(Level.WARNING,"Failed to connect, node joined= " + node.joined() + ", allConnected= "+ allConnected+ " to all other members after "+ checkCount+ " seconds.");
        logger.log(Level.WARNING,"Rebooting after 10 seconds.");
        try {
          Thread.sleep(10000);
        }
 catch (        InterruptedException e) {
          node.shutdown(false,true);
        }
        node.rejoin();
      }
 else {
        throw new RuntimeException("Failed to join in " + (maxJoinMillis / 1000) + " seconds!");
      }
      return;
    }
 else {
      node.clusterManager.finalizeJoin();
    }
  }
  node.clusterManager.enqueueAndWait(new Processable(){
    public void process(){
      if (node.baseVariables.lsMembers.size() == 1) {
        final StringBuilder sb=new StringBuilder();
        sb.append("\n");
        sb.append(node.clusterManager);
        logger.log(Level.INFO,sb.toString());
      }
    }
  }
,5);
}
