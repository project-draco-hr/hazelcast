{
  final SerializationService ss=client.getSerializationService();
  final ClientClusterServiceImpl clusterService=(ClientClusterServiceImpl)client.getClientClusterService();
  final ClientPrincipal principal=clusterService.getPrincipal();
  String uuid=principal.getUuid();
  String ownerUuid=principal.getOwnerUuid();
  ClientMessage clientMessage;
  if (credentials instanceof UsernamePasswordCredentials) {
    UsernamePasswordCredentials cr=(UsernamePasswordCredentials)credentials;
    clientMessage=ClientAuthenticationCodec.encodeRequest(cr.getUsername(),cr.getPassword(),uuid,ownerUuid,false,ClientTypes.JAVA,client.getSerializationService().getVersion());
  }
 else {
    Data data=ss.toData(credentials);
    clientMessage=ClientAuthenticationCustomCodec.encodeRequest(data,uuid,ownerUuid,false,ClientTypes.JAVA,client.getSerializationService().getVersion());
  }
  connection.init();
  ClientMessage response;
  final ClientInvocation clientInvocation=new ClientInvocation(client,clientMessage,connection);
  final Future<ClientMessage> future=clientInvocation.invoke();
  try {
    response=future.get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e,IOException.class);
  }
  ClientAuthenticationCodec.ResponseParameters result=ClientAuthenticationCodec.decodeResponse(response);
  AuthenticationStatus authenticationStatus=AuthenticationStatus.getById(result.status);
switch (authenticationStatus) {
case AUTHENTICATED:
    connection.setRemoteEndpoint(result.address);
  return;
case CREDENTIALS_FAILED:
throw new AuthenticationException("Invalid credentials!");
default :
throw new AuthenticationException("Authentication status code not supported. status:" + authenticationStatus);
}
}
