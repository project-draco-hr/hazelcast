{
  final long tailStart=offset + (len & ~(MURMUR32_BLOCK_SIZE - 1));
  int c1=0xcc9e2d51;
  int c2=0x1b873593;
  int h1=seed;
  for (long blockAddr=offset; blockAddr < tailStart; blockAddr+=MURMUR32_BLOCK_SIZE) {
    int k1=loader.getInt(resource,blockAddr);
    k1*=c1;
    k1=(k1 << 15) | (k1 >>> 17);
    k1*=c2;
    h1^=k1;
    h1=(h1 << 13) | (h1 >>> 19);
    h1=h1 * 5 + 0xe6546b64;
  }
  int k1=0;
switch (len & 0x03) {
case 3:
    k1=(loader.getByte(resource,tailStart + 2) & 0xff) << 16;
case 2:
  k1|=(loader.getByte(resource,tailStart + 1) & 0xff) << 8;
case 1:
k1|=loader.getByte(resource,tailStart) & 0xff;
k1*=c1;
k1=(k1 << 15) | (k1 >>> 17);
k1*=c2;
h1^=k1;
default :
}
h1^=len;
h1=MurmurHash3_fmix(h1);
return h1;
}
