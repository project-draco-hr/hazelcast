{
  int c1=0xcc9e2d51;
  int c2=0x1b873593;
  int h1=seed;
  int roundedEnd=offset + (len & 0xfffffffc);
  for (int i=offset; i < roundedEnd; i+=4) {
    int k1=LITTLE_ENDIAN ? MEM.getInt(address + i) : (MEM.getByte(address + i) & 0xff) | ((MEM.getByte(address + i + 1) & 0xff) << 8) | ((MEM.getByte(address + i + 2) & 0xff) << 16)| (MEM.getByte(address + i + 3) << 24);
    k1*=c1;
    k1=(k1 << 15) | (k1 >>> 17);
    k1*=c2;
    h1^=k1;
    h1=(h1 << 13) | (h1 >>> 19);
    h1=h1 * 5 + 0xe6546b64;
  }
  int k1=0;
switch (len & 0x03) {
case 3:
    k1=(MEM.getByte(address + roundedEnd + 2) & 0xff) << 16;
case 2:
  k1|=(MEM.getByte(address + roundedEnd + 1) & 0xff) << 8;
case 1:
k1|=MEM.getByte(address + roundedEnd) & 0xff;
k1*=c1;
k1=(k1 << 15) | (k1 >>> 17);
k1*=c2;
h1^=k1;
default :
}
h1^=len;
h1=MurmurHash3_fmix(h1);
return h1;
}
