{
  final int nodeCount=5;
  Config config=new Config();
  config.setProperty(GroupProperty.PARTITION_COUNT,"13");
  initNetworkConfig(config,nodeCount);
  Config liteConfig=new Config();
  liteConfig.setProperty(GroupProperty.PARTITION_COUNT,"13");
  liteConfig.setLiteMember(true);
  initNetworkConfig(liteConfig,nodeCount);
  final HazelcastInstance master=newHazelcastInstance(config);
  final HazelcastInstance lite=newHazelcastInstance(liteConfig);
  InternalPartitionService masterPartitionService=getPartitionService(master);
  masterPartitionService.firstArrangement();
  final int initialPartitionStateVersion=masterPartitionService.getPartitionStateVersion();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      InternalPartitionService partitionService=getPartitionService(lite);
      assertEquals(initialPartitionStateVersion,partitionService.getPartitionStateVersion());
    }
  }
);
  blockedAddresses.add(getAddress(lite));
  final HazelcastInstance member1=newHazelcastInstance(config);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      for (      HazelcastInstance instance : getAllHazelcastInstances()) {
        InternalPartitionServiceImpl partitionService=(InternalPartitionServiceImpl)getPartitionService(instance);
        assertTrue(partitionService.isReplicaSyncAllowed());
        assertFalse(partitionService.hasOnGoingMigrationLocal());
      }
    }
  }
);
  final int finalPartitionStateVersion=masterPartitionService.getPartitionStateVersion();
  final InternalPartition[] finalPartitions=masterPartitionService.getPartitions();
  final InternalPartitionServiceImpl member1PartitionService=(InternalPartitionServiceImpl)getPartitionService(member1);
  assertEquals(finalPartitionStateVersion,member1PartitionService.getPartitionStateVersion());
  assertPartitionsTableEqual(finalPartitions,member1PartitionService.getPartitions());
  final Collection<PartitionReplicaChangeEvent> lostEvents=Collections.synchronizedCollection(new HashSet<PartitionReplicaChangeEvent>());
  final InternalPartitionServiceImpl litePartitionService=(InternalPartitionServiceImpl)getPartitionService(lite);
  litePartitionService.addPartitionListener(new PartitionListener(){
    @Override public void replicaChanged(    PartitionReplicaChangeEvent event){
      if (event.getNewAddress() == null && event.getReplicaIndex() == 0) {
        System.err.println("event = " + event);
        lostEvents.add(event);
      }
    }
  }
);
  TestUtil.terminateInstance(master);
  blockedAddresses.clear();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      InternalPartition[] partitionsRef=litePartitionService.getPartitions();
      int partitionStateVersionRef=litePartitionService.getPartitionStateVersion();
      InternalPartition[] partitions1=member1PartitionService.getPartitions();
      int version1=member1PartitionService.getPartitionStateVersion();
      assertThat(version1,Matchers.greaterThanOrEqualTo(finalPartitionStateVersion));
      assertEquals(partitionStateVersionRef,version1);
      assertPartitionsTableEqual(partitionsRef,partitions1);
    }
  }
);
  assertEquals(lostEvents.toString(),0,lostEvents.size());
}
