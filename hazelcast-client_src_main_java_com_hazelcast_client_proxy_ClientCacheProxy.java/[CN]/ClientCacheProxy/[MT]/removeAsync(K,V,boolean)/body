{
  ensureOpen();
  if (key == null) {
    throw new NullPointerException(NULL_KEY_IS_NOT_ALLOWED);
  }
  if (hasOldValue && oldValue == null) {
    throw new NullPointerException(NULL_VALUE_IS_NOT_ALLOWED);
  }
  validateConfiguredTypes(hasOldValue,key,oldValue);
  if (shouldBeSync()) {
    final Boolean isRemoved=remove(key,oldValue);
    return createCompletedFuture(isRemoved);
  }
  final Data keyData=toData(key);
  final Data valueData=oldValue != null ? toData(oldValue) : null;
  CacheRemoveRequest request=new CacheRemoveRequest(getDistributedObjectName(),keyData,valueData);
  ICompletableFuture future;
  try {
    future=getContext().getInvocationService().invokeOnKeyOwner(request,keyData);
    invalidateNearCache(keyData);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new DelegatingFuture<Boolean>(future,getContext().getSerializationService());
}
