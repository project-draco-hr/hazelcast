{
  ensureOpen();
  validateNotNull(key,value);
  validateConfiguredTypes(true,key,value);
  if (shouldBeSync()) {
    final Boolean put=putIfAbsent(key,value,expiryPolicy);
    return createCompletedFuture(put);
  }
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  CachePutIfAbsentRequest request=new CachePutIfAbsentRequest(getDistributedObjectName(),keyData,valueData,expiryPolicy);
  ICompletableFuture future;
  try {
    future=getContext().getInvocationService().invokeOnKeyOwner(request,keyData);
    invalidateNearCache(keyData);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new DelegatingFuture<Boolean>(future,getContext().getSerializationService());
}
