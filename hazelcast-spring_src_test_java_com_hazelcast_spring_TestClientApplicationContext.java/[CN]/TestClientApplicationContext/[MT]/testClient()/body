{
  assertNotNull(client);
  assertNotNull(client2);
  assertNotNull(client3);
  ClientConfig config=client.getClientConfig();
  assertEquals(3,config.getNetworkConfig().getConnectionAttemptLimit());
  assertEquals(1000,config.getNetworkConfig().getConnectionTimeout());
  assertEquals(3000,config.getNetworkConfig().getConnectionAttemptPeriod());
  ClientConfig config2=client2.getClientConfig();
  assertEquals(credentials,config2.getSecurityConfig().getCredentials());
  client.getMap("default").put("Q","q");
  client2.getMap("default").put("X","x");
  final IMap<Object,Object> map=instance.getMap("default");
  assertEquals("q",map.get("Q"));
  assertEquals("x",map.get("X"));
  ClientConfig config3=client3.getClientConfig();
  final SerializationConfig serConf=config3.getSerializationConfig();
  assertEquals(ByteOrder.BIG_ENDIAN,serConf.getByteOrder());
  assertEquals(false,serConf.isAllowUnsafe());
  assertEquals(false,serConf.isCheckClassDefErrors());
  assertEquals(false,serConf.isEnableCompression());
  assertEquals(false,serConf.isEnableSharedObject());
  assertEquals(false,serConf.isUseNativeByteOrder());
  assertEquals(10,serConf.getPortableVersion());
  final Map<Integer,String> map1=serConf.getDataSerializableFactoryClasses();
  assertNotNull(map1);
  assertTrue(map1.containsKey(1));
  assertEquals("com.hazelcast.spring.serialization.DummyDataSerializableFactory",map1.get(1));
  final Map<Integer,String> portableFactoryClasses=serConf.getPortableFactoryClasses();
  assertNotNull(portableFactoryClasses);
  assertTrue(portableFactoryClasses.containsKey(2));
  assertEquals("com.hazelcast.spring.serialization.DummyPortableFactory",portableFactoryClasses.get(2));
  final Collection<SerializerConfig> serializerConfigs=serConf.getSerializerConfigs();
  assertNotNull(serializerConfigs);
  final SerializerConfig serializerConfig=serializerConfigs.iterator().next();
  assertNotNull(serializerConfig);
  assertEquals("com.hazelcast.nio.serialization.CustomSerializationTest$FooXmlSerializer",serializerConfig.getClassName());
  assertEquals("com.hazelcast.nio.serialization.CustomSerializationTest$Foo",serializerConfig.getTypeClassName());
  final List<ProxyFactoryConfig> proxyFactoryConfigs=config3.getProxyFactoryConfigs();
  assertNotNull(proxyFactoryConfigs);
  final ProxyFactoryConfig proxyFactoryConfig=proxyFactoryConfigs.get(0);
  assertNotNull(proxyFactoryConfig);
  assertEquals("com.hazelcast.spring.DummyProxyFactory",proxyFactoryConfig.getClassName());
  assertEquals("MyService",proxyFactoryConfig.getService());
  final LoadBalancer loadBalancer=config3.getLoadBalancer();
  assertNotNull(loadBalancer);
  assertTrue(loadBalancer instanceof RoundRobinLB);
  final NearCacheConfig nearCacheConfig=config3.getNearCacheConfig("default");
  assertNotNull(nearCacheConfig);
  assertEquals(1,nearCacheConfig.getTimeToLiveSeconds());
  assertEquals(70,nearCacheConfig.getMaxIdleSeconds());
  assertEquals("LRU",nearCacheConfig.getEvictionPolicy());
  assertEquals(4000,nearCacheConfig.getMaxSize());
  assertEquals(true,nearCacheConfig.isInvalidateOnChange());
}
