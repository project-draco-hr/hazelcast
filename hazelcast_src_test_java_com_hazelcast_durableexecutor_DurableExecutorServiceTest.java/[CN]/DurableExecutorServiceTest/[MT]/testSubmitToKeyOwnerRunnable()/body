{
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(NODE_COUNT);
  HazelcastInstance[] instances=factory.newInstances();
  final AtomicInteger nullResponseCount=new AtomicInteger(0);
  final CountDownLatch responseLatch=new CountDownLatch(NODE_COUNT);
  ExecutionCallback callback=new ExecutionCallback(){
    public void onResponse(    Object response){
      if (response == null) {
        nullResponseCount.incrementAndGet();
      }
      responseLatch.countDown();
    }
    public void onFailure(    Throwable t){
    }
  }
;
  for (int i=0; i < NODE_COUNT; i++) {
    HazelcastInstance instance=instances[i];
    DurableExecutorService service=instance.getDurableExecutorService("testSubmitToKeyOwnerRunnable");
    Member localMember=instance.getCluster().getLocalMember();
    String uuid=localMember.getUuid();
    Runnable runnable=new IncrementAtomicLongIfMemberUUIDNotMatchRunnable(uuid,"testSubmitToKeyOwnerRunnable");
    int key=findNextKeyForMember(instance,localMember);
    service.submitToKeyOwner(runnable,key).andThen(callback);
  }
  assertOpenEventually(responseLatch);
  assertEquals(0,instances[0].getAtomicLong("testSubmitToKeyOwnerRunnable").get());
  assertEquals(NODE_COUNT,nullResponseCount.get());
}
