{
  int callTimeout=1000;
  Config config=new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(),"" + callTimeout);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  HazelcastInstance local=factory.newHazelcastInstance(config);
  final HazelcastInstance remote=factory.newHazelcastInstance(config);
  NodeEngineImpl nodeEngine=getNodeEngineImpl(local);
  String key=generateKeyOwnedBy(remote);
  int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
  InternalOperationService opService=nodeEngine.getOperationService();
  int otherThreadId=1;
  opService.createInvocationBuilder(null,new LockOperation(new InternalLockNamespace(key),nodeEngine.toData(key),otherThreadId,-1,-1),partitionId).setCallTimeout(callTimeout).invoke().join();
  int thisThreadId=2;
  final InternalCompletableFuture<Object> future=opService.createInvocationBuilder(null,new LockOperation(new InternalLockNamespace(key),nodeEngine.toData(key),thisThreadId,-1,-1),partitionId).setCallTimeout(callTimeout).invoke();
  int listenerCount=10;
  final CountDownLatch listenersCompleteLatch=new CountDownLatch(listenerCount);
  for (int k=0; k < 10; k++) {
    future.andThen(new ExecutionCallback(){
      @Override public void onResponse(      Object response){
        if (Boolean.TRUE.equals(response)) {
          listenersCompleteLatch.countDown();
        }
 else {
          System.out.println(response);
        }
      }
      @Override public void onFailure(      Throwable t){
        t.printStackTrace();
      }
    }
);
  }
  sleepMillis(callTimeout * 5);
  opService.createInvocationBuilder(null,new UnlockOperation(new InternalLockNamespace(key),nodeEngine.toData(key),otherThreadId),partitionId).setCallTimeout(callTimeout).invoke().join();
  assertOpenEventually(listenersCompleteLatch);
}
