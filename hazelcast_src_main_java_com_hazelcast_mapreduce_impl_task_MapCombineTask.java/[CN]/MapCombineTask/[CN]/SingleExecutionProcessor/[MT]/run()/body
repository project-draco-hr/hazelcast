{
  try {
    RequestPartitionResult result=mapReduceService.processRequest(supervisor.getJobOwner(),new RequestMemberIdAssignment(name,jobId),name);
    if (result.getResultState() == NO_SUPERVISOR) {
      return;
    }
 else     if (result.getResultState() == NO_MORE_PARTITIONS) {
      return;
    }
    int partitionId=result.getPartitionId();
    KeyValueSource<KeyIn,ValueIn> delegate=keyValueSource;
    if (supervisor.getConfiguration().isCommunicateStats()) {
      delegate=new KeyValueSourceFacade<KeyIn,ValueIn>(keyValueSource,supervisor);
    }
    delegate.reset();
    if (delegate.open(nodeEngine)) {
      DefaultContext<KeyOut,ValueOut> context=supervisor.getOrCreateContext(MapCombineTask.this);
      processMapping(partitionId,context,delegate);
      delegate.close();
      finalizeMapping(partitionId,context);
    }
 else {
      postponePartitionProcessing(partitionId);
    }
  }
 catch (  Throwable t) {
    notifyRemoteException(supervisor,t);
    if (t instanceof Error) {
      ExceptionUtil.sneakyThrow(t);
    }
  }
}
