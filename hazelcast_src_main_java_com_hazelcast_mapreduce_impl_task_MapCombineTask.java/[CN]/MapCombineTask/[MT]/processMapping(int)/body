{
  DefaultContext<KeyOut,ValueOut> context=supervisor.createContext(this);
  if (mapper instanceof LifecycleMapper) {
    ((LifecycleMapper)mapper).initialize(context);
  }
  mappingPhase.executeMappingPhase(keyValueSource,context);
  if (mapper instanceof LifecycleMapper) {
    ((LifecycleMapper)mapper).finalized(context);
  }
  try {
    RequestPartitionResult result=mapReduceService.processRequest(supervisor.getJobOwner(),new RequestPartitionReducing(name,jobId,partitionId));
    if (result.getResultState() == SUCCESSFUL) {
      if (supervisor.getConfiguration().getReducerFactory() != null) {
        Map<KeyOut,Chunk> chunkMap=context.finish();
        Map<Address,Map<KeyOut,Chunk>> mapping=mapResultToMember(mapReduceService,chunkMap);
        for (        Map.Entry<Address,Map<KeyOut,Chunk>> entry : mapping.entrySet()) {
          mapReduceService.sendNotification(entry.getKey(),new LastChunkNotification(entry.getKey(),name,jobId,partitionId,entry.getValue()));
        }
      }
    }
 else {
      System.out.println(result);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
