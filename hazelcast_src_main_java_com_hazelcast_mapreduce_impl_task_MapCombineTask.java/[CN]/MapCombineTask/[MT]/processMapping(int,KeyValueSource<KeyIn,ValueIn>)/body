{
  DefaultContext<KeyOut,ValueOut> context=supervisor.createContext(this);
  context.setPartitionId(partitionId);
  if (mapper instanceof LifecycleMapper) {
    ((LifecycleMapper)mapper).initialize(context);
  }
  mappingPhase.executeMappingPhase(keyValueSource,mapper,context);
  if (mapper instanceof LifecycleMapper) {
    ((LifecycleMapper)mapper).finalized(context);
  }
  RequestPartitionResult result=mapReduceService.processRequest(supervisor.getJobOwner(),new RequestPartitionReducing(name,jobId,partitionId),name);
  if (result.getResultState() == SUCCESSFUL) {
    if (supervisor.getConfiguration().getReducerFactory() != null) {
      Map<KeyOut,Chunk> chunkMap=context.finish();
      if (chunkMap.size() > 0) {
        Address sender=mapReduceService.getLocalAddress();
        Map<Address,Map<KeyOut,Chunk>> mapping=mapResultToMember(supervisor,chunkMap);
        supervisor.registerReducerEventInterests(partitionId,mapping.keySet());
        for (        Map.Entry<Address,Map<KeyOut,Chunk>> entry : mapping.entrySet()) {
          Address receiver=entry.getKey();
          Map<KeyOut,Chunk> chunk=entry.getValue();
          mapReduceService.sendNotification(receiver,new LastChunkNotification(receiver,name,jobId,sender,partitionId,chunk));
        }
        Set<Address> addresses=mapping.keySet();
        Collection<Address> reducerInterests=supervisor.getReducerEventInterests(partitionId);
        if (reducerInterests != null) {
          for (          Address address : reducerInterests) {
            if (!addresses.contains(address)) {
              mapReduceService.sendNotification(address,new LastChunkNotification(address,name,jobId,sender,partitionId,Collections.emptyMap()));
            }
          }
        }
      }
 else {
        result=mapReduceService.processRequest(supervisor.getJobOwner(),new RequestPartitionProcessed(name,jobId,partitionId,REDUCING),name);
        if (result.getResultState() != SUCCESSFUL) {
          throw new RuntimeException("Could not finalize processing for partitionId " + partitionId);
        }
      }
    }
  }
}
