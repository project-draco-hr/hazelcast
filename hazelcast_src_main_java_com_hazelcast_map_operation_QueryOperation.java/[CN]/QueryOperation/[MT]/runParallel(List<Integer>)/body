{
  final SerializationService ss=getNodeEngine().getSerializationService();
  final ExecutorService executor=getNodeEngine().getExecutionService().getExecutor(ExecutionService.QUERY_EXECUTOR);
  final List<Future<Map<Object,QueryableEntry>>> lsFutures=new ArrayList<Future<Map<Object,QueryableEntry>>>(initialPartitions.size());
  for (  final Integer partition : initialPartitions) {
    Future<Map<Object,QueryableEntry>> f=executor.submit(new Callable<Map<Object,QueryableEntry>>(){
      public Map<Object,QueryableEntry> call(){
        final PartitionContainer container=mapService.getPartitionContainer(partition);
        final RecordStore recordStore=container.getRecordStore(name);
        Map<Object,QueryableEntry> partitionResult=null;
        for (        Record record : recordStore.getReadonlyRecordMap().values()) {
          Data key=record.getKey();
          Object value;
          if (record instanceof CachedDataRecord) {
            CachedDataRecord cachedDataRecord=(CachedDataRecord)record;
            value=cachedDataRecord.getCachedValue();
            if (value == null) {
              value=ss.toObject(cachedDataRecord.getValue());
              cachedDataRecord.setCachedValue(value);
            }
          }
 else {
            value=record.getValue();
            if (value instanceof Data) {
              value=ss.toObject((Data)value);
            }
          }
          if (value == null) {
            continue;
          }
          final QueryEntry queryEntry=new QueryEntry(ss,key,key,value);
          if (predicate.apply(queryEntry)) {
            if (partitionResult == null) {
              partitionResult=new HashMap<Object,QueryableEntry>();
            }
            partitionResult.put(queryEntry.getIndexKey(),queryEntry);
          }
        }
        return partitionResult;
      }
    }
);
    lsFutures.add(f);
  }
  for (  Future<Map<Object,QueryableEntry>> future : lsFutures) {
    final Map<Object,QueryableEntry> r=future.get();
    if (r != null) {
      for (      QueryableEntry entry : r.values()) {
        result.add(new QueryResultEntryImpl(entry.getKeyData(),entry.getKeyData(),entry.getValueData()));
      }
    }
  }
}
