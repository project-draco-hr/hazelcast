{
  final StaticNodeFactory nodeFactory=new StaticNodeFactory(2);
  final Config config=new Config();
  final String name="testLockConditionSimpleUsage";
  final ILock lock=nodeFactory.newHazelcastInstance(config).getLock(name);
  final ICondition condition=lock.newCondition(name + "c");
  final AtomicInteger count=new AtomicInteger(0);
  final int k=50;
  final CountDownLatch awaitLatch=new CountDownLatch(k);
  final CountDownLatch finalLatch=new CountDownLatch(k);
  for (int i=0; i < k; i++) {
    new Thread(new Runnable(){
      public void run(){
        try {
          lock.lock();
          if (lock.isLocked() && lock.tryLock()) {
            count.incrementAndGet();
            lock.unlock();
          }
          awaitLatch.countDown();
          condition.await();
          if (lock.isLocked() && lock.tryLock()) {
            count.incrementAndGet();
            lock.unlock();
          }
        }
 catch (        InterruptedException e) {
          return;
        }
 finally {
          lock.unlock();
          finalLatch.countDown();
        }
      }
    }
).start();
  }
  awaitLatch.await(1,TimeUnit.MINUTES);
  final ILock lock1=nodeFactory.newHazelcastInstance(config).getLock(name);
  final ICondition condition1=lock1.newCondition(name + "c");
  lock1.lock();
  condition1.signalAll();
  lock1.unlock();
  finalLatch.await(1,TimeUnit.MINUTES);
  Assert.assertEquals(k * 2,count.get());
}
