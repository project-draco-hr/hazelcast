{
  final int k=10;
  LatchRunnable.latch=new CountDownLatch(k);
  final LatchRunnable r=new LatchRunnable();
  for (int i=0; i < k; i++) {
    executor.execute(r);
  }
  assertOpenEventually(LatchRunnable.latch);
  final Future<Boolean> f=executor.submit(new SleepingTask(10));
  f.cancel(true);
  try {
    f.get();
  }
 catch (  CancellationException ignored) {
  }
  final LocalExecutorStats stats=executor.getLocalExecutorStats();
  assertEquals(k + 1,stats.getStartedTaskCount());
  assertEquals(k,stats.getCompletedTaskCount());
  assertEquals(0,stats.getPendingTaskCount());
  assertEquals(1,stats.getCancelledTaskCount());
}
