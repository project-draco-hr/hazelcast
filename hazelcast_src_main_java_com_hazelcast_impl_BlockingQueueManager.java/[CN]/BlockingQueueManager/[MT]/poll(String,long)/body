{
  if (timeout == -1) {
    timeout=Long.MAX_VALUE;
  }
  Object removedItem=null;
  long start=System.currentTimeMillis();
  while (removedItem == null && timeout >= 0) {
    Data key=takeKey(name,timeout);
    if (key == null) {
      return null;
    }
    IMap imap=getStorageMap(name);
    try {
      removedItem=imap.tryRemove(key,0,TimeUnit.MILLISECONDS);
      if (removedItem != null) {
        ThreadContext threadContext=ThreadContext.get();
        TransactionImpl txn=threadContext.getCallContext().getTransaction();
        if (txn != null && txn.getStatus() == Transaction.TXN_STATUS_ACTIVE) {
          txn.attachRemoveOp(name,key,removedItem,true);
        }
        final Data removedItemData=toData(removedItem);
        final BQ bq=getBQ(name);
        if (bq != null && bq.mapListeners.size() > 0) {
          enqueueAndReturn(new Processable(){
            public void process(){
              fireMapEvent(bq.mapListeners,name,EntryEvent.TYPE_REMOVED,removedItemData,thisAddress);
            }
          }
);
        }
      }
    }
 catch (    TimeoutException e) {
    }
    long now=System.currentTimeMillis();
    timeout-=(now - start);
    start=now;
  }
  return removedItem;
}
