{
  super(node);
  node.clusterService.registerPacketProcessor(ClusterOperation.BLOCKING_ITERATE,new InitializationAwareOperationHandler(){
    @Override void doOperation(    BQ queue,    Request request){
      queue.iterate(request);
    }
  }
);
  node.clusterService.registerPacketProcessor(ClusterOperation.BLOCKING_SIZE,new InitializationAwareOperationHandler(){
    void doOperation(    BQ queue,    Request request){
      queue.size(request);
    }
  }
);
  node.clusterService.registerPacketProcessor(ClusterOperation.BLOCKING_TAKE_KEY,new ResponsiveOperationHandler(){
    public void handle(    Request request){
      handleTakeKey(request);
    }
  }
);
  node.clusterService.registerPacketProcessor(ClusterOperation.BLOCKING_PEEK_KEY,new ResponsiveOperationHandler(){
    public void handle(    Request request){
      handlePeekKey(request);
    }
  }
);
  node.clusterService.registerPacketProcessor(ClusterOperation.BLOCKING_ADD_KEY,new ResponsiveOperationHandler(){
    public void handle(    Request request){
      handleAddKey(request);
    }
  }
);
  node.clusterService.registerPacketProcessor(ClusterOperation.BLOCKING_REMOVE_KEY,new InitializationAwareOperationHandler(){
    void doOperation(    BQ queue,    Request request){
      queue.removeKey(request);
    }
  }
);
  node.clusterService.registerPacketProcessor(ClusterOperation.BLOCKING_GENERATE_KEY,new ResponsiveOperationHandler(){
    public void handle(    Request request){
      handleGenerateKey(request);
    }
  }
);
  node.clusterService.registerPacketProcessor(ClusterOperation.BLOCKING_OFFER_KEY,new PacketProcessor(){
    public void process(    Packet packet){
      handleOfferKey(packet);
    }
  }
);
}
