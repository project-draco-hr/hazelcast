{
  Parser parser=new Parser();
  List<Object> tokens=new ArrayList<Object>(parser.toPrefix(sql));
  System.out.println(sql);
  root:   while (tokens.size() > 1) {
    for (int i=0; i < tokens.size(); i++) {
      Object tokenObj=tokens.get(i);
      if (tokenObj instanceof String && Parser.isPrecedence((String)tokenObj)) {
        String token=(String)tokenObj;
        if ("=".equals(token) || "==".equals(token)) {
          Object first=tokens.get(i - 2);
          Object second=tokens.get(i - 1);
          Predicate p=equal(get((String)first),second);
          removeThreeAddOne(tokens,i,p);
        }
 else         if (">".equals(token)) {
          Object first=tokens.get(i - 2);
          Object second=tokens.get(i - 1);
          Predicate p=greaterThan(get((String)first),(Comparable)second);
          removeThreeAddOne(tokens,i,p);
        }
 else         if (">=".equals(token)) {
          Object first=tokens.get(i - 2);
          Object second=tokens.get(i - 1);
          Predicate p=greaterEqual(get((String)first),(Comparable)second);
          removeThreeAddOne(tokens,i,p);
        }
 else         if ("<=".equals(token)) {
          Object first=tokens.get(i - 2);
          Object second=tokens.get(i - 1);
          Predicate p=lessEqual(get((String)first),(Comparable)second);
          removeThreeAddOne(tokens,i,p);
        }
 else         if ("<".equals(token)) {
          Object first=tokens.get(i - 2);
          Object second=tokens.get(i - 1);
          Predicate p=lessThan(get((String)first),(Comparable)second);
          removeThreeAddOne(tokens,i,p);
        }
 else         if ("AND".equalsIgnoreCase(token)) {
          Object first=tokens.get(i - 2);
          Object second=tokens.get(i - 1);
          Predicate p=Predicates.and((Predicate)first,(Predicate)second);
          removeThreeAddOne(tokens,i,p);
        }
 else         if ("OR".equalsIgnoreCase(token)) {
          Object first=tokens.get(i - 2);
          Object second=tokens.get(i - 1);
          Predicate p=Predicates.or((Predicate)first,(Predicate)second);
          removeThreeAddOne(tokens,i,p);
        }
        continue root;
      }
    }
  }
  System.out.println(tokens.get(0));
  return (Predicate)tokens.get(0);
}
