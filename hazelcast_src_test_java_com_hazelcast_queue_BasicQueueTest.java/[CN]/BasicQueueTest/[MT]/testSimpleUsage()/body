{
  final int k=8;
  final Config config=new Config();
  config.setProperty(GroupProperties.PROP_GRACEFUL_SHUTDOWN_MAX_WAIT,"0");
  final HazelcastInstance[] instances=StaticNodeFactory.newInstances(config,k);
  final IQueue[] queues=new IQueue[30];
  for (int i=0; i < queues.length; i++) {
    queues[i]=instances[0].getQueue("queue_" + i);
  }
  final AtomicBoolean hasNull=new AtomicBoolean(false);
  final AtomicBoolean offerDone=new AtomicBoolean(false);
  final AtomicBoolean pollDone=new AtomicBoolean(false);
  new Thread(){
    public void run(){
      for (int i=0; i < 10000; i++) {
        for (        IQueue queue : queues) {
          queue.offer("value" + i);
        }
      }
      offerDone.set(true);
    }
  }
.start();
  new Thread(){
    public void run(){
      for (      IQueue queue : queues) {
        for (int i=0; i < 10000; i++) {
          try {
            Object o=queue.poll(30,TimeUnit.SECONDS);
            hasNull.compareAndSet(false,o == null);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
      pollDone.set(true);
    }
  }
.start();
  Thread.sleep(3 * 1000);
  instances[1].getLifecycleService().shutdown();
  instances[2].getLifecycleService().shutdown();
  Thread.sleep(3 * 1000);
  instances[4].getLifecycleService().shutdown();
  while (!offerDone.get() || !pollDone.get()) {
    Thread.sleep(1 * 1000);
  }
  Assert.assertTrue(!hasNull.get());
  for (  IQueue queue : queues) {
    Assert.assertTrue(queue.size() == 0);
  }
}
