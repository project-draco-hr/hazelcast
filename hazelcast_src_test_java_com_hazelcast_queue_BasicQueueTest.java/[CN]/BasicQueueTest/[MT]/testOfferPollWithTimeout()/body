{
  final String name="defQueue";
  Config config=new Config();
  final int count=100;
  config.getQueueConfig(name).setMaxSize(count);
  final int insCount=4;
  final HazelcastInstance[] instances=StaticNodeFactory.newInstances(config,insCount);
  final IQueue<String> q=instances[0].getQueue(name);
  final Random rnd=new Random(System.currentTimeMillis());
  for (int i=0; i < count; i++) {
    int index=rnd.nextInt(insCount);
    IQueue<String> queue=instances[index].getQueue(name);
    queue.offer("item" + i);
  }
  assertFalse(q.offer("rejected",1,TimeUnit.SECONDS));
  assertEquals("item0",q.poll());
  assertTrue(q.offer("not rejected",1,TimeUnit.SECONDS));
  new Thread(){
    public void run(){
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      q.poll();
    }
  }
.start();
  assertTrue(q.offer("not rejected",5,TimeUnit.SECONDS));
  assertEquals(count,q.size());
  for (int i=0; i < count; i++) {
    int index=rnd.nextInt(insCount);
    IQueue<String> queue=instances[index].getQueue(name);
    queue.poll();
  }
  assertNull(q.poll(1,TimeUnit.SECONDS));
  assertTrue(q.offer("offered1"));
  assertEquals("offered1",q.poll(1,TimeUnit.SECONDS));
  new Thread(){
    public void run(){
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      q.offer("offered2");
    }
  }
.start();
  assertEquals("offered2",q.poll(5,TimeUnit.SECONDS));
  assertEquals(0,q.size());
}
