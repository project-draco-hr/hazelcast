{
  int total=6;
  int parallel=2;
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(total + 1);
  HazelcastInstance instance=nodeFactory.newHazelcastInstance();
  final String name="testAtomicLongSpawnNodeInParallel";
  IAtomicLong atomicLong=instance.getAtomicLong(name);
  atomicLong.set(100);
  final ExecutorService ex=Executors.newFixedThreadPool(parallel);
  try {
    for (int i=0; i < total / parallel; i++) {
      final HazelcastInstance[] instances=new HazelcastInstance[parallel];
      final CountDownLatch countDownLatch=new CountDownLatch(parallel);
      for (int j=0; j < parallel; j++) {
        final int id=j;
        ex.execute(new Runnable(){
          public void run(){
            instances[id]=nodeFactory.newHazelcastInstance();
            instances[id].getAtomicLong(name).incrementAndGet();
            countDownLatch.countDown();
          }
        }
);
      }
      assertTrue(countDownLatch.await(1,TimeUnit.MINUTES));
      IAtomicLong newAtomicLong=instance.getAtomicLong(name);
      assertEquals((long)100 + (i + 1) * parallel,newAtomicLong.get());
      instance.shutdown();
      instance=instances[0];
    }
  }
  finally {
    ex.shutdownNow();
  }
}
