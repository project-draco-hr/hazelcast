{
  String name=protocol.args[0];
  System.out.println("Received the addListener for " + name);
  boolean includeValue=Boolean.valueOf(protocol.args[1]);
  final Data key=protocol.hasBuffer() ? protocol.buffers[0] : null;
  final DataMapProxy dataMapProxy=mapService.createDistributedObjectForClient(name);
  final TcpIpConnection connection=protocol.conn;
  EntryListener<Data,Data> entryListener=new EntryListener(){
    public void entryAdded(    EntryEvent entryEvent){
      sendEvent(entryEvent);
    }
    public void entryRemoved(    EntryEvent entryEvent){
      sendEvent(entryEvent);
    }
    public void entryUpdated(    EntryEvent entryEvent){
      sendEvent(entryEvent);
    }
    public void entryEvicted(    EntryEvent entryEvent){
      sendEvent(entryEvent);
    }
    public void sendEvent(    EntryEvent entryEvent){
      System.out.println("Sending the event");
      if (connection.live()) {
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)entryEvent;
        String[] args=new String[]{"map",dataMapProxy.getName(),entryEvent.getEventType().toString(),entryEvent.getMember().getInetSocketAddress().getHostName() + ":" + entryEvent.getMember().getInetSocketAddress().getPort()};
        List<Data> list=new ArrayList<Data>();
        list.add(dataAwareEntryEvent.getKeyData());
        if (dataAwareEntryEvent.getOldValueData() != null)         list.add(dataAwareEntryEvent.getNewValueData());
        if (dataAwareEntryEvent.getOldValueData() != null)         list.add(dataAwareEntryEvent.getOldValueData());
        Protocol event=new Protocol(connection,Command.EVENT,args,list.toArray(new Data[]{}));
        System.out.println("Connection is " + connection);
        sendResponse(node,event,connection);
      }
 else {
        System.out.println("on Server removing the listener");
        String regid=null;
        dataMapProxy.removeEntryListener(regid);
      }
    }
  }
;
  if (key == null)   dataMapProxy.addEntryListener(entryListener,includeValue);
 else   dataMapProxy.addEntryListener(entryListener,key,includeValue);
  return null;
}
