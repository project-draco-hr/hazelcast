{
  HazelcastInstance[] cluster=createHazelcastInstanceFactory(2).newInstances();
  HazelcastInstance localHz=cluster[0];
  final HazelcastInstance remoteHz=cluster[1];
  final InternalOperationService operationService=getOperationService(localHz);
  final Address localAddress=getAddress(localHz);
  final Address remoteAddress=getAddress(remoteHz);
  final DummyOperation operation=new DummyOperation(5000);
  operation.setPartitionId(Operation.GENERIC_PARTITION_ID);
  InternalCompletableFuture f=operationService.invokeOnTarget(null,operation,remoteAddress);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int partitionId=operation.getPartitionId();
      long callId=operation.getCallId();
      OperationServiceImpl remoteOperationService=(OperationServiceImpl)getOperationService(remoteHz);
      IsStillRunningService isStillRunningService=remoteOperationService.getIsStillRunningService();
      boolean isRunning=isStillRunningService.isOperationExecuting(localAddress,partitionId,callId);
      assertTrue(isRunning);
    }
  }
);
  f.join();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      InternalOperationService remoteOperationService=getOperationService(remoteHz);
      OperationServiceImpl operationServiceImpl=(OperationServiceImpl)remoteOperationService;
      IsStillRunningService isStillRunningService=operationServiceImpl.getIsStillRunningService();
      boolean isRunning=isStillRunningService.isOperationExecuting(localAddress,operation.getPartitionId(),operation.getCallId());
      assertFalse(isRunning);
    }
  }
);
}
