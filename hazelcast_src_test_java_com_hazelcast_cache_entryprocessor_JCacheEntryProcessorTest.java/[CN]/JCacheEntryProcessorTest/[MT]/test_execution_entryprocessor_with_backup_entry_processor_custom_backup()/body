{
  CachingProvider cachingProvider=HazelcastServerCachingProvider.createCachingProvider(hz1);
  CacheManager cacheManager=cachingProvider.getCacheManager();
  String cacheName=randomString();
  CompleteConfiguration<Integer,String> config=new MutableConfiguration<Integer,String>().setTypes(Integer.class,String.class);
  Cache<Integer,String> cache=cacheManager.createCache(cacheName,config);
  cache.invoke(1,new CustomBackupAwareEntryProcessor());
  final Data key=serializationService.toData(1);
  final int partitionId=hz1.getPartitionService().getPartition(1).getPartitionId();
  final ICacheRecordStore recordStore1=cacheServiceHz1.getCache("/hz/" + cacheName,partitionId);
  final ICacheRecordStore recordStore2=cacheServiceHz2.getCache("/hz/" + cacheName,partitionId);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      CacheRecord record1=recordStore1.getRecord(key);
      CacheRecord record2=recordStore2.getRecord(key);
      Object value1=serializationService.toObject(record1.getValue());
      Object value2=serializationService.toObject(record2.getValue());
      Partition partition=hz1.getPartitionService().getPartition(1);
      if (hz1.getCluster().getLocalMember().equals(partition.getOwner())) {
        assertEquals("Foo1",value1);
        assertEquals("Foo2",value2);
      }
 else {
        assertEquals("Foo1",value2);
        assertEquals("Foo2",value1);
      }
    }
  }
);
}
