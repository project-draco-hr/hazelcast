{
  if (entries.isEmpty())   return;
  final ILogger logger=mapService.getNodeEngine().getLogger(getClass());
  if (entries.size() == 1) {
    ScheduledEntry<Data,Object> entry=entries.iterator().next();
    Exception exception=tryStore(scheduler,entry);
    if (exception != null) {
      logger.severe(exception);
    }
  }
 else {
    final Queue<ScheduledEntry> duplicateKeys=new LinkedList<ScheduledEntry>();
    final Map<Object,Object> map=new HashMap<Object,Object>(entries.size());
    for (    ScheduledEntry<Data,Object> entry : entries) {
      final Object key=mapService.toObject(entry.getKey());
      if (map.get(key) != null) {
        duplicateKeys.offer(entry);
        continue;
      }
      map.put(key,mapService.toObject(entry.getValue()));
    }
    for (    ScheduledEntry duplicateKey : duplicateKeys) {
      Object key=mapService.toObject(duplicateKey.getKey());
      Object removed=map.remove(key);
      if (removed != null) {
        final Exception ex=tryStore(scheduler,new AbstractMap.SimpleEntry(key,removed));
        if (ex != null) {
          logger.severe(ex);
        }
      }
    }
    Exception exception=null;
    try {
      mapContainer.getStore().storeAll(map);
    }
 catch (    Exception e) {
      logger.warning(mapContainer.getStore().getMapStore().getClass() + " --> storeAll was failed, " + "now Hazelcast is trying to store one by one: ",e);
      for (      ScheduledEntry<Data,Object> entry : entries) {
        Exception temp=tryStore(scheduler,entry);
        if (temp != null) {
          exception=temp;
        }
      }
    }
    ScheduledEntry entry;
    while ((entry=duplicateKeys.poll()) != null) {
      final Exception temp=tryStore(scheduler,entry);
      if (temp != null) {
        exception=temp;
      }
    }
    if (exception != null) {
      logger.severe(exception);
    }
  }
}
