{
  boolean shouldMerge=false;
  if (joinInfo != null) {
    boolean validJoinRequest;
    try {
      try {
        validJoinRequest=node.getClusterService().validateJoinRequest(joinInfo);
      }
 catch (      Exception e) {
        logger.log(Level.FINEST,e.getMessage());
        validJoinRequest=false;
      }
      if (validJoinRequest) {
        for (        Member member : node.getClusterService().getMembers()) {
          MemberImpl memberImpl=(MemberImpl)member;
          if (memberImpl.getAddress().equals(joinInfo.address)) {
            logger.log(Level.FINEST,"Should not merge to " + joinInfo.address + ", because it is already member of this cluster.");
            return false;
          }
        }
        int currentMemberCount=node.getClusterService().getMembers().size();
        if (joinInfo.getMemberCount() > currentMemberCount) {
          logger.log(Level.INFO,node.getThisAddress() + " is merging to " + joinInfo.address+ ", because : joinInfo.getMemberCount() > currentMemberCount ["+ (joinInfo.getMemberCount() + " > " + currentMemberCount)+ "]");
          logger.log(Level.FINEST,joinInfo.toString());
          shouldMerge=true;
        }
 else         if (joinInfo.getMemberCount() == currentMemberCount) {
          if (node.getThisAddress().hashCode() > joinInfo.address.hashCode()) {
            logger.log(Level.INFO,node.getThisAddress() + " is merging to " + joinInfo.address+ ", because : node.getThisAddress().hashCode() > joinInfo.address.hashCode() "+ ", this node member count: "+ currentMemberCount);
            logger.log(Level.FINEST,joinInfo.toString());
            shouldMerge=true;
          }
 else {
            logger.log(Level.FINEST,joinInfo.address + " should merge to this node " + ", because : node.getThisAddress().hashCode() < joinInfo.address.hashCode() "+ ", this node member count: "+ currentMemberCount);
          }
        }
      }
    }
 catch (    Throwable e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
      return false;
    }
  }
  return shouldMerge;
}
