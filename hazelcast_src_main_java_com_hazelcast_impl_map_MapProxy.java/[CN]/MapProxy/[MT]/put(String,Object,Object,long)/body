{
  Data key=toData(k);
  int partitionId=nodeService.getPartitionId(key);
  ThreadContext threadContext=ThreadContext.get();
  threadContext.setCurrentFactory(nodeService.getNode().factory);
  TransactionImpl txn=threadContext.getTransaction();
  String txnId=null;
  if (txn != null && txn.getStatus() == Transaction.TXN_STATUS_ACTIVE) {
    txnId=txn.getTxnId();
    txn.attachParticipant(MAP_SERVICE_NAME,partitionId);
  }
  PutOperation putOperation=new PutOperation(name,toData(k),v,txnId,ttl);
  long backupCallId=mapService.createNewBackupCallQueue();
  try {
    putOperation.setBackupCallId(backupCallId);
    Invocation invocation=nodeService.createSingleInvocation(MAP_SERVICE_NAME,putOperation,partitionId).build();
    Future f=invocation.invoke();
    Object response=f.get();
    BlockingQueue backupResponses=mapService.getBackupCallQueue(backupCallId);
    backupResponses.poll(5,TimeUnit.SECONDS);
    if (response instanceof Response) {
      return ((Response)response).getResult();
    }
    return toObject((Data)response);
  }
 catch (  Throwable throwable) {
    throw new RuntimeException(throwable);
  }
 finally {
    mapService.removeBackupCallQueue(backupCallId);
  }
}
