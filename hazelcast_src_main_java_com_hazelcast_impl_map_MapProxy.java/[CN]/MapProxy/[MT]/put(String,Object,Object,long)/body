{
  Data key=toData(k);
  int partitionId=nodeService.getPartitionId(key);
  ThreadContext threadContext=ThreadContext.get();
  threadContext.setCurrentInstance(nodeService.getNode().hazelcastInstance);
  TransactionImpl txn=threadContext.getTransaction();
  String txnId=null;
  if (txn != null && txn.getStatus() == Transaction.TXN_STATUS_ACTIVE) {
    txnId=txn.getTxnId();
    txn.attachParticipant(MAP_SERVICE_NAME,partitionId);
  }
  PutOperation putOperation=new PutOperation(name,toData(k),v,txnId,ttl);
  long backupCallId=mapService.createNewBackupCallQueue();
  System.out.println(nodeService.getThisAddress() + " map.put() with BACKUP ID " + backupCallId);
  try {
    putOperation.setBackupCallId(backupCallId);
    putOperation.setServiceName(MAP_SERVICE_NAME);
    Invocation invocation=nodeService.createSingleInvocation(MAP_SERVICE_NAME,putOperation,partitionId).build();
    Future f=invocation.invoke();
    Object response=f.get();
    BlockingQueue backupResponses=mapService.getBackupCallQueue(backupCallId);
    Object backupResponse=backupResponses.poll(10,TimeUnit.SECONDS);
    if (backupResponse == null) {
      System.out.println(nodeService.getThisAddress() + " Has Null backup " + backupCallId);
    }
    Object returnObj=null;
    if (response instanceof Response) {
      Response r=(Response)response;
      returnObj=r.getResult();
    }
 else {
      returnObj=toObject(response);
    }
    if (returnObj instanceof Throwable) {
      throw (Throwable)returnObj;
    }
    return returnObj;
  }
 catch (  RetryableException t) {
    t.printStackTrace();
    throw t;
  }
catch (  Throwable throwable) {
    throwable.printStackTrace();
    throw new RuntimeException(throwable);
  }
 finally {
    mapService.removeBackupCallQueue(backupCallId);
  }
}
