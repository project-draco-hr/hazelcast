{
  boolean register=true;
  ClassDefinitionBuilder builder=new ClassDefinitionBuilder(factoryId,classId,version);
  in.readInt();
  int fieldCount=in.readInt();
  int offset=in.position();
  for (int i=0; i < fieldCount; i++) {
    int pos=in.readInt(offset + i * Bits.INT_SIZE_IN_BYTES);
    in.position(pos);
    short len=in.readShort();
    char[] chars=new char[len];
    for (int k=0; k < len; k++) {
      chars[k]=(char)in.readUnsignedByte();
    }
    FieldType type=FieldType.get(in.readByte());
    String name=new String(chars);
    int fieldFactoryId=0;
    int fieldClassId=0;
    if (type == FieldType.PORTABLE) {
      if (in.readBoolean()) {
        register=false;
      }
      fieldFactoryId=in.readInt();
      fieldClassId=in.readInt();
      if (register) {
        int fieldVersion=in.readInt();
        readClassDefinition(in,fieldFactoryId,fieldClassId,fieldVersion);
      }
    }
 else     if (type == FieldType.PORTABLE_ARRAY) {
      int k=in.readInt();
      fieldFactoryId=in.readInt();
      fieldClassId=in.readInt();
      if (k > 0) {
        int p=in.readInt();
        in.position(p);
        int fieldVersion=in.readInt();
        readClassDefinition(in,fieldFactoryId,fieldClassId,fieldVersion);
      }
 else {
        register=false;
      }
    }
    builder.addField(new FieldDefinitionImpl(i,name,type,fieldFactoryId,fieldClassId));
  }
  ClassDefinition classDefinition=builder.build();
  if (register) {
    classDefinition=registerClassDefinition(classDefinition);
  }
  return classDefinition;
}
