{
  boolean visibility=this.visibility;
  try {
    ReducerChunk<Key,Chunk> reducerChunk;
    while ((reducerChunk=reducerQueue.poll()) != null) {
      if (cancelled.get()) {
        return;
      }
      reduceChunk(reducerChunk.chunk);
      processProcessedState(reducerChunk);
    }
  }
 catch (  Throwable t) {
    notifyRemoteException(supervisor,t);
    if (t instanceof Error) {
      ExceptionUtil.sneakyThrow(t);
    }
  }
 finally {
    this.visibility=!visibility;
    active.compareAndSet(true,false);
  }
}
