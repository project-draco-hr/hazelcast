{
  if (!nodeEngine.isActive()) {
    remote=false;
    invoke(new HazelcastInstanceNotActiveException());
    return;
  }
  long cid=op.getCallId();
  if (cid > 0) {
    BasicInvocation in=operationService.deregisterInvocation(cid);
  }
  final Address invTarget=getTarget();
  target=invTarget;
  invokeCount++;
  final Address thisAddress=nodeEngine.getThisAddress();
  if (invTarget == null) {
    remote=false;
    if (nodeEngine.isActive()) {
      invoke(new WrongTargetException(thisAddress,null,partitionId,replicaIndex,op.getClass().getName(),serviceName));
    }
 else {
      invoke(new HazelcastInstanceNotActiveException());
    }
    return;
  }
  member=nodeEngine.getClusterService().getMember(invTarget);
  if (!OperationAccessor.isJoinOperation(op) && member == null) {
    invoke(new TargetNotMemberException(invTarget,partitionId,op.getClass().getName(),serviceName));
    return;
  }
  if (op.getPartitionId() != partitionId) {
    invoke(new IllegalStateException("Partition id of operation: " + op.getPartitionId() + " is not equal to the partition id of invocation: "+ partitionId));
    return;
  }
  if (op.getReplicaIndex() != replicaIndex) {
    invoke(new IllegalStateException("Replica index of operation: " + op.getReplicaIndex() + " is not equal to the replica index of invocation: "+ replicaIndex));
    return;
  }
  OperationAccessor.setInvocationTime(op,nodeEngine.getClusterTime());
  remote=!thisAddress.equals(invTarget);
  if (remote) {
    long callId=operationService.registerInvocation(this);
    OperationAccessor.setCallId(op,callId);
    boolean sent=operationService.send(op,invTarget);
    if (!sent) {
      operationService.deregisterInvocation(callId);
      invoke(new RetryableIOException("Packet not sent to -> " + invTarget));
    }
  }
 else {
    if (op instanceof BackupAwareOperation) {
      long callId=operationService.registerInvocation(this);
      OperationAccessor.setCallId(op,callId);
    }
    ResponseHandlerFactory.setLocalResponseHandler(op,this);
    if (!operationService.isAllowedToRunInCurrentThread(op)) {
      operationService.executeOperation(op);
    }
 else {
      operationService.runOperation(op);
    }
  }
}
