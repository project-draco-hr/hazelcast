{
  Object response;
  if (obj == null) {
    response=NULL_RESPONSE;
  }
 else {
    Throwable error=getError(obj);
    if (error != null) {
      if (error instanceof CallTimeoutException) {
        response=RETRY_RESPONSE;
        if (logger.isFinestEnabled()) {
          logger.finest("Call timed-out during wait-notify phase, retrying call: " + toString());
        }
        if (op instanceof WaitSupport) {
          long waitTimeout=op.getWaitTimeout();
          waitTimeout-=callTimeout;
          op.setWaitTimeout(waitTimeout);
        }
        invokeCount--;
      }
 else {
        final ExceptionAction action=onException(error);
        final int localInvokeCount=invokeCount;
        if (action == ExceptionAction.RETRY_INVOCATION && localInvokeCount < tryCount) {
          response=RETRY_RESPONSE;
          if (localInvokeCount > 99 && localInvokeCount % 10 == 0) {
            logger.warning("Retrying invocation: " + toString() + ", Reason: "+ error);
          }
        }
 else         if (action == ExceptionAction.CONTINUE_WAIT) {
          response=WAIT_RESPONSE;
        }
 else {
          response=error;
        }
      }
    }
 else {
      response=obj;
    }
  }
  if (response == RETRY_RESPONSE) {
    if (invocationFuture.interrupted) {
      invocationFuture.set(INTERRUPTED_RESPONSE);
    }
 else {
      invocationFuture.set(WAIT_RESPONSE);
      final ExecutionService ex=nodeEngine.getExecutionService();
      if (invokeCount < 5) {
        getAsyncExecutor().execute(this);
      }
 else {
        ex.schedule(ExecutionService.ASYNC_EXECUTOR,this,tryPauseMillis,TimeUnit.MILLISECONDS);
      }
    }
    return;
  }
  if (response == WAIT_RESPONSE) {
    invocationFuture.set(WAIT_RESPONSE);
    return;
  }
  if (response instanceof NormalResponse && op instanceof BackupAwareOperation) {
    final NormalResponse resp=(NormalResponse)response;
    if (resp.getBackupCount() > 0) {
      waitForBackups(resp.getBackupCount(),5,TimeUnit.SECONDS,resp);
      return;
    }
  }
  invocationFuture.set(response);
}
