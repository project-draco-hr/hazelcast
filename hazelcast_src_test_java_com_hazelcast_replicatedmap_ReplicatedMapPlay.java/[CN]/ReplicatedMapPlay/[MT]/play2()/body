{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  Config cfg=new Config();
  cfg.getReplicatedMapConfig("default").setInMemoryFormat(InMemoryFormat.OBJECT);
  cfg.getReplicatedMapConfig("default").setReplicationDelayMillis(0);
  cfg.getReplicatedMapConfig("default").setConcurrencyLevel(1);
  final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(cfg);
  HazelcastInstance instance2=nodeFactory.newHazelcastInstance(cfg);
  HazelcastInstance instance3=nodeFactory.newHazelcastInstance(cfg);
  final ReplicatedMap<Object,Object> mapA=instance1.getReplicatedMap("default");
  final ReplicatedMap<Object,Object> mapB=instance2.getReplicatedMap("default");
  final ReplicatedMap<Object,Object> mapC=instance3.getReplicatedMap("default");
  Thread[] pool=new Thread[10];
  CyclicBarrier gate=new CyclicBarrier(pool.length + 1);
  for (int i=0; i < 1; i++) {
    pool[i]=new GatedThread(gate){
      public void go(){
        for (int i=0; i < 1000; i++) {
          if (i < 500) {
            mapA.put(i + "A",i);
          }
 else           if (i == 500) {
            mapC.put(i + "C",i);
            try {
              Thread.sleep(500);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            TestUtil.terminateInstance(instance1);
          }
 else {
            mapC.put(i + "C",i);
          }
        }
      }
    }
;
    pool[i].start();
  }
  for (int i=1; i < 10; i++) {
    pool[i]=new GatedThread(gate){
      public void go(){
        for (int i=0; i < 1000; i++)         mapB.put(i + "B",i);
      }
    }
;
    pool[i].start();
  }
  gate.await();
  for (  Thread t : pool) {
    t.join();
  }
  for (int i=0; i < 500; i++) {
    assertEquals(i,mapB.get(i + "A"));
    assertEquals(i,mapC.get(i + "A"));
    assertEquals(i,mapB.get(i + "B"));
    assertEquals(i,mapC.get(i + "B"));
  }
  for (int i=500; i < 1000; i++) {
    assertEquals(i,mapB.get(i + "C"));
    assertEquals(i,mapC.get(i + "C"));
    assertEquals(i,mapB.get(i + "B"));
    assertEquals(i,mapC.get(i + "B"));
  }
}
