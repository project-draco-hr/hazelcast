{
  lock.lock();
  try {
    final long now=Clock.currentTimeMillis();
    String msg="Handling join from " + joinRequest.address + ", inProgress: "+ joinInProgress+ (timeToStartJoin > 0 ? ", timeToStart: " + (timeToStartJoin - now) : "");
    logger.log(Level.FINEST,msg);
    boolean validJoinRequest;
    try {
      validJoinRequest=validateJoinRequest(joinRequest);
    }
 catch (    Exception e) {
      validJoinRequest=false;
    }
    final Connection conn=joinRequest.getConnection();
    if (validJoinRequest) {
      final MemberImpl member=getMember(joinRequest.address);
      if (member != null) {
        if (joinRequest.getUuid().equals(member.getUuid())) {
          String message="Ignoring join request, member already exists.. => " + joinRequest;
          logger.log(Level.FINEST,message);
          return;
        }
        if (node.isMaster() || member.getAddress().equals(node.getMasterAddress())) {
          logger.log(Level.WARNING,"New join request has been received from an existing endpoint! => " + member + " Removing old member and processing join request...");
          doRemoveAddress(member.getAddress(),false);
        }
      }
      if (!node.getConfig().getNetworkConfig().getJoin().getMulticastConfig().isEnabled()) {
        if (node.isActive() && node.joined() && node.getMasterAddress() != null && !node.isMaster()) {
          sendMasterAnswer(joinRequest);
        }
      }
      if (node.isMaster() && node.joined() && node.isActive()) {
        final MemberInfo newMemberInfo=new MemberInfo(joinRequest.address,joinRequest.nodeType,joinRequest.getUuid());
        if (node.securityContext != null && !setJoins.contains(newMemberInfo)) {
          final Credentials cr=joinRequest.getCredentials();
          if (cr == null) {
            securityLogger.log(Level.SEVERE,"Expecting security credentials " + "but credentials could not be found in JoinRequest!");
            sendAuthFail(joinRequest.address);
            return;
          }
 else {
            try {
              LoginContext lc=node.securityContext.createMemberLoginContext(cr);
              lc.login();
            }
 catch (            LoginException e) {
              securityLogger.log(Level.SEVERE,"Authentication has failed for " + cr.getPrincipal() + '@'+ cr.getEndpoint()+ " => ("+ e.getMessage()+ ")");
              securityLogger.log(Level.FINEST,e.getMessage(),e);
              sendAuthFail(joinRequest.address);
              return;
            }
          }
        }
        if (joinRequest.to != null && !joinRequest.to.equals(thisAddress)) {
          sendMasterAnswer(joinRequest);
          return;
        }
        if (!joinInProgress) {
          if (firstJoinRequest != 0 && now - firstJoinRequest >= maxWaitSecondsBeforeJoin * 1000) {
            startJoin();
          }
 else {
            if (setJoins.add(newMemberInfo)) {
              sendMasterAnswer(joinRequest);
              if (firstJoinRequest == 0) {
                firstJoinRequest=now;
              }
              if (now - firstJoinRequest < maxWaitSecondsBeforeJoin * 1000) {
                timeToStartJoin=now + waitMillisBeforeJoin;
              }
            }
            if (now > timeToStartJoin) {
              startJoin();
            }
          }
        }
      }
    }
 else {
      conn.close();
    }
  }
  finally {
    lock.unlock();
  }
}
