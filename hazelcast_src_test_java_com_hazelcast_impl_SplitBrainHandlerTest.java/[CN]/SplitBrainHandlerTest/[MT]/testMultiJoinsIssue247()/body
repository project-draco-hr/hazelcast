{
  Config c1=buildConfig(false).setProperty(GroupProperties.PROP_WAIT_SECONDS_BEFORE_JOIN,"0");
  Config c2=buildConfig(false).setProperty(GroupProperties.PROP_WAIT_SECONDS_BEFORE_JOIN,"0");
  Config c3=buildConfig(false).setProperty(GroupProperties.PROP_WAIT_SECONDS_BEFORE_JOIN,"0");
  Config c4=buildConfig(false).setProperty(GroupProperties.PROP_WAIT_SECONDS_BEFORE_JOIN,"0");
  c1.getNetworkConfig().setPort(15701);
  c2.getNetworkConfig().setPort(15702);
  c3.getNetworkConfig().setPort(15703);
  c4.getNetworkConfig().setPort(15704);
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(Arrays.asList("127.0.0.1:15701"));
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(Arrays.asList("127.0.0.1:15702"));
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(Arrays.asList("127.0.0.1:15703"));
  c4.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(Arrays.asList("127.0.0.1:15701, 127.0.0.1:15702, 127.0.0.1:15703, 127.0.0.1:15704"));
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  assertEquals(1,h1.getCluster().getMembers().size());
  assertEquals(1,h2.getCluster().getMembers().size());
  assertEquals(1,h3.getCluster().getMembers().size());
  HazelcastInstance h4=Hazelcast.newHazelcastInstance(c4);
  int numNodesWithTwoMembers=0;
  if (h1.getCluster().getMembers().size() == 2) {
    numNodesWithTwoMembers++;
  }
  if (h2.getCluster().getMembers().size() == 2) {
    numNodesWithTwoMembers++;
  }
  if (h3.getCluster().getMembers().size() == 2) {
    numNodesWithTwoMembers++;
  }
  if (h4.getCluster().getMembers().size() == 2) {
    numNodesWithTwoMembers++;
  }
  Member h4Member=h4.getCluster().getLocalMember();
  int numNodesThatKnowAboutH4=0;
  if (h1.getCluster().getMembers().contains(h4Member)) {
    numNodesThatKnowAboutH4++;
  }
  if (h2.getCluster().getMembers().contains(h4Member)) {
    numNodesThatKnowAboutH4++;
  }
  if (h3.getCluster().getMembers().contains(h4Member)) {
    numNodesThatKnowAboutH4++;
  }
  if (h4.getCluster().getMembers().contains(h4Member)) {
    numNodesThatKnowAboutH4++;
  }
  assertEquals(2,h4.getCluster().getMembers().size());
  assertEquals(2,numNodesWithTwoMembers);
  assertEquals(2,numNodesThatKnowAboutH4);
}
