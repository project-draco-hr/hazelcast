{
  final ClientNetworkConfig clientNetworkConfig=new ClientNetworkConfig();
  for (  Node child : new IterableNodeList(node.getChildNodes())) {
    final String nodeName=cleanNodeName(child);
    if ("cluster-members".equals(nodeName)) {
      handleClusterMembers(child,clientNetworkConfig);
    }
 else     if ("smart-routing".equals(nodeName)) {
      clientNetworkConfig.setSmartRouting(Boolean.parseBoolean(getTextContent(child)));
    }
 else     if ("redo-operation".equals(nodeName)) {
      clientNetworkConfig.setRedoOperation(Boolean.parseBoolean(getTextContent(child)));
    }
 else     if ("connection-timeout".equals(nodeName)) {
      clientNetworkConfig.setConnectionTimeout(Integer.parseInt(getTextContent(child)));
    }
 else     if ("connection-attempt-period".equals(nodeName)) {
      clientNetworkConfig.setConnectionAttemptPeriod(Integer.parseInt(getTextContent(child)));
    }
 else     if ("connection-attempt-limit".equals(nodeName)) {
      clientNetworkConfig.setConnectionAttemptLimit(Integer.parseInt(getTextContent(child)));
    }
 else     if ("socket-options".equals(nodeName)) {
      handleSocketOptions(child,clientNetworkConfig);
    }
 else     if ("socket-interceptor".equals(nodeName)) {
      handleSocketInterceptorConfig(child,clientNetworkConfig);
    }
 else     if ("ssl".equals(nodeName)) {
      handleSSLConfig(child,clientNetworkConfig);
    }
 else     if ("aws".equals(nodeName)) {
      handleAWS(child,clientNetworkConfig);
    }
  }
  clientConfig.setNetworkConfig(clientNetworkConfig);
}
