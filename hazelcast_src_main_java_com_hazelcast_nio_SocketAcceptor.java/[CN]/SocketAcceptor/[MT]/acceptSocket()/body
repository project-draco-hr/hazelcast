{
  if (!connectionManager.isLive())   return;
  SocketChannelWrapper socketChannelWrapper=null;
  try {
    final SocketChannel socketChannel=serverSocketChannel.accept();
    if (socketChannel != null) {
      socketChannelWrapper=connectionManager.wrapSocketChannel(socketChannel,false);
    }
  }
 catch (  Exception e) {
    if (e instanceof ClosedChannelException && !connectionManager.isLive()) {
      logger.finest("Terminating socket acceptor thread...",e);
    }
 else {
      String error="Unexpected error while accepting connection! " + e.getClass().getName() + ": "+ e.getMessage();
      logger.warning(error,e);
      connectionManager.ioService.getSystemLogService().logConnection(error);
      try {
        serverSocketChannel.close();
      }
 catch (      Exception ignore) {
      }
      connectionManager.ioService.onFatalError(e);
    }
  }
  if (socketChannelWrapper != null) {
    final SocketChannelWrapper socketChannel=socketChannelWrapper;
    log(Level.INFO,"Accepting socket connection from " + socketChannel.socket().getRemoteSocketAddress());
    final MemberSocketInterceptor memberSocketInterceptor=connectionManager.getMemberSocketInterceptor();
    if (memberSocketInterceptor == null) {
      try {
        initializeSocketChannel(socketChannel);
      }
 catch (      Exception e) {
        log(Level.WARNING,e.getClass().getName() + ": " + e.getMessage(),e);
        IOUtil.closeResource(socketChannel);
      }
    }
 else {
      connectionManager.ioService.executeAsync(new Runnable(){
        public void run(){
          try {
            log(Level.FINEST,"Calling member socket interceptor: " + memberSocketInterceptor + " for "+ socketChannel);
            memberSocketInterceptor.onAccept(socketChannel.socket());
            initializeSocketChannel(socketChannel);
          }
 catch (          Exception e) {
            log(Level.WARNING,e.getClass().getName() + ": " + e.getMessage(),e);
            IOUtil.closeResource(socketChannel);
          }
        }
      }
);
    }
  }
}
