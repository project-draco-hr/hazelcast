{
  if (!connectionManager.isLive())   return;
  SocketChannelWrapper socketChannelWrapper=null;
  try {
    final SocketChannel socketChannel=serverSocketChannel.accept();
    if (socketChannel != null) {
      socketChannelWrapper=connectionManager.wrapSocketChannel(socketChannel,false);
    }
  }
 catch (  Exception e) {
    if (e instanceof ClosedChannelException && !connectionManager.isLive()) {
      logger.log(Level.FINEST,"Terminating socket acceptor thread...",e);
    }
 else {
      String error="Unexpected error while accepting connection! " + e.getClass().getName() + ": "+ e.getMessage();
      logger.log(Level.WARNING,error,e);
      connectionManager.ioService.getSystemLogService().logConnection(error);
      try {
        serverSocketChannel.close();
      }
 catch (      Exception ignore) {
      }
      connectionManager.ioService.onFatalError(e);
    }
  }
  if (socketChannelWrapper != null) {
    final SocketChannelWrapper socketChannel=socketChannelWrapper;
    connectionManager.ioService.executeAsync(new Runnable(){
      public void run(){
        String message=socketChannel.socket().getLocalPort() + " is accepting socket connection from " + socketChannel.socket().getRemoteSocketAddress();
        log(Level.INFO,message);
        try {
          MemberSocketInterceptor memberSocketInterceptor=connectionManager.getMemberSocketInterceptor();
          if (memberSocketInterceptor != null) {
            log(Level.FINEST,"Calling member socket interceptor: " + memberSocketInterceptor + " for "+ socketChannel);
            memberSocketInterceptor.onAccept(socketChannel.socket());
          }
          socketChannel.configureBlocking(false);
          connectionManager.initSocket(socketChannel.socket());
          connectionManager.assignSocketChannel(socketChannel);
        }
 catch (        Exception e) {
          log(Level.WARNING,e.getClass().getName() + ": " + e.getMessage(),e);
          try {
            socketChannel.close();
          }
 catch (          IOException ignored) {
          }
        }
      }
    }
);
  }
}
