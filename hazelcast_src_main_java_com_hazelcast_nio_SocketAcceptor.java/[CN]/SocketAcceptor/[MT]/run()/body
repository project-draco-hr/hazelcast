{
  try {
    connectionManager.ioService.onIOThreadStart();
    selector=Selector.open();
    serverSocketChannel.configureBlocking(false);
    serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);
    System.err.println("Listening on " + serverSocketChannel);
    while (connectionManager.isLive()) {
      final int keyCount=selector.select();
      if (Thread.currentThread().isInterrupted()) {
        break;
      }
      if (keyCount == 0) {
        System.err.println("!!!! keys= " + 0);
        continue;
      }
      final Set<SelectionKey> setSelectedKeys=selector.selectedKeys();
      final Iterator<SelectionKey> it=setSelectedKeys.iterator();
      while (it.hasNext()) {
        final SelectionKey sk=it.next();
        it.remove();
        if (sk.isValid() && sk.isAcceptable()) {
          acceptSocket();
        }
      }
    }
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    connectionManager.ioService.getSystemLogService().logConnection(e.getClass().getName() + ": " + e.getMessage());
  }
 finally {
    try {
      logger.log(Level.FINEST,"Closing selector " + Thread.currentThread().getName());
      selector.close();
    }
 catch (    final Exception ignored) {
    }
  }
}
