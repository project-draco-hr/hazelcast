{
  final ClientNetworkConfig networkConfig=client.getClientConfig().getNetworkConfig();
  final int connAttemptLimit=networkConfig.getConnectionAttemptLimit();
  final int connectionAttemptPeriod=networkConfig.getConnectionAttemptPeriod();
  final int connectionAttemptLimit=connAttemptLimit == 0 ? Integer.MAX_VALUE : connAttemptLimit;
  int attempt=0;
  Throwable lastError=null;
  while (true) {
    final long nextTry=Clock.currentTimeMillis() + connectionAttemptPeriod;
    final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
    for (    InetSocketAddress isa : socketAddresses) {
      Address address=new Address(isa);
      try {
        final ClientConnection connection=connectionManager.ownerConnection(address);
        clusterService.fireConnectionEvent(false);
        return connection;
      }
 catch (      IOException e) {
        lastError=e;
        LOGGER.finest("IO error during initial connection...",e);
      }
catch (      HazelcastInstanceNotActiveException e) {
        lastError=e;
        LOGGER.finest("Instance not active during initial connection...",e);
      }
catch (      AuthenticationException e) {
        lastError=e;
        LOGGER.warning("Authentication error on " + address,e);
      }
catch (      HazelcastException e) {
        lastError=e;
        LOGGER.finest("Timeout during initial connection...",e);
      }
    }
    if (attempt++ >= connectionAttemptLimit) {
      break;
    }
    final long remainingTime=nextTry - Clock.currentTimeMillis();
    LOGGER.warning(String.format("Unable to get alive cluster connection," + " try in %d ms later, attempt %d of %d.",Math.max(0,remainingTime),attempt,connectionAttemptLimit));
    if (remainingTime > 0) {
      try {
        Thread.sleep(remainingTime);
      }
 catch (      InterruptedException e) {
        break;
      }
    }
  }
  throw new IllegalStateException("Unable to connect to any address in the config!",lastError);
}
