{
  this.ioService=ioService;
  this.serverSocketChannel=serverSocketChannel;
  this.logger=ioService.getLogger(ConnectionManager.class.getName());
  this.SOCKET_RECEIVE_BUFFER_SIZE=ioService.getSocketReceiveBufferSize() * KILO_BYTE;
  this.SOCKET_SEND_BUFFER_SIZE=ioService.getSocketSendBufferSize() * KILO_BYTE;
  this.SOCKET_LINGER_SECONDS=ioService.getSocketLingerSeconds();
  this.SOCKET_KEEP_ALIVE=ioService.getSocketKeepAlive();
  this.SOCKET_NO_DELAY=ioService.getSocketNoDelay();
  int selectorCount=ioService.getSelectorThreadCount();
  selectors=new InOutSelector[selectorCount];
  final Collection<Integer> ports=ioService.getOutboundPorts();
  outboundPortCount=ports == null ? 0 : ports.size();
  if (ports != null) {
    outboundPorts.addAll(ports);
  }
  SSLConfig sslConfig=ioService.getSSLConfig();
  if (sslConfig != null && sslConfig.isEnabled()) {
    socketChannelWrapperFactory=new SSLSocketChannelWrapperFactory(sslConfig);
    logger.log(Level.INFO,"SSL is enabled");
  }
 else {
    socketChannelWrapperFactory=new DefaultSocketChannelWrapperFactory();
  }
  SocketInterceptorConfig sic=ioService.getSocketInterceptorConfig();
  if (sic != null && sic.isEnabled()) {
    SocketInterceptor implementation=(SocketInterceptor)sic.getImplementation();
    if (implementation == null && sic.getClassName() != null) {
      try {
        implementation=(SocketInterceptor)Class.forName(sic.getClassName()).newInstance();
      }
 catch (      Throwable e) {
        logger.log(Level.SEVERE,"SocketInterceptor class cannot be instantiated!" + sic.getClassName(),e);
      }
    }
    if (implementation != null) {
      if (!(implementation instanceof MemberSocketInterceptor)) {
        logger.log(Level.SEVERE,"SocketInterceptor must be instance of " + MemberSocketInterceptor.class.getName());
        implementation=null;
      }
 else {
        logger.log(Level.INFO,"SocketInterceptor is enabled");
      }
    }
    if (implementation != null) {
      memberSocketInterceptor=(MemberSocketInterceptor)implementation;
      memberSocketInterceptor.init(sic);
    }
 else {
      memberSocketInterceptor=null;
    }
  }
 else {
    memberSocketInterceptor=null;
  }
}
