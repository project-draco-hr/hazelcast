{
  int noOfThreads=25;
  final CountDownLatch latch=new CountDownLatch(noOfThreads);
  final AtomicInteger noOfFailures=new AtomicInteger();
  for (int i=0; i < noOfThreads; i++) {
    new Thread(){
      @Override public void run(){
        ReplicatedMapTest test=new ReplicatedMapTest();
        try {
          test.testRemoveBinaryDelayDefault();
        }
 catch (        Exception e) {
          noOfFailures.incrementAndGet();
        }
catch (        Error e) {
          noOfFailures.incrementAndGet();
        }
 finally {
          latch.countDown();
        }
      }
    }
.start();
  }
  assertOpenEventually(latch,60);
  assertEquals(0,noOfFailures.get());
}
