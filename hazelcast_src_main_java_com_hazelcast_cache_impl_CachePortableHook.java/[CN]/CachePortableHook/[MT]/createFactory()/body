{
  return new PortableFactory(){
    final ConstructorFunction<Integer,Portable>[] constructors=new ConstructorFunction[LEN];
{
      constructors[GET]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheGetRequest();
        }
      }
;
      constructors[PUT]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CachePutRequest();
        }
      }
;
      constructors[PUT_IF_ABSENT]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CachePutIfAbsentRequest();
        }
      }
;
      constructors[REMOVE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheRemoveRequest();
        }
      }
;
      constructors[GET_AND_REMOVE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheGetAndRemoveRequest();
        }
      }
;
      constructors[REPLACE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheReplaceRequest();
        }
      }
;
      constructors[GET_AND_REPLACE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheGetAndReplaceRequest();
        }
      }
;
      constructors[SIZE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheSizeRequest();
        }
      }
;
      constructors[CLEAR]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheClearRequest();
        }
      }
;
      constructors[CONTAINS_KEY]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheContainsKeyRequest();
        }
      }
;
      constructors[ITERATE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheIterateRequest();
        }
      }
;
      constructors[ADD_INVALIDATION_LISTENER]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheAddInvalidationListenerRequest();
        }
      }
;
      constructors[INVALIDATION_MESSAGE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheSingleInvalidationMessage();
        }
      }
;
      constructors[REMOVE_INVALIDATION_LISTENER]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheRemoveInvalidationListenerRequest();
        }
      }
;
      constructors[BATCH_INVALIDATION_MESSAGE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheBatchInvalidationMessage();
        }
      }
;
      constructors[CREATE_CONFIG]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheCreateConfigRequest();
        }
      }
;
      constructors[GET_CONFIG]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheGetConfigRequest();
        }
      }
;
      constructors[GET_ALL]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheGetAllRequest();
        }
      }
;
      constructors[LOAD_ALL]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheLoadAllRequest();
        }
      }
;
      constructors[ENTRY_PROCESSOR]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheEntryProcessorRequest();
        }
      }
;
      constructors[MANAGEMENT_CONFIG]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheManagementConfigRequest();
        }
      }
;
      constructors[ADD_ENTRY_LISTENER]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheAddEntryListenerRequest();
        }
      }
;
      constructors[REMOVE_ENTRY_LISTENER]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheRemoveEntryListenerRequest();
        }
      }
;
      constructors[LISTENER_REGISTRATION]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheListenerRegistrationRequest();
        }
      }
;
      constructors[DESTROY_CACHE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new CacheDestroyRequest();
        }
      }
;
    }
    public Portable create(    int classId){
      if (constructors[classId] == null) {
        throw new IllegalArgumentException("No registered constructor with class id:" + classId);
      }
      return (classId > 0 && classId <= constructors.length) ? constructors[classId].createNew(classId) : null;
    }
  }
;
}
