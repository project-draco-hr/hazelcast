{
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  Set<Integer> testKeys=new HashSet<Integer>(DEFAULT_RECORD_COUNT);
  Set<Integer> loadKeys=new HashSet<Integer>(DEFAULT_RECORD_COUNT / 2);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    if (i % 2 == 0) {
      loadKeys.add(i);
    }
    testKeys.add(i);
  }
  for (  int i : testKeys) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  final CountDownLatch completed=new CountDownLatch(1);
  nearCacheTestContext1.cache.loadAll(loadKeys,true,new CompletionListener(){
    @Override public void onCompletion(){
      completed.countDown();
    }
    @Override public void onException(    Exception e){
    }
  }
);
  completed.await(3,TimeUnit.SECONDS);
  for (  int i : loadKeys) {
    final int key=i;
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        Data keyData=nearCacheTestContext2.serializationService.toData(key);
        assertNull(nearCacheTestContext2.nearCache.get(keyData));
      }
    }
);
  }
}
