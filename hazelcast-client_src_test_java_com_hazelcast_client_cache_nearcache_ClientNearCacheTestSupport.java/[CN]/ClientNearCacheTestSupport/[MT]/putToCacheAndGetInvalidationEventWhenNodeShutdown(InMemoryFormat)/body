{
  Config config=createConfig();
  config.setProperty(GroupProperty.CACHE_INVALIDATION_MESSAGE_BATCH_SIZE.getName(),String.valueOf(Integer.MAX_VALUE));
  config.setProperty(CACHE_INVALIDATION_MESSAGE_BATCH_FREQUENCY_SECONDS.getName(),String.valueOf(Integer.MAX_VALUE));
  HazelcastInstance instanceToShutdown=hazelcastFactory.newHazelcastInstance(config);
  warmUpPartitions(serverInstance,instanceToShutdown);
  waitAllForSafeState(serverInstance,instanceToShutdown);
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setLocalUpdatePolicy(LocalUpdatePolicy.CACHE);
  final NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  Map<String,String> keyAndValues=new HashMap<String,String>();
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    String key=generateKeyOwnedBy(instanceToShutdown);
    String value=generateValueFromKey(i);
    nearCacheTestContext1.cache.put(key,value);
    keyAndValues.put(key,value);
  }
  for (  Map.Entry<String,String> entry : keyAndValues.entrySet()) {
    String key=entry.getKey();
    String exceptedValue=entry.getValue();
    String actualValue=nearCacheTestContext1.nearCache.get(nearCacheTestContext1.serializationService.toData(key));
    assertEquals(exceptedValue,actualValue);
  }
  for (  Map.Entry<String,String> entry : keyAndValues.entrySet()) {
    nearCacheTestContext2.cache.remove(entry.getKey());
  }
  ((LifecycleServiceImpl)instanceToShutdown.getLifecycleService()).fireLifecycleEvent(LifecycleEvent.LifecycleState.SHUTTING_DOWN);
  for (  Map.Entry<String,String> entry : keyAndValues.entrySet()) {
    final String key=entry.getKey();
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        Data keyData=nearCacheTestContext1.serializationService.toData(key);
        assertNull(nearCacheTestContext1.nearCache.get(keyData));
      }
    }
);
  }
}
