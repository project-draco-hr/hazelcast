{
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat).setCacheLocalEntries(true);
  final NearCacheTestContext context=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    context.cache.put(i,"value-" + i);
  }
  final CountDownLatch countDownLatch=new CountDownLatch(threadCount);
  Runnable task=new Runnable(){
    @Override public void run(){
      for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
        context.cache.get(i);
      }
      countDownLatch.countDown();
    }
  }
;
  ExecutorService executorService=newFixedThreadPool(threadCount);
  for (int i=0; i < threadCount; i++) {
    executorService.execute(task);
  }
  assertOpenEventually(countDownLatch);
  if (inMemoryFormat != InMemoryFormat.OBJECT) {
    assertTrue("The Near Cache is filled, there should be some heap costs",context.cache.getLocalCacheStatistics().getNearCacheStatistics().getOwnedEntryMemoryCost() > 0);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    context.cache.remove(i);
  }
  assertEquals("The Near Cache is empty, there should be no heap costs",0,context.cache.getLocalCacheStatistics().getNearCacheStatistics().getOwnedEntryMemoryCost());
}
