{
  if (state == NO_TXN || state == ROLLED_BACK) {
    throw new IllegalStateException("Transaction is not active");
  }
  state=ROLLING_BACK;
  try {
    List<TransactionLogRecord> recordList=transactionLog.getRecordList();
    List<Future> futures=new ArrayList<Future>(recordList.size());
    ListIterator<TransactionLogRecord> iterator=recordList.listIterator(recordList.size());
    while (iterator.hasPrevious()) {
      TransactionLogRecord record=iterator.previous();
      futures.add(record.rollback(nodeEngine));
    }
    waitWithDeadline(futures,ROLLBACK_TIMEOUT_MINUTES,TimeUnit.MINUTES,rollbackExceptionHandler);
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
 finally {
    state=ROLLED_BACK;
  }
}
