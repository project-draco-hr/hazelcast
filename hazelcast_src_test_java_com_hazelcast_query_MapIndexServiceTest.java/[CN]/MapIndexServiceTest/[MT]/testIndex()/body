{
  MapIndexService mapIndexService=new MapIndexService();
  Map<Expression,Index> indexes=mapIndexService.getIndexes();
  assertFalse(mapIndexService.hasIndexedAttributes());
  Expression nameExpression=Predicates.get("name");
  Expression ageExpression=Predicates.get("age");
  Expression salaryExpression=Predicates.get("salary");
  mapIndexService.addIndex(nameExpression,false,0);
  mapIndexService.addIndex(ageExpression,true,1);
  mapIndexService.addIndex(salaryExpression,true,2);
  assertTrue(indexes.containsKey(nameExpression));
  assertTrue(indexes.containsKey(ageExpression));
  assertTrue(indexes.containsKey(salaryExpression));
  assertTrue(mapIndexService.hasIndexedAttributes());
  for (int i=0; i < 200000; i++) {
    Employee employee=new Employee(i + "Name",i % 80,(i % 2 == 0),100 + i);
    Record record=newRecord(i,"key" + i,employee);
    record.setIndexes(mapIndexService.getIndexValues(employee),mapIndexService.getIndexTypes());
    mapIndexService.index(record);
  }
  System.out.println("done");
  long total=Runtime.getRuntime().totalMemory();
  long free=Runtime.getRuntime().freeMemory();
  System.out.println("Used Memory:" + ((total - free) / 1024 / 1024));
  for (int i=0; i < 10000; i++) {
    long start=System.currentTimeMillis();
    QueryContext queryContext=new QueryContext("default",new SqlPredicate("salary = 121 and age between 20 and 23"));
    Set<MapEntry> results=mapIndexService.doQuery(queryContext);
    System.out.println("result size " + results.size() + " took "+ (System.currentTimeMillis() - start));
  }
}
