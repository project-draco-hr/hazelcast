{
  PartitionStateGenerator generator=new PartitionStateGeneratorImpl();
  int maxSameHostCount=3;
  int[] partitionCounts=new int[]{271,787,1549,3217};
  int[] members=new int[]{3,6,9,10,11,17,57,100,130,77,179,93,37,26,15,5};
  for (  int partitionCount : partitionCounts) {
    int memberCount=members[0];
    List<Member> memberList=createMembers(memberCount,maxSameHostCount);
    Collection<MemberGroup> groups=memberGroupFactory.createMemberGroups(memberList);
    Address[][] state=generator.arrange(groups,emptyPartitionArray(partitionCount));
    checkTestResult(state,groups,partitionCount);
    int previousMemberCount=memberCount;
    for (int j=1; j < members.length; j++) {
      memberCount=members[j];
      if (partitionCount / memberCount < 10) {
        break;
      }
      if ((float)partitionCount / memberCount > 2) {
        if (previousMemberCount == 0) {
          memberList=createMembers(memberCount,maxSameHostCount);
        }
 else         if (memberCount > previousMemberCount) {
          MemberImpl last=(MemberImpl)memberList.get(previousMemberCount - 1);
          List<Member> extra=createMembers(last,(memberCount - previousMemberCount),maxSameHostCount);
          memberList.addAll(extra);
        }
 else {
          List<Member> removedMembers=memberList.subList(memberCount,memberList.size());
          memberList=memberList.subList(0,memberCount);
          remove(state,removedMembers);
        }
        groups=memberGroupFactory.createMemberGroups(memberList);
        state=generator.arrange(groups,toPartitionArray(state));
        checkTestResult(state,groups,partitionCount);
        previousMemberCount=memberCount;
      }
    }
  }
}
