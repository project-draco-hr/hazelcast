{
  try {
    ClientContext context=getContext();
    ClientInvocationService cis=context.getInvocationService();
    ClientMapReduceRequest request=new ClientMapReduceRequest(name,jobId,keys,predicate,mapper,combinerFactory,reducerFactory,keyValueSource,chunkSize);
    final ClientCompletableFuture completableFuture=new ClientCompletableFuture();
    cis.invokeOnRandomTarget(request,new ResponseHandler(){
      @Override public void handle(      ResponseStream stream) throws Exception {
        try {
          Object event=stream.read();
          if (collator != null) {
            event=collator.collate(((Map)event).entrySet());
          }
          completableFuture.setResult(event);
        }
 catch (        Exception e) {
          try {
            stream.end();
          }
 catch (          IOException ignored) {
          }
          if (ErrorHandler.isRetryable(e)) {
            throw e;
          }
        }
      }
    }
);
    return completableFuture;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
