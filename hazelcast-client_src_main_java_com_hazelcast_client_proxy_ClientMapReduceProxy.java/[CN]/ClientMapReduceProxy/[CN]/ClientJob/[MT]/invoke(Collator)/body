{
  try {
    ClientContext context=getContext();
    ClientInvocationService cis=context.getInvocationService();
    ClientMapReduceRequest request=new ClientMapReduceRequest(name,jobId,keys,predicate,mapper,combinerFactory,reducerFactory,keyValueSource,chunkSize);
    final ClientCompletableFuture completableFuture=new ClientCompletableFuture(jobId);
    ClientCallFuture future=(ClientCallFuture)cis.invokeOnRandomTarget(request,new EventHandler(){
      @Override public void handle(      Object event){
        if (collator != null) {
          event=collator.collate(((Map)event).entrySet());
        }
        completableFuture.setResult(event);
        trackableJobs.remove(getJobId());
      }
    }
);
    Address runningMember=future.getConnection().getRemoteEndpoint();
    trackableJobs.putIfAbsent(jobId,new ClientTrackableJob<T>(jobId,runningMember,completableFuture));
    return completableFuture;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
