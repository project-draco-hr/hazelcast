{
  Map<String,MemberGroup> groups=new HashMap<String,MemberGroup>();
  for (  Member member : allMembers) {
    final String zoneInfo=member.getStringAttribute(PartitionGroupMetaData.PARTITION_GROUP_ZONE);
    final String rackInfo=member.getStringAttribute(PartitionGroupMetaData.PARTITION_GROUP_RACK);
    final String hostInfo=member.getStringAttribute(PartitionGroupMetaData.PARTITION_GROUP_HOST);
    if (zoneInfo == null && rackInfo == null && hostInfo == null) {
      throw new IllegalArgumentException("Not enough metadata information is provided. " + "At least one of availability zone, rack or host information must be provided " + "with ZONE_AWARE partition group.");
    }
    if (zoneInfo != null) {
      MemberGroup group=groups.get(zoneInfo);
      if (group == null) {
        group=new DefaultMemberGroup();
        groups.put(zoneInfo,group);
      }
      group.addMember(member);
    }
 else {
      if (rackInfo != null) {
        MemberGroup group=groups.get(rackInfo);
        if (group == null) {
          group=new DefaultMemberGroup();
          groups.put(rackInfo,group);
        }
        group.addMember(member);
      }
 else {
        if (hostInfo != null) {
          MemberGroup group=groups.get(hostInfo);
          if (group == null) {
            group=new DefaultMemberGroup();
            groups.put(hostInfo,group);
          }
          group.addMember(member);
        }
      }
    }
  }
  return new HashSet<MemberGroup>(groups.values());
}
