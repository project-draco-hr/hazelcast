{
  int size=in.readInt();
  data=new HashMap<String,Set<RecordReplicationInfo>>(size);
  for (int i=0; i < size; i++) {
    String name=in.readUTF();
    int mapSize=in.readInt();
    Set<RecordReplicationInfo> recordReplicationInfos=new HashSet<RecordReplicationInfo>(mapSize);
    for (int j=0; j < mapSize; j++) {
      RecordReplicationInfo recordReplicationInfo=in.readObject();
      recordReplicationInfos.add(recordReplicationInfo);
    }
    data.put(name,recordReplicationInfos);
  }
  size=in.readInt();
  mapInitialLoadInfo=new HashMap<String,Boolean>(size);
  for (int i=0; i < size; i++) {
    String name=in.readUTF();
    boolean loaded=in.readBoolean();
    mapInitialLoadInfo.put(name,loaded);
  }
  size=in.readInt();
  delayedEntries=new HashMap<String,List<DelayedEntry>>(size);
  for (int i=0; i < size; i++) {
    final String mapName=in.readUTF();
    final int listSize=in.readInt();
    final List<DelayedEntry> delayedEntriesList=new ArrayList<DelayedEntry>(listSize);
    for (int j=0; j < listSize; j++) {
      final Data key=IOUtil.readNullableData(in);
      final Data value=IOUtil.readNullableData(in);
      final long storeTime=in.readLong();
      final int partitionId=in.readInt();
      final DelayedEntry<Data,Data> entry=DelayedEntry.create(key,value,storeTime,partitionId);
      delayedEntriesList.add(entry);
    }
    delayedEntries.put(mapName,delayedEntriesList);
  }
}
