{
  long now=System.currentTimeMillis();
  int ownedEntryCount=0;
  int backupEntryCount=0;
  int markedAsRemovedEntryCount=0;
  int ownedEntryMemoryCost=0;
  int backupEntryMemoryCost=0;
  int markedAsRemovedMemoryCost=0;
  int hits=0;
  int lockedEntryCount=0;
  int lockWaitCount=0;
  ClusterImpl clusterImpl=node.getClusterImpl();
  for (  Record record : mapRecords.values()) {
    if (!record.isActive() || !record.isValid(now)) {
      markedAsRemovedEntryCount++;
      markedAsRemovedMemoryCost+=record.getCost();
    }
 else {
      if (concurrentMapManager.isOwned(record)) {
        ownedEntryCount+=record.valueCount();
        ownedEntryMemoryCost+=record.getCost();
        localMapStats.setLastAccessTime(record.getLastAccessTime());
        localMapStats.setLastUpdateTime(record.getLastUpdateTime());
        hits+=record.getHits();
        if (record.isLocked()) {
          lockedEntryCount++;
          lockWaitCount+=record.getScheduledActionCount();
        }
      }
 else {
        backupEntryCount+=record.valueCount();
        backupEntryMemoryCost+=record.getCost();
      }
    }
  }
  localMapStats.setMarkedAsRemovedEntryCount(markedAsRemovedEntryCount);
  localMapStats.setMarkedAsRemovedMemoryCost(markedAsRemovedMemoryCost);
  localMapStats.setLockWaitCount(lockWaitCount);
  localMapStats.setLockedEntryCount(lockedEntryCount);
  localMapStats.setHits(hits);
  localMapStats.setOwnedEntryCount(ownedEntryCount);
  localMapStats.setBackupEntryCount(backupEntryCount);
  localMapStats.setOwnedEntryMemoryCost(ownedEntryMemoryCost);
  localMapStats.setBackupEntryMemoryCost(backupEntryMemoryCost);
  localMapStats.setLastEvictionTime(clusterImpl.getClusterTimeFor(lastEvictionTime));
  localMapStats.setCreationTime(clusterImpl.getClusterTimeFor(creationTime));
}
