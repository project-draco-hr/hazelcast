{
  LocalMapStatsImpl localMapStats=new LocalMapStatsImpl();
  long now=System.currentTimeMillis();
  long ownedEntryCount=0;
  long backupEntryCount=0;
  long markedAsRemovedEntryCount=0;
  long dirtyCount=0;
  long ownedEntryMemoryCost=0;
  long backupEntryMemoryCost=0;
  long markedAsRemovedMemoryCost=0;
  long hits=0;
  long lockedEntryCount=0;
  long lockWaitCount=0;
  ClusterImpl clusterImpl=node.getClusterImpl();
  final Collection<Record> records=mapRecords.values();
  final PartitionManager partitionManager=concurrentMapManager.partitionManager;
  for (  Record record : records) {
    if (!record.isActive() || !record.isValid(now)) {
      markedAsRemovedEntryCount++;
      markedAsRemovedMemoryCost+=record.getCost();
    }
 else {
      PartitionInfo partition=partitionManager.getPartition(record.getBlockId());
      Address owner=partition.getOwner();
      if (owner != null && thisAddress.equals(owner)) {
        if (store != null && record.getLastStoredTime() < Math.max(record.getLastUpdateTime(),record.getCreationTime())) {
          dirtyCount++;
        }
        ownedEntryCount+=record.valueCount();
        ownedEntryMemoryCost+=record.getCost();
        localMapStats.setLastAccessTime(record.getLastAccessTime());
        localMapStats.setLastUpdateTime(record.getLastUpdateTime());
        hits+=record.getHits();
        if (record.isLocked()) {
          lockedEntryCount++;
          lockWaitCount+=record.getScheduledActionCount();
        }
      }
 else       if (partition.isBackup(thisAddress,backupCount)) {
        if (record.valueCount() > 0) {
          backupEntryCount+=record.valueCount();
          backupEntryMemoryCost+=record.getCost();
        }
      }
    }
  }
  localMapStats.setDirtyEntryCount(zeroOrPositive(dirtyCount));
  localMapStats.setMarkedAsRemovedEntryCount(zeroOrPositive(markedAsRemovedEntryCount));
  localMapStats.setMarkedAsRemovedMemoryCost(zeroOrPositive(markedAsRemovedMemoryCost));
  localMapStats.setLockWaitCount(zeroOrPositive(lockWaitCount));
  localMapStats.setLockedEntryCount(zeroOrPositive(lockedEntryCount));
  localMapStats.setHits(zeroOrPositive(hits));
  localMapStats.setOwnedEntryCount(zeroOrPositive(ownedEntryCount));
  localMapStats.setBackupEntryCount(zeroOrPositive(backupEntryCount));
  localMapStats.setOwnedEntryMemoryCost(zeroOrPositive(ownedEntryMemoryCost));
  localMapStats.setBackupEntryMemoryCost(zeroOrPositive(backupEntryMemoryCost));
  localMapStats.setLastEvictionTime(zeroOrPositive(clusterImpl.getClusterTimeFor(lastEvictionTime)));
  localMapStats.setCreationTime(zeroOrPositive(clusterImpl.getClusterTimeFor(creationTime)));
  return localMapStats;
}
