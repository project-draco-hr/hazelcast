{
  long now=System.currentTimeMillis();
  if (!force && ((now - lastEvictionTime) < evictionDelayMillis)) {
    return;
  }
  if (name.startsWith("c:__hz")) {
    return;
  }
  if (locallyOwnedMap != null) {
    locallyOwnedMap.evict(now);
  }
  if (mapNearCache != null) {
    mapNearCache.evict(now,true);
  }
  lastEvictionTime=now;
  if (evictionCount.get() != 0)   return;
  List<Record> lsRecordsToEvict=null;
  if (evictionPolicy == SortedHashMap.OrderingType.NONE) {
    if (ttl != 0 || maxIdle != 0 || ttlPerRecord) {
      Collection<Record> values=mapRecords.values();
      int evictedCount=0;
      loopRecords:       for (      Record record : values) {
        if (ownedRecords.contains(record) && record.isActive() && !record.isValid(now)) {
          if (record.isEvictable()) {
            if (lsRecordsToEvict == null) {
              lsRecordsToEvict=new ArrayList<Record>(100);
            }
            Block block=blocks[record.getBlockId()];
            if (block != null && !block.isMigrating()) {
              lsRecordsToEvict.add(record);
              if (++evictedCount >= 10000) {
                break loopRecords;
              }
            }
          }
        }
      }
    }
  }
 else {
    Collection<Record> records=mapRecords.values();
    int numberOfRecordsToEvict=(int)(ownedRecords.size() * evictionRate);
    int evictedCount=0;
    loopRecords:     for (    Record record : records) {
      if (ownedRecords.contains(record) && record.isActive() && record.isEvictable()) {
        if (lsRecordsToEvict == null) {
          lsRecordsToEvict=new ArrayList<Record>(numberOfRecordsToEvict);
        }
        lsRecordsToEvict.add(record);
        if (++evictedCount >= numberOfRecordsToEvict) {
          break loopRecords;
        }
      }
    }
  }
  if (lsRecordsToEvict != null && lsRecordsToEvict.size() > 0) {
    logger.log(Level.INFO,lsRecordsToEvict.size() + " evicting");
    evictionCount.set(lsRecordsToEvict.size());
    for (    final Record recordToEvict : lsRecordsToEvict) {
      concurrentMapManager.evictAsync(this,recordToEvict.getName(),recordToEvict.getKey());
    }
  }
}
