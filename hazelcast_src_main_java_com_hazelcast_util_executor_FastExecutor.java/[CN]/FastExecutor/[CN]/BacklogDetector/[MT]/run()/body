{
  long currentBacklogInterval=backlogInterval;
  final Thread thread=Thread.currentThread();
  int k=0;
  while (!thread.isInterrupted() && live) {
    long sleep=100;
    final WorkerTask task=queue.peek();
    if (task != null) {
      if (task.creationTime + currentBacklogInterval < Clock.currentTimeMillis()) {
        if (activeThreadCount < maxThreadSize) {
          final WorkerLifecycleInterceptor workerInterceptor=interceptor;
          if (workerInterceptor != null) {
            workerInterceptor.beforeWorkerStart();
          }
          addWorker(true);
        }
      }
    }
    try {
      Thread.sleep(sleep);
      if (k++ % 1000 == 0) {
        System.err.println("DEBUG: Current operation thread count-> " + activeThreadCount);
      }
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}
