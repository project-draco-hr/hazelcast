{
  return new EventService(){
    @Override public int getEventThreadCount(){
      return 0;
    }
    @Override public int getEventQueueCapacity(){
      return 0;
    }
    @Override public int getEventQueueSize(){
      return 0;
    }
    @Override public EventRegistration registerLocalListener(    String serviceName,    String topic,    Object listener){
      return null;
    }
    @Override public EventRegistration registerLocalListener(    String serviceName,    String topic,    EventFilter filter,    Object listener){
      return null;
    }
    @Override public EventRegistration registerListener(    String serviceName,    String topic,    Object listener){
      return null;
    }
    @Override public EventRegistration registerListener(    String serviceName,    String topic,    EventFilter filter,    Object listener){
      return null;
    }
    @Override public boolean deregisterListener(    String serviceName,    String topic,    Object id){
      return false;
    }
    @Override public void deregisterAllListeners(    String serviceName,    String topic){
    }
    @Override public Collection<EventRegistration> getRegistrations(    String serviceName,    String topic){
      return null;
    }
    @Override public EventRegistration[] getRegistrationsAsArray(    String serviceName,    String topic){
      return new EventRegistration[0];
    }
    @Override public boolean hasEventRegistration(    String serviceName,    String topic){
      return false;
    }
    @Override public void publishEvent(    String serviceName,    String topic,    Object event,    int orderKey){
    }
    @Override public void publishEvent(    String serviceName,    EventRegistration registration,    Object event,    int orderKey){
    }
    @Override public void publishEvent(    String serviceName,    Collection<EventRegistration> registrations,    Object event,    int orderKey){
    }
    @Override public void publishRemoteEvent(    String serviceName,    Collection<EventRegistration> registrations,    Object event,    int orderKey){
    }
    @Override public void executeEventCallback(    Runnable callback){
      new Thread(callback).start();
    }
  }
;
}
