{
  logger.finest("Claiming myself as master node!");
  claimingMaster=true;
  Collection<Future<Boolean>> responses=new LinkedList<Future<Boolean>>();
  for (  Address address : possibleAddresses) {
    if (isBlacklisted(address)) {
      continue;
    }
    if (node.getConnectionManager().getConnection(address) != null) {
      Future future=node.nodeEngine.getOperationService().createInvocationBuilder(ClusterServiceImpl.SERVICE_NAME,new MasterClaimOperation(),address).setTryCount(1).invoke();
      responses.add(future);
    }
  }
  final long maxWait=TimeUnit.SECONDS.toMillis(10);
  long waitTime=0L;
  boolean consensus=true;
  for (  Future<Boolean> response : responses) {
    long t=Clock.currentTimeMillis();
    try {
      consensus=response.get(1,TimeUnit.SECONDS);
    }
 catch (    Exception e) {
      logger.finest(e);
      consensus=false;
    }
 finally {
      waitTime+=(Clock.currentTimeMillis() - t);
    }
    if (!consensus) {
      break;
    }
    if (waitTime > maxWait) {
      consensus=false;
      break;
    }
  }
  return consensus;
}
