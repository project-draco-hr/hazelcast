{
  ValidationUtil.isNotNull(key,"key");
  ValidationUtil.isNotNull(value,"value");
  ValidationUtil.isNotNull(timeUnit,"timeUnit");
  if (ttl < 0) {
    throw new IllegalArgumentException("ttl must be a positive integer");
  }
  long time=System.currentTimeMillis();
  storage.checkState();
  V oldValue=null;
  K marshalledKey=(K)marshallKey(key);
  V marshalledValue=(V)marshallValue(value);
synchronized (getMutex(marshalledKey)) {
    final long ttlMillis=ttl == 0 ? 0 : timeUnit.toMillis(ttl);
    final ReplicatedRecord old=storage.get(marshalledKey);
    final VectorClock vectorClock;
    if (old == null) {
      vectorClock=new VectorClock();
      ReplicatedRecord<K,V> record=new ReplicatedRecord(marshalledKey,marshalledValue,vectorClock,localMemberHash,ttlMillis);
      storage.put(marshalledKey,record);
    }
 else {
      oldValue=(V)old.getValue();
      vectorClock=old.getVectorClock();
      storage.get(marshalledKey).setValue(marshalledValue,localMemberHash,ttlMillis);
    }
    if (ttlMillis > 0) {
      scheduleTtlEntry(ttlMillis,marshalledKey,null);
    }
 else {
      cancelTtlEntry(marshalledKey);
    }
    vectorClock.incrementClock(localMember);
    ReplicationMessage message=new ReplicationMessage(getName(),key,value,vectorClock,localMember,localMemberHash,ttlMillis);
    replicationPublisher.publishReplicatedMessage(message);
  }
  Object unmarshalledOldValue=unmarshallValue(oldValue);
  fireEntryListenerEvent(key,unmarshalledOldValue,value);
  if (replicatedMapConfig.isStatisticsEnabled()) {
    mapStats.incrementPuts(System.currentTimeMillis() - time);
  }
  return unmarshalledOldValue;
}
