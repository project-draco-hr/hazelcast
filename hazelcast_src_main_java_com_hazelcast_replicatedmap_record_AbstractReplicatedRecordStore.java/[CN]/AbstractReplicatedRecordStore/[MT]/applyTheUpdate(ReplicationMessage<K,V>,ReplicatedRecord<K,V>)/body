{
  VectorClock localVectorClock=localEntry.getVectorClock();
  VectorClock remoteVectorClock=update.getVectorClock();
  K marshalledKey=(K)marshallKey(update.getKey());
  V marshalledValue=(V)marshallValue(update.getValue());
  long ttlMillis=update.getTtlMillis();
  Object oldValue=localEntry.setValue(marshalledValue,update.getUpdateHash(),ttlMillis);
  applyVector(remoteVectorClock,localVectorClock);
  if (ttlMillis > 0) {
    scheduleTtlEntry(ttlMillis,marshalledKey,null);
  }
 else {
    cancelTtlEntry(marshalledKey);
  }
  V unmarshalledOldValue=(V)unmarshallValue(oldValue);
  if (unmarshalledOldValue == null || !unmarshalledOldValue.equals(update.getValue()) || update.getTtlMillis() != localEntry.getTtlMillis()) {
    fireEntryListenerEvent(update.getKey(),unmarshalledOldValue,update.getValue());
  }
}
