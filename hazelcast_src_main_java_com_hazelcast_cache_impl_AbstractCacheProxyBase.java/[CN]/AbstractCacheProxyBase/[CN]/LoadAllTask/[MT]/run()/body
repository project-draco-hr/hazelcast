{
  try {
    injectDependencies(completionListener);
    OperationService operationService=getNodeEngine().getOperationService();
    OperationFactory operationFactory;
    IPartitionService partitionService=getNodeEngine().getPartitionService();
    Map<Address,List<Integer>> memberPartitionsMap=partitionService.getMemberPartitionsMap();
    Map<Integer,Object> results=new HashMap<Integer,Object>();
    for (    Entry<Address,List<Integer>> memberPartitions : memberPartitionsMap.entrySet()) {
      Set<Integer> partitions=new HashSet<Integer>(memberPartitions.getValue());
      Set<Data> ownerKeys=filterOwnerKeys(partitionService,partitions);
      operationFactory=operationProvider.createLoadAllOperationFactory(ownerKeys,replaceExistingValues);
      Map<Integer,Object> memberResults;
      memberResults=operationService.invokeOnPartitions(getServiceName(),operationFactory,partitions);
      results.putAll(memberResults);
    }
    validateResults(results);
    if (completionListener != null) {
      completionListener.onCompletion();
    }
  }
 catch (  Exception e) {
    if (completionListener != null) {
      completionListener.onException(e);
    }
  }
catch (  Throwable t) {
    if (t instanceof OutOfMemoryError) {
      ExceptionUtil.rethrow(t);
    }
 else {
      if (completionListener != null) {
        completionListener.onException(new CacheException(t));
      }
    }
  }
}
