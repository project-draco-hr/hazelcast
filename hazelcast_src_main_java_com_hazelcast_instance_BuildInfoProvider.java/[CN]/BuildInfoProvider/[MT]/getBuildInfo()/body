{
  final InputStream inRuntimeProperties=BuildInfoProvider.class.getClassLoader().getResourceAsStream("hazelcast-runtime.properties");
  Properties runtimeProperties=new Properties();
  try {
    if (inRuntimeProperties != null) {
      runtimeProperties.load(inRuntimeProperties);
    }
  }
 catch (  Exception ignored) {
    EmptyStatement.ignore(ignored);
  }
 finally {
    closeResource(inRuntimeProperties);
  }
  String version=runtimeProperties.getProperty("hazelcast.version");
  String distribution=runtimeProperties.getProperty("hazelcast.distribution");
  String revision=runtimeProperties.getProperty("hazelcast.git.revision","");
  if (!revision.isEmpty() && revision.equals("${git.commit.id.abbrev}")) {
    revision="";
  }
  boolean enterprise=!"Hazelcast".equals(distribution);
  String build;
  Integer hazelcastBuild=Integer.getInteger("hazelcast.build",-1);
  if (hazelcastBuild == -1) {
    build=runtimeProperties.getProperty("hazelcast.build");
  }
 else {
    build=String.valueOf(hazelcastBuild);
  }
  int buildNumber=Integer.parseInt(build);
  String sv=runtimeProperties.getProperty("hazelcast.serialization.version");
  byte serialVersion=Byte.parseByte(sv);
  return new BuildInfo(version,build,revision,buildNumber,enterprise,serialVersion);
}
