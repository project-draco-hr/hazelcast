{
  final long currentBacklogInterval=backlogInterval;
  final long signalInterval=Math.max(currentBacklogInterval / 5,100);
  final Thread thread=Thread.currentThread();
  int k=0;
  while (!thread.isInterrupted() && isLive()) {
    long sleep=100;
    final WorkerTask task=queue.peek();
    if (task != null) {
      final long now=Clock.currentTimeMillis();
      if (task.creationTime + currentBacklogInterval < now) {
        addWorkerIfUnderMaxSize();
      }
 else       if (task.creationTime + signalInterval < now) {
        try {
          lock.lockInterruptibly();
        }
 catch (        InterruptedException e) {
          break;
        }
        try {
          signalWorker.signal();
        }
  finally {
          lock.unlock();
        }
      }
    }
    try {
      Thread.sleep(sleep);
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}
