{
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=nearCache != null ? nearCache.get(keyData) : null;
  if (cached != null && !ClientNearCache.NULL_OBJECT.equals(cached)) {
    return createCompletedFuture(cached);
  }
  CacheGetRequest request=new CacheGetRequest(nameWithPrefix,keyData,expiryPolicy,cacheConfig.getInMemoryFormat());
  ClientCallFuture future;
  final ClientContext context=clientContext;
  try {
    future=(ClientCallFuture)context.getInvocationService().invokeOnKeyOwner(request,keyData);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  if (nearCache != null) {
    future.andThenInternal(new ExecutionCallback<Data>(){
      public void onResponse(      Data valueData){
        storeInNearCache(keyData,valueData,null);
      }
      public void onFailure(      Throwable t){
      }
    }
);
  }
  return new DelegatingFuture<V>(future,clientContext.getSerializationService());
}
