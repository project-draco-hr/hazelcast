{
  if (!load) {
    return;
  }
  final IMap<String,Object> map=instance.getMap(NAMESPACE);
  final Member thisMember=instance.getCluster().getLocalMember();
  List<String> lsOwnedEntries=new LinkedList<String>();
  for (int i=0; i < entryCount; i++) {
    final String key=String.valueOf(i);
    Partition partition=instance.getPartitionService().getPartition(key);
    if (thisMember.equals(partition.getOwner())) {
      lsOwnedEntries.add(key);
    }
  }
  final CountDownLatch latch=new CountDownLatch(lsOwnedEntries.size());
  for (  final String ownedKey : lsOwnedEntries) {
    es.execute(new Runnable(){
      public void run(){
        map.put(ownedKey,createValue());
        latch.countDown();
      }
    }
);
  }
  latch.await();
}
