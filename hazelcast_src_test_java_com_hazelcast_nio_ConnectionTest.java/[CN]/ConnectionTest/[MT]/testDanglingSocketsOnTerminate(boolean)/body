{
  Config c=new Config();
  final int port=5701;
  c.getNetworkConfig().setPort(port).setPortAutoIncrement(false);
  if (withSocketInterceptor) {
    c.getNetworkConfig().setSocketInterceptorConfig(new SocketInterceptorConfig().setEnabled(true).setImplementation(new MemberSocketInterceptor(){
      public void init(      SocketInterceptorConfig socketInterceptorConfig){
      }
      public void onAccept(      Socket acceptedSocket) throws IOException {
      }
      public void onConnect(      Socket connectedSocket) throws IOException {
      }
    }
));
  }
  final HazelcastInstance hz=Hazelcast.newHazelcastInstance(c);
  final ExecutorService ex=Executors.newCachedThreadPool();
  final int count=Runtime.getRuntime().availableProcessors() * 25;
  final CountDownLatch latch=new CountDownLatch(count);
  final CountDownLatch ll=new CountDownLatch(1);
  final AtomicInteger cc=new AtomicInteger();
  new Thread(){
    public void run(){
      try {
        ll.await();
        hz.getLifecycleService().terminate();
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
.start();
  for (int i=0; i < count; i++) {
    ex.execute(new Runnable(){
      public void run(){
        try {
          if (cc.incrementAndGet() == count / 25) {
            ll.countDown();
          }
          Socket socket=new Socket();
          socket.connect(new InetSocketAddress(port));
          socket.getOutputStream().write(Protocols.CLUSTER.getBytes());
          socket.getInputStream().read();
        }
 catch (        IOException ignored) {
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  try {
    Assert.assertTrue(latch.await(1,TimeUnit.MINUTES));
  }
  finally {
    ex.shutdownNow();
  }
}
