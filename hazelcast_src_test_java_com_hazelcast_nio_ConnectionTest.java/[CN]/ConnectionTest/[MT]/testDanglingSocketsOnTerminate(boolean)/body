{
  Config c=new Config();
  final int port=5701;
  c.getNetworkConfig().setPort(port).setPortAutoIncrement(false);
  if (withSocketInterceptor) {
    c.getNetworkConfig().setSocketInterceptorConfig(new SocketInterceptorConfig().setEnabled(true).setImplementation(new MemberSocketInterceptor(){
      public void init(      Properties properties){
      }
      public void onAccept(      Socket acceptedSocket) throws IOException {
      }
      public void onConnect(      Socket connectedSocket) throws IOException {
      }
    }
));
  }
  final HazelcastInstance hz=Hazelcast.newHazelcastInstance(c);
  final int count=100;
  final CountDownLatch latch=new CountDownLatch(count);
  final CountDownLatch ll=new CountDownLatch(1);
  final AtomicInteger cc=new AtomicInteger();
  new Thread(){
    public void run(){
      try {
        ll.await(1,TimeUnit.MINUTES);
        hz.getLifecycleService().terminate();
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
.start();
  final Collection<Socket> sockets=Collections.newSetFromMap(new ConcurrentHashMap<Socket,Boolean>());
  final AtomicInteger k0=new AtomicInteger();
  final AtomicInteger k1=new AtomicInteger();
  for (int i=0; i < count; i++) {
    Runnable task=new Runnable(){
      public void run(){
        try {
          if (cc.incrementAndGet() == count / 10) {
            ll.countDown();
          }
          Socket socket=new Socket();
          sockets.add(socket);
          try {
            socket.connect(new InetSocketAddress(port));
            k0.incrementAndGet();
          }
 catch (          IOException e) {
            k1.incrementAndGet();
          }
          OutputStream out=socket.getOutputStream();
          out.write(Protocols.CLUSTER.getBytes());
          out.flush();
          socket.getInputStream().read();
        }
 catch (        IOException ignored) {
        }
 finally {
          latch.countDown();
        }
      }
    }
;
    Thread t=new Thread(task,"socket-thread-" + i);
    t.setDaemon(true);
    t.start();
  }
  try {
    assertTrue(latch.await(1,TimeUnit.MINUTES));
  }
 catch (  AssertionError e) {
    System.err.println(ThreadDumpGenerator.dumpAllThreads());
    throw e;
  }
 finally {
    for (    Socket socket : sockets) {
      try {
        socket.close();
      }
 catch (      Exception e) {
      }
    }
  }
}
