{
  final ServerSocket serverSocket=new ServerSocket(13131,1);
  final int count=100;
  final CountDownLatch latch=new CountDownLatch(count);
  final AtomicInteger connected=new AtomicInteger();
  final AtomicInteger cc=new AtomicInteger();
  final Set<Socket> sockets=Collections.newSetFromMap(new ConcurrentHashMap<Socket,Boolean>());
  final Thread st=new Thread("server-socket"){
    public void run(){
      while (!isInterrupted()) {
        try {
          Socket socket=serverSocket.accept();
          sockets.add(socket);
        }
 catch (        IOException ignored) {
        }
      }
    }
  }
;
  st.start();
  final AtomicBoolean flag=new AtomicBoolean(false);
  for (int i=0; i < count; i++) {
    final Socket clientSocket=new Socket();
    Thread t=new Thread("client-socket-" + i){
      public void run(){
        try {
          if (cc.incrementAndGet() > count / 5 && Math.random() > .87f && flag.compareAndSet(false,true)) {
            st.interrupt();
            serverSocket.close();
            try {
              st.join();
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            Iterator<Socket> iter=sockets.iterator();
            while (iter.hasNext()) {
              Socket socket=iter.next();
              socket.shutdownOutput();
              socket.close();
              iter.remove();
            }
          }
 else {
            clientSocket.connect(new InetSocketAddress(13131));
            connected.incrementAndGet();
            clientSocket.getInputStream().read();
          }
        }
 catch (        IOException ignored) {
        }
 finally {
          latch.countDown();
        }
      }
    }
;
    t.setDaemon(true);
    t.start();
  }
  try {
    Assert.assertTrue(latch.await(1,TimeUnit.MINUTES));
  }
 catch (  AssertionError e) {
    System.err.println(ThreadDumpGenerator.newInstance().dumpAllThreads());
    throw e;
  }
}
