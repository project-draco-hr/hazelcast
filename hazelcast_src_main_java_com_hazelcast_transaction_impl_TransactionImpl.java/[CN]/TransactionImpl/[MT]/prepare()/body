{
  if (state != ACTIVE) {
    throw new TransactionNotActiveException("Transaction is not active");
  }
  checkThread();
  checkTimeout();
  try {
    final List<Future> futures=new ArrayList<Future>(txLogs.size());
    state=PREPARING;
    for (    TransactionRecord txLog : txLogs) {
      futures.add(txLog.prepare(nodeEngine));
    }
    waitWithDeadline(futures,timeoutMillis,TimeUnit.MILLISECONDS,RETHROW_TRANSACTION_EXCEPTION);
    futures.clear();
    state=PREPARED;
    if (durability > 0) {
      replicateTxnLog();
    }
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e,TransactionException.class);
  }
}
