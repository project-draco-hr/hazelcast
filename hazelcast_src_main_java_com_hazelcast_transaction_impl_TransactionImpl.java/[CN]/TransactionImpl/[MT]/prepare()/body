{
  if (state != ACTIVE) {
    throw new TransactionNotActiveException("Transaction is not active");
  }
  checkThread();
  checkTimeout();
  try {
    final List<Future> futures=new ArrayList<Future>(txLogs.size());
    state=PREPARING;
    for (    TransactionLog txLog : txLogs) {
      futures.add(txLog.prepare(nodeEngine));
    }
    for (    Future future : futures) {
      future.get(timeoutMillis,TimeUnit.MILLISECONDS);
    }
    futures.clear();
    state=PREPARED;
    if (durability > 0) {
      final OperationService operationService=nodeEngine.getOperationService();
      for (      Address backupAddress : backupAddresses) {
        if (nodeEngine.getClusterService().getMember(backupAddress) != null) {
          final Future f=operationService.invokeOnTarget(TransactionManagerServiceImpl.SERVICE_NAME,new ReplicateTxOperation(txLogs,txOwnerUuid,txnId,timeoutMillis,startTime),backupAddress);
          futures.add(f);
        }
      }
      for (      Future future : futures) {
        future.get(timeoutMillis,TimeUnit.MILLISECONDS);
      }
      futures.clear();
    }
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e,TransactionException.class);
  }
}
