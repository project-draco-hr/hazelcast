{
  if (state == NO_TXN || state == ROLLED_BACK) {
    throw new IllegalStateException("Transaction is not active");
  }
  checkThread();
  state=ROLLING_BACK;
  try {
    final List<Future> futures=new ArrayList<Future>(txLogs.size());
    final OperationService operationService=nodeEngine.getOperationService();
    if (durability > 0 && transactionType.equals(TransactionType.TWO_PHASE)) {
      for (      Address backupAddress : backupAddresses) {
        if (nodeEngine.getClusterService().getMember(backupAddress) != null) {
          final Invocation inv=operationService.createInvocationBuilder(TransactionManagerServiceImpl.SERVICE_NAME,new RollbackTxBackupOperation(txnId),backupAddress).build();
          futures.add(inv.invoke());
        }
      }
      for (      Future future : futures) {
        try {
          future.get(timeoutMillis,TimeUnit.MILLISECONDS);
        }
 catch (        Throwable e) {
          nodeEngine.getLogger(getClass()).log(Level.WARNING,"Error during tx rollback backup!",e);
        }
      }
      futures.clear();
    }
    final ListIterator<TransactionLog> iter=txLogs.listIterator(txLogs.size());
    while (iter.hasPrevious()) {
      final TransactionLog txLog=iter.previous();
      futures.add(txLog.rollback(nodeEngine));
    }
    for (    Future future : futures) {
      try {
        future.get(5,TimeUnit.MINUTES);
      }
 catch (      Throwable e) {
        nodeEngine.getLogger(getClass()).log(Level.WARNING,"Error during rollback!",e);
      }
    }
    purgeTxBackups();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
 finally {
    state=ROLLED_BACK;
    setThreadFlag(null);
  }
}
