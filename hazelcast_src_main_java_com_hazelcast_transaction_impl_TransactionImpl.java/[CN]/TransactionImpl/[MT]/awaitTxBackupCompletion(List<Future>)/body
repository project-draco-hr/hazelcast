{
  for (  Future future : futures) {
    try {
      future.get(timeoutMillis,TimeUnit.MILLISECONDS);
    }
 catch (    MemberLeftException e) {
      nodeEngine.getLogger(Transaction.class).warning("Member left while replicating tx begin: " + e);
    }
catch (    Throwable e) {
      if (e instanceof ExecutionException) {
        e=e.getCause() != null ? e.getCause() : e;
      }
      if (e instanceof TargetNotMemberException) {
        nodeEngine.getLogger(Transaction.class).warning("Member left while replicating tx begin: " + e);
      }
 else {
        throw ExceptionUtil.rethrow(e);
      }
    }
  }
}
