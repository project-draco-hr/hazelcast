{
  final IMap<Object,Object> map=getInstance().getMap("testMapLockAndUnlockAndTryLock");
  map.lock("key0");
  map.lock("key1");
  map.lock("key2");
  map.lock("key3");
  final AtomicBoolean check1=new AtomicBoolean(false);
  final AtomicBoolean check2=new AtomicBoolean(false);
  final CountDownLatch latch0=new CountDownLatch(1);
  final CountDownLatch latch1=new CountDownLatch(1);
  final CountDownLatch latch2=new CountDownLatch(1);
  final CountDownLatch latch3=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      try {
        check1.set(map.tryLock("key0"));
        check2.set(map.tryLock("key0",3000,TimeUnit.MILLISECONDS));
        latch0.countDown();
        map.put("key1","value1");
        latch1.countDown();
        map.put("key2","value2");
        latch2.countDown();
        map.put("key3","value3");
        latch3.countDown();
      }
 catch (      Exception e) {
        fail(e.getMessage());
      }
    }
  }
);
  thread.start();
  thread.join();
  Thread.sleep(1000);
  map.unlock("key0");
  assertTrue(latch0.await(3,TimeUnit.SECONDS));
  assertFalse(check1.get());
  assertTrue(check2.get());
  map.unlock("key1");
  assertTrue(latch1.await(3,TimeUnit.SECONDS));
  map.unlock("key2");
  assertTrue(latch2.await(3,TimeUnit.SECONDS));
  map.unlock("key3");
  assertTrue(latch3.await(3,TimeUnit.SECONDS));
}
