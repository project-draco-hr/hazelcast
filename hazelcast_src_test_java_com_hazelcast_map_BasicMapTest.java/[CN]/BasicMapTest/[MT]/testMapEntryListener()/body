{
  IMap<String,String> map=getInstance().getMap("testMapEntryListener");
  final CountDownLatch latchAdded=new CountDownLatch(1);
  final CountDownLatch latchRemoved=new CountDownLatch(1);
  final CountDownLatch latchUpdated=new CountDownLatch(1);
  final CountDownLatch latchCleared=new CountDownLatch(1);
  final CountDownLatch latchEvicted=new CountDownLatch(1);
  map.addEntryListener(new EntryListener<String,String>(){
    public void entryAdded(    EntryEvent event){
      latchAdded.countDown();
    }
    public void entryRemoved(    EntryEvent event){
      assertEquals("hello",event.getKey());
      assertEquals("new world",event.getValue());
      latchRemoved.countDown();
    }
    public void entryUpdated(    EntryEvent event){
      assertEquals("world",event.getOldValue());
      assertEquals("new world",event.getValue());
      assertEquals("hello",event.getKey());
      latchUpdated.countDown();
    }
    public void entryEvicted(    EntryEvent event){
      entryRemoved(event);
    }
    @Override public void mapEvicted(    MapEvent event){
      latchEvicted.countDown();
    }
    @Override public void mapCleared(    MapEvent event){
      latchCleared.countDown();
    }
  }
,true);
  map.put("hello","world");
  map.put("hello","new world");
  map.remove("hello");
  map.put("hi","new world");
  map.evictAll();
  map.put("hello","world");
  map.clear();
  try {
    assertTrue(latchAdded.await(5,TimeUnit.SECONDS));
    assertTrue(latchUpdated.await(5,TimeUnit.SECONDS));
    assertTrue(latchRemoved.await(5,TimeUnit.SECONDS));
    assertTrue(latchEvicted.await(5,TimeUnit.SECONDS));
    assertTrue(latchCleared.await(5,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    assertFalse(e.getMessage(),true);
  }
}
