{
  final IMap<Object,Object> map=getInstance().getMap("testMapTryPut");
  final String key1="key1";
  final String key2="key2";
  map.lock(key1);
  final AtomicInteger counter=new AtomicInteger(6);
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch waitTryPutFailure=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      try {
        if (!map.tryPut(key1,"value1",100,TimeUnit.MILLISECONDS)) {
          counter.decrementAndGet();
          waitTryPutFailure.countDown();
        }
        if (map.get(key1) == null) {
          counter.decrementAndGet();
        }
        if (map.tryPut(key2,"value",100,TimeUnit.MILLISECONDS)) {
          counter.decrementAndGet();
        }
        if (map.get(key2).equals("value")) {
          counter.decrementAndGet();
        }
        if (map.tryPut(key1,"value1",5,TimeUnit.SECONDS)) {
          counter.decrementAndGet();
        }
        if (map.get(key1).equals("value1")) {
          counter.decrementAndGet();
        }
        latch.countDown();
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
    }
  }
);
  thread.start();
  assertOpenEventually(waitTryPutFailure);
  map.unlock("key1");
  assertOpenEventually(latch);
  assertEquals(0,counter.get());
  assertJoinable(thread);
}
