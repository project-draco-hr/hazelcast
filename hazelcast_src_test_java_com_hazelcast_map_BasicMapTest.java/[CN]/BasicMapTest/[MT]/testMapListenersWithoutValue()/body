{
  IMap<Object,Object> map=getInstance().getMap("testMapListenersWithoutValue");
  final Object[] addedKey=new Object[1];
  final Object[] addedValue=new Object[1];
  final Object[] updatedKey=new Object[1];
  final Object[] oldValue=new Object[1];
  final Object[] newValue=new Object[1];
  final Object[] removedKey=new Object[1];
  final Object[] removedValue=new Object[1];
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void entryAdded(    EntryEvent<Object,Object> event){
      addedKey[0]=event.getKey();
      addedValue[0]=event.getValue();
    }
    @Override public void entryRemoved(    EntryEvent<Object,Object> event){
      removedKey[0]=event.getKey();
      removedValue[0]=event.getOldValue();
    }
    @Override public void entryUpdated(    EntryEvent<Object,Object> event){
      updatedKey[0]=event.getKey();
      oldValue[0]=event.getOldValue();
      newValue[0]=event.getValue();
    }
    @Override public void entryEvicted(    EntryEvent<Object,Object> event){
    }
    @Override public void mapEvicted(    MapEvent event){
    }
    @Override public void mapCleared(    MapEvent event){
    }
  }
;
  map.addEntryListener(listener,false);
  map.put("key","value");
  map.put("key","value2");
  map.remove("key");
  sleepSeconds(1);
  assertEquals(addedKey[0],"key");
  assertEquals(addedValue[0],null);
  assertEquals(updatedKey[0],"key");
  assertEquals(oldValue[0],null);
  assertEquals(newValue[0],null);
  assertEquals(removedKey[0],"key");
  assertEquals(removedValue[0],null);
}
