{
  IMap<String,String> map=getInstance().getMap("testMapEvictAndListener");
  final String value1="/home/data/file1.dat";
  final String value2="/home/data/file2.dat";
  final AtomicReference<String> oldValue1=new AtomicReference<String>();
  final AtomicReference<String> oldValue2=new AtomicReference<String>();
  final CountDownLatch latch1=new CountDownLatch(1);
  final CountDownLatch latch2=new CountDownLatch(1);
  map.addEntryListener(new EntryAdapter<String,String>(){
    @Override public void entryEvicted(    EntryEvent<String,String> event){
      if (value1.equals(event.getOldValue())) {
        oldValue1.set(event.getOldValue());
        latch1.countDown();
      }
 else       if (value2.equals(event.getOldValue())) {
        oldValue2.set(event.getOldValue());
        latch2.countDown();
      }
    }
  }
,true);
  map.put("key",value1,1,TimeUnit.SECONDS);
  assertOpenEventually(latch1);
  map.put("key",value2,1,TimeUnit.SECONDS);
  assertOpenEventually(latch2);
  assertEquals(value1,oldValue1.get());
  assertEquals(value2,oldValue2.get());
}
