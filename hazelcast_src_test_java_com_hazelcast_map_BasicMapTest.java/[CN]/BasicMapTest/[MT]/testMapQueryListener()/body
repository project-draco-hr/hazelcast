{
  IMap<Object,Object> map=getInstance().getMap(randomMapName());
  final Object[] addedKey=new Object[1];
  final Object[] addedValue=new Object[1];
  final Object[] updatedKey=new Object[1];
  final Object[] oldValue=new Object[1];
  final Object[] newValue=new Object[1];
  final Object[] removedKey=new Object[1];
  final Object[] removedValue=new Object[1];
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void entryAdded(    EntryEvent<Object,Object> event){
      addedKey[0]=event.getKey();
      addedValue[0]=event.getValue();
    }
    @Override public void entryRemoved(    EntryEvent<Object,Object> event){
      removedKey[0]=event.getKey();
      removedValue[0]=event.getOldValue();
    }
    @Override public void entryUpdated(    EntryEvent<Object,Object> event){
      updatedKey[0]=event.getKey();
      oldValue[0]=event.getOldValue();
      newValue[0]=event.getValue();
    }
    @Override public void entryEvicted(    EntryEvent<Object,Object> event){
    }
    @Override public void mapEvicted(    MapEvent event){
    }
    @Override public void mapCleared(    MapEvent event){
    }
  }
;
  map.addEntryListener(listener,new StartsWithPredicate("a"),null,true);
  map.put("key1","abc");
  map.put("key2","bcd");
  map.put("key2","axyz");
  map.remove("key1");
  assertTrueEventually(new AssertTask(){
    @Override public void run(){
      assertEquals("key1",addedKey[0]);
      assertEquals("abc",addedValue[0]);
      assertEquals("key2",updatedKey[0]);
      assertEquals("bcd",oldValue[0]);
      assertEquals("axyz",newValue[0]);
      assertEquals("key1",removedKey[0]);
      assertEquals("abc",removedValue[0]);
    }
  }
);
}
