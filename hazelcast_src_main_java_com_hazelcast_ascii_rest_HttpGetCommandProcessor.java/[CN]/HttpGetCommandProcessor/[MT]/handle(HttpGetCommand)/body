{
  String uri=command.getURI();
  if (uri.startsWith(URI_MAPS)) {
    int indexEnd=uri.indexOf('/',URI_MAPS.length());
    String mapName=uri.substring(URI_MAPS.length(),indexEnd);
    String key=uri.substring(indexEnd + 1);
    Object value=textCommandService.get(mapName,key);
    prepareResponse(command,value);
  }
 else   if (uri.startsWith(URI_QUEUES)) {
    int indexEnd=uri.indexOf('/',URI_QUEUES.length());
    String queueName=uri.substring(URI_QUEUES.length(),indexEnd);
    String secondStr=(uri.length() > (indexEnd + 1)) ? uri.substring(indexEnd + 1) : null;
    int seconds=(secondStr == null) ? 0 : Integer.parseInt(secondStr);
    Object value=textCommandService.poll(queueName,seconds);
    prepareResponse(command,value);
  }
 else   if (uri.startsWith(URI_CLUSTER)) {
    Node node=textCommandService.getNode();
    StringBuilder res=new StringBuilder(node.getClusterService().membersString());
    res.append("\n");
    ConnectionManager connectionManager=node.getConnectionManager();
    res.append("ConnectionCount: ").append(connectionManager.getCurrentClientConnections());
    res.append("\n");
    res.append("AllConnectionCount: ").append(connectionManager.getAllTextConnections());
    res.append("\n");
    command.setResponse(null,stringToBytes(res.toString()));
  }
 else   if (uri.startsWith(URI_STATE_DUMP)) {
    String stateDump=textCommandService.getNode().getSystemLogService().dump();
    stateDump+=textCommandService.getNode().getPartitionService().toString() + "\n";
    command.setResponse(HttpCommand.CONTENT_TYPE_PLAIN_TEXT,stringToBytes(stateDump));
  }
 else {
    command.send400();
  }
  textCommandService.sendResponse(command);
}
