{
  final String mapName=randomMapName("_testWriteBehindWriteRemoveOrderOfSameKey_");
  final int iterationCount=10;
  final int delaySeconds=1;
  final int putOps=3;
  final int removeOps=2;
  final int expectedStoreSizeEventually=1;
  final RecordingMapStore store=new RecordingMapStore(iterationCount * putOps,iterationCount * removeOps);
  final Config config=newConfig(store,delaySeconds);
  final HazelcastInstance node=createHazelcastInstance(config);
  final IMap<Object,Object> map=node.getMap(mapName);
  for (int i=0; i < iterationCount; i++) {
    String key="key";
    String value="value" + i;
    map.put(key,value);
    sleepMillis(100);
    map.remove(key);
    sleepMillis(100);
    map.put(key,value);
    sleepMillis(100);
    map.remove(key);
    sleepMillis(100);
    map.put(key,value);
    sleepMillis(100);
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(expectedStoreSizeEventually,store.getStore().size());
    }
  }
);
}
