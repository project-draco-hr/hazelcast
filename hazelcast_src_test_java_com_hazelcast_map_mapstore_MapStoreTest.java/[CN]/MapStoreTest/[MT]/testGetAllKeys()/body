{
  TestEventBasedMapStore testMapStore=new TestEventBasedMapStore();
  Map store=testMapStore.getStore();
  Set keys=new HashSet();
  int size=1000;
  for (int i=0; i < size; i++) {
    store.put(i,"value" + i);
    keys.add(i);
  }
  Config config=newConfig(testMapStore,2);
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  HazelcastInstance h1=nodeFactory.newHazelcastInstance(config);
  HazelcastInstance h2=nodeFactory.newHazelcastInstance(config);
  final IMap map1=h1.getMap("default");
  final IMap map2=h2.getMap("default");
  checkIfMapLoaded("default",h1);
  checkIfMapLoaded("default",h2);
  assertEquals("value1",map1.get(1));
  assertEquals("value1",map2.get(1));
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1000,map1.size());
    }
  }
);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1000,map2.size());
    }
  }
);
  HazelcastInstance h3=nodeFactory.newHazelcastInstance(config);
  final IMap map3=h3.getMap("default");
  checkIfMapLoaded("default",h3);
  assertEquals("value1",map1.get(1));
  assertEquals("value1",map2.get(1));
  assertEquals("value1",map3.get(1));
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1000,map1.size());
    }
  }
);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1000,map2.size());
    }
  }
);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1000,map3.size());
    }
  }
);
  h3.shutdown();
  assertEquals("value1",map1.get(1));
  assertEquals("value1",map2.get(1));
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1000,map1.size());
    }
  }
);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1000,map2.size());
    }
  }
);
}
