{
  final AtomicInteger loadCount=new AtomicInteger(0);
  final AtomicInteger storeCount=new AtomicInteger(0);
  final AtomicInteger deleteCount=new AtomicInteger(0);
class SimpleMapStore2 extends SimpleMapStore<String,Long> {
    SimpleMapStore2(    ConcurrentMap<String,Long> store){
      super(store);
    }
    public Long load(    String key){
      loadCount.incrementAndGet();
      return super.load(key);
    }
    public void store(    String key,    Long value){
      storeCount.incrementAndGet();
      super.store(key,value);
    }
    public void delete(    String key){
      deleteCount.incrementAndGet();
      super.delete(key);
    }
  }
  final ConcurrentMap<String,Long> store=new ConcurrentHashMap<String,Long>();
  final MapStore<String,Long> myMapStore=new SimpleMapStore2(store);
  Config config=new Config();
  config.getMapConfig("myMap").setMapStoreConfig(new MapStoreConfig().setImplementation(myMapStore));
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  HazelcastInstance hc=nodeFactory.newHazelcastInstance(config);
  store.put("one",1l);
  store.put("two",2l);
  assertEquals(0,loadCount.get());
  assertEquals(0,storeCount.get());
  assertEquals(0,deleteCount.get());
  IMap<String,Long> myMap=hc.getMap("myMap");
  assertEquals(1l,myMap.get("one").longValue());
  assertEquals(2l,myMap.get("two").longValue());
  assertEquals(0,storeCount.get());
  assertEquals(0,deleteCount.get());
  assertNull(myMap.remove("ten"));
  assertEquals(0,storeCount.get());
  assertEquals(0,deleteCount.get());
  myMap.put("three",3L);
  myMap.put("four",4L);
  assertEquals(2,storeCount.get());
  assertEquals(0,deleteCount.get());
  myMap.remove("one");
  assertEquals(2,storeCount.get());
  assertEquals(1,deleteCount.get());
}
