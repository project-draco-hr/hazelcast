{
  final int instanceCount=2;
  final int size=10000;
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(instanceCount);
  final CountDownLatch countDownLatch=new CountDownLatch(instanceCount - 1);
  final Config config=getConfig();
  GroupConfig groupConfig=new GroupConfig("testEager");
  config.setGroupConfig(groupConfig);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setEnabled(true);
  mapStoreConfig.setImplementation(new SimpleMapLoader(size,true));
  mapStoreConfig.setInitialLoadMode(MapStoreConfig.InitialLoadMode.EAGER);
  config.getMapConfig("testInitialLoadModeEagerWhileStoppigOneNode").setMapStoreConfig(mapStoreConfig);
  final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);
  final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);
  new Thread(new Runnable(){
    @Override public void run(){
      sleepSeconds(3);
      instance1.getLifecycleService().shutdown();
      sleepSeconds(3);
      final IMap<Object,Object> map=instance2.getMap("testInitialLoadModeEagerWhileStoppigOneNode");
      assertEquals(size,map.size());
      countDownLatch.countDown();
    }
  }
).start();
  assertOpenEventually(countDownLatch);
  final IMap<Object,Object> map2=instance2.getMap("testInitialLoadModeEagerWhileStoppigOneNode");
  final int map2Size=map2.size();
  assertEquals(size,map2Size);
}
