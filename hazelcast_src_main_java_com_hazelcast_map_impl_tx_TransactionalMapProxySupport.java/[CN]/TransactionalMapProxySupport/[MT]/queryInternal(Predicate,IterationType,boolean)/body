{
  NodeEngine nodeEngine=getNodeEngine();
  OperationService operationService=nodeEngine.getOperationService();
  Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
  int partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  Set<Integer> partitions=new HashSet<Integer>(partitionCount);
  QueryResultSet result=new QueryResultSet(nodeEngine.getSerializationService(),iterationType,dataResult);
  try {
    List<Future> futures=new ArrayList<Future>();
    invokeQueryOperation(predicate,operationService,members,futures);
    collectResults(partitions,result,futures);
    if (partitions.size() == partitionCount) {
      return result;
    }
  }
 catch (  Throwable t) {
    EmptyStatement.ignore(t);
  }
  List<Integer> missingList=new ArrayList<Integer>();
  findMissingPartitions(partitionCount,partitions,missingList);
  try {
    List<Future> missingFutures=new ArrayList<Future>(missingList.size());
    invokeOperationOnMissingPartitions(predicate,operationService,missingList,missingFutures);
    collectResultsFromMissingPartitions(result,missingFutures);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
  return result;
}
