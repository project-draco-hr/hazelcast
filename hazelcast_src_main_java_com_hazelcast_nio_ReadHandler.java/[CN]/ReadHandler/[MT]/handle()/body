{
  lastHandle=Clock.currentTimeMillis();
  if (!connection.live()) {
    String message="We are being asked to read, but connection is not live so we won't";
    logger.log(Level.FINEST,message);
    systemLogService.logConnection(message);
    return;
  }
  try {
    if (socketReader == null) {
      int readBytes=socketChannel.read(protocolBuffer);
      if (readBytes == -1) {
        throw new EOFException();
      }
      if (!protocolBuffer.hasRemaining()) {
        String protocol=new String(protocolBuffer.array());
        WriteHandler writeHandler=connection.getWriteHandler();
        if ("HZC".equals(protocol)) {
          writeHandler.setProtocol("HZC");
          socketReader=new SocketPacketReader(socketChannel,connection);
        }
 else         if ("P01".equals(protocol)) {
          System.out.println("Protocol is P01");
          writeHandler.setProtocol("P01");
          socketReader=new SocketProtocolReader(connection);
        }
 else {
          writeHandler.setProtocol("TEXT");
          buffer.put(protocolBuffer.array());
          socketReader=new SocketTextReader(connection);
          connection.getConnectionManager().incrementTextConnections();
        }
      }
    }
    if (socketReader == null)     return;
    int readBytes=socketChannel.read(buffer);
    if (readBytes == -1) {
      throw new EOFException();
    }
  }
 catch (  Throwable e) {
    handleSocketException(e);
    return;
  }
  try {
    if (buffer.position() == 0)     return;
    buffer.flip();
    socketReader.read(buffer);
    if (buffer.hasRemaining()) {
      buffer.compact();
    }
 else {
      buffer.clear();
    }
  }
 catch (  Throwable t) {
    handleSocketException(t);
  }
}
