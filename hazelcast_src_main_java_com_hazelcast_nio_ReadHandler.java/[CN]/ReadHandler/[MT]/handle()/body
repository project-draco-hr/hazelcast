{
  if (!connection.live()) {
    logger.log(Level.FINEST,">>>> We are being to asked to read, but connection is not live so we won't");
    return;
  }
  try {
    if (socketReader == null) {
      int readBytes=socketChannel.read(protocolBuffer);
      if (readBytes == -1) {
        connection.close();
        return;
      }
      if (!protocolBuffer.hasRemaining()) {
        String protocol=new String(protocolBuffer.array());
        WriteHandler writeHandler=connection.getWriteHandler();
        if ("HZC".equals(protocol)) {
          writeHandler.setProtocol("HZC");
          socketReader=new SocketPacketReader(node,socketChannel,connection);
        }
 else {
          writeHandler.setProtocol("TEXT");
          inBuffer.put(protocolBuffer.array());
          socketReader=new SocketTextReader(node,connection);
          connection.connectionManager.incrementTextConnections();
        }
      }
    }
    if (socketReader == null)     return;
    int readBytes=socketChannel.read(inBuffer);
    if (readBytes == -1) {
      connection.close();
      return;
    }
  }
 catch (  Throwable e) {
    if (e instanceof OutOfMemoryError) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
    handleSocketException(e);
    return;
  }
  try {
    if (inBuffer.position() == 0)     return;
    inBuffer.flip();
    socketReader.read(inBuffer);
    if (inBuffer.hasRemaining()) {
      inBuffer.compact();
    }
 else {
      inBuffer.clear();
    }
  }
 catch (  Exception t) {
    handleSocketException(t);
  }
 finally {
    registerOp(inSelector.selector,SelectionKey.OP_READ);
  }
}
