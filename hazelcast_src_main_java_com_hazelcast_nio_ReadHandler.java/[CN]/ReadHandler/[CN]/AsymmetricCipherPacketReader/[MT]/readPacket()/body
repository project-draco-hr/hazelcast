{
  if (cipher == null) {
    if (!aliasSizeSet) {
      if (inBuffer.remaining() < 4) {
        return;
      }
 else {
        int aliasSize=inBuffer.getInt();
        bbAlias=ByteBuffer.allocate(aliasSize);
      }
    }
    copyToHeapBuffer(inBuffer,bbAlias);
    if (!bbAlias.hasRemaining()) {
      bbAlias.flip();
      String remoteAlias=new String(bbAlias.array(),0,bbAlias.limit());
      cipher=CipherHelper.createAsymmetricReaderCipher(node,remoteAlias);
    }
  }
  while (inBuffer.remaining() >= 128) {
    if (cipherBuffer.position() > 0)     throw new RuntimeException();
    int oldLimit=inBuffer.limit();
    inBuffer.limit(inBuffer.position() + 128);
    int cipherReadSize=cipher.doFinal(inBuffer,cipherBuffer);
    inBuffer.limit(oldLimit);
    cipherBuffer.flip();
    while (cipherBuffer.hasRemaining()) {
      if (packet == null) {
        packet=obtainReadable();
      }
      boolean complete=false;
      complete=packet.read(cipherBuffer);
      if (complete) {
        enqueueFullPacket(packet);
        packet=null;
      }
    }
    cipherBuffer.clear();
  }
}
