{
  DBCollection c=db.getCollection("jmr1");
  c.drop();
  c.save(new BasicDBObject("chars",new String[]{"a","b"}));
  c.save(new BasicDBObject("chars",new String[]{"b","c"}));
  c.save(new BasicDBObject("chars",new String[]{"c","d"}));
  DBCursor curs=c.find();
  while (curs.hasNext()) {
    System.out.println(curs.next());
  }
  MapReduceOutput out=c.mapReduce("function(){ for ( var i=0; i<this.chars.length; i++ ){ emit( this.chars[i] , 1 ); } }","function(key,values){ var sum=0; for( var i=0; i<values.length; i++ ) sum += values[i]; return sum;}",null,null);
  DBCursor red=out.results();
  while (red.hasNext()) {
    System.out.println(red.next());
  }
  Map<String,Integer> m=new HashMap<String,Integer>();
  for (  DBObject r : out.results()) {
    m.put(r.get("_id").toString(),((Number)(r.get("value"))).intValue());
  }
  assertEquals(4,m.size());
  assertEquals(1,m.get("a").intValue());
  assertEquals(2,m.get("b").intValue());
  assertEquals(2,m.get("c").intValue());
  assertEquals(1,m.get("d").intValue());
}
