{
  final int k=simpleTestNodeCount;
  final HazelcastInstance[] instances=StaticNodeFactory.newInstances(new Config(),k);
  final AtomicInteger count=new AtomicInteger(0);
  final MultiExecutionCallback callback=new MultiExecutionCallback(){
    public void onResponse(    Member member,    Object value){
      count.incrementAndGet();
    }
    public void onComplete(    Map<Member,Object> values){
    }
  }
;
  int sum=0;
  final Object[] members=instances[0].getCluster().getMembers().toArray();
  for (int i=0; i < k; i++) {
    final IExecutorService service=instances[i].getExecutorService("testSubmitToMembersCallable");
    final String script="hazelcast.getAtomicLong('testSubmitToMembersCallable').incrementAndGet();";
    final int n=new Random().nextInt(k) + 1;
    sum+=n;
    Member[] m=new Member[n];
    for (int j=0; j < n; j++)     m[j]=(Member)members[j];
    service.submitToMembers(new ScriptCallable(script,null),Arrays.asList(m),callback);
  }
  Thread.sleep(2000);
  final IAtomicLong result=instances[0].getAtomicLong("testSubmitToMembersCallable");
  Assert.assertEquals(sum,result.get());
  Assert.assertEquals(sum,count.get());
}
