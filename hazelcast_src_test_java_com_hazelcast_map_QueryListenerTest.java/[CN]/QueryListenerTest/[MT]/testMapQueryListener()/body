{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  Config cfg=new Config();
  HazelcastInstance instance1=nodeFactory.newHazelcastInstance(cfg);
  HazelcastInstance instance2=nodeFactory.newHazelcastInstance(cfg);
  HazelcastInstance instance3=nodeFactory.newHazelcastInstance(cfg);
  final IMap<Object,Object> map=instance1.getMap("testMapQueryListener");
  final Object[] addedKey=new Object[1];
  final Object[] addedValue=new Object[1];
  final Object[] updatedKey=new Object[1];
  final Object[] oldValue=new Object[1];
  final Object[] newValue=new Object[1];
  final Object[] removedKey=new Object[1];
  final Object[] removedValue=new Object[1];
  EntryListener<Object,Object> listener=new EntryListener<Object,Object>(){
    public void entryAdded(    EntryEvent<Object,Object> event){
      addedKey[0]=event.getKey();
      addedValue[0]=event.getValue();
    }
    public void entryRemoved(    EntryEvent<Object,Object> event){
      removedKey[0]=event.getKey();
      removedValue[0]=event.getOldValue();
    }
    public void entryUpdated(    EntryEvent<Object,Object> event){
      updatedKey[0]=event.getKey();
      oldValue[0]=event.getOldValue();
      newValue[0]=event.getValue();
    }
    public void entryEvicted(    EntryEvent<Object,Object> event){
    }
    @Override public void mapEvicted(    MapEvent event){
    }
  }
;
  map.addEntryListener(listener,new StartsWithPredicate("a"),null,true);
  map.put("key1","abc");
  map.put("key2","bcd");
  map.put("key2","axyz");
  map.remove("key1");
  Thread.sleep(1000);
  assertEquals(addedKey[0],"key1");
  assertEquals(addedValue[0],"abc");
  assertEquals(updatedKey[0],"key2");
  assertEquals(oldValue[0],"bcd");
  assertEquals(newValue[0],"axyz");
  assertEquals(removedKey[0],"key1");
  assertEquals(removedValue[0],"abc");
}
