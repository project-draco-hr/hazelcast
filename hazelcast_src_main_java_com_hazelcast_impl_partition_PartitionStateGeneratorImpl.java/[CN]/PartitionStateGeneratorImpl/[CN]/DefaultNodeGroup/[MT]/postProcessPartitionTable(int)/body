{
  if (nodes.size() == 1) {
    PartitionTable table=nodeTables.iterator().next();
    while (!partitionQ.isEmpty()) {
      table.add(index,partitionQ.poll());
    }
  }
 else {
    int totalCount=getPartitonCount(index);
    int avgCount=totalCount / nodes.size();
    List<PartitionTable> underLoadedStates=new LinkedList<PartitionTable>();
    for (    PartitionTable table : nodeTables) {
      Set<Integer> partitions=table.getPartitions(index);
      if (partitions.size() > avgCount) {
        Iterator<Integer> iter=partitions.iterator();
        while (partitions.size() > avgCount) {
          Integer partitionId=iter.next();
          iter.remove();
          partitionQ.add(partitionId);
        }
      }
 else {
        underLoadedStates.add(table);
      }
    }
    if (!partitionQ.isEmpty()) {
      for (      PartitionTable table : underLoadedStates) {
        while (table.size(index) < avgCount) {
          table.add(index,partitionQ.poll());
        }
      }
    }
    while (!partitionQ.isEmpty()) {
      for (      PartitionTable table : nodeTables) {
        table.add(index,partitionQ.poll());
        if (partitionQ.isEmpty()) {
          break;
        }
      }
    }
  }
}
