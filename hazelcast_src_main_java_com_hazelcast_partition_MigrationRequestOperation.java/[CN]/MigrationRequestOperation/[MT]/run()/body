{
  final int partitionId=getPartitionId();
  final int replicaIndex=getReplicaIndex();
  if (to.equals(from)) {
    getLogger().log(Level.FINEST,"To and from addresses are same! => " + toString());
    success=false;
    return;
  }
  if (from == null) {
    getLogger().log(Level.FINEST,"From address is null => " + toString());
  }
  final PartitionService partitionService=getService();
  try {
    Member target=partitionService.getMember(to);
    if (target == null) {
      getLogger().log(Level.WARNING,"Target member of task could not be found! => " + toString());
      success=false;
      return;
    }
    partitionService.addActiveMigration(createMigrationInfo());
    final NodeEngine nodeEngine=getNodeEngine();
    final long timeout=nodeEngine.getGroupProperties().PARTITION_MIGRATION_TIMEOUT.getLong();
    final Collection<Operation> tasks=prepareMigrationTasks(partitionId,replicaIndex);
    Invocation inv=nodeEngine.getInvocationService().createInvocationBuilder(PartitionService.SERVICE_NAME,new MigrationOperation(partitionId,replicaIndex,copyBackReplicaIndex,getMigrationType(),tasks,from),to).setTryCount(3).setTryPauseMillis(1000).setReplicaIndex(replicaIndex).build();
    Future future=inv.invoke();
    success=(Boolean)IOUtil.toObject(future.get(timeout,TimeUnit.SECONDS));
  }
 catch (  Throwable e) {
    onError(e);
  }
}
