{
  final Address from=migrationInfo.getFromAddress();
  final Address to=migrationInfo.getToAddress();
  if (to.equals(from)) {
    getLogger().log(Level.FINEST,"To and from addresses are same! => " + toString());
    success=false;
    return;
  }
  if (from == null) {
    getLogger().log(Level.FINEST,"From address is null => " + toString());
  }
  final PartitionService partitionService=getService();
  try {
    Member target=partitionService.getMember(to);
    if (target == null) {
      getLogger().log(Level.WARNING,"Target member of task could not be found! => " + toString());
      success=false;
      return;
    }
    partitionService.addActiveMigration(migrationInfo);
    final NodeEngine nodeEngine=getNodeEngine();
    final long timeout=nodeEngine.getGroupProperties().PARTITION_MIGRATION_TIMEOUT.getLong();
    final Collection<Operation> tasks=prepareMigrationTasks();
    if (tasks.size() > 0) {
      Invocation inv=nodeEngine.getOperationService().createInvocationBuilder(PartitionService.SERVICE_NAME,new MigrationOperation(migrationInfo,tasks),to).setTryCount(3).setTryPauseMillis(1000).setReplicaIndex(getReplicaIndex()).build();
      Future future=inv.invoke();
      success=(Boolean)IOUtil.toObject(future.get(timeout,TimeUnit.SECONDS));
    }
 else {
      success=true;
    }
  }
 catch (  Throwable e) {
    onError(e);
  }
}
