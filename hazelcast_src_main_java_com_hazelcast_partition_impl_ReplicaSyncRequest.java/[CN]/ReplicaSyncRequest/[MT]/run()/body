{
  NodeEngineImpl nodeEngine=(NodeEngineImpl)getNodeEngine();
  PartitionServiceImpl partitionService=(PartitionServiceImpl)nodeEngine.getPartitionService();
  partitionService.incrementReplicaSyncProcessCount();
  int partitionId=getPartitionId();
  int replicaIndex=getReplicaIndex();
  try {
    Collection<ServiceInfo> services=nodeEngine.getServiceInfos(MigrationAwareService.class);
    PartitionReplicationEvent event=new PartitionReplicationEvent(partitionId,replicaIndex);
    List<Operation> tasks=new LinkedList<Operation>();
    for (    ServiceInfo serviceInfo : services) {
      MigrationAwareService service=(MigrationAwareService)serviceInfo.getService();
      Operation op=service.prepareReplicationOperation(event);
      if (op != null) {
        op.setServiceName(serviceInfo.getName());
        tasks.add(op);
      }
    }
    byte[] data=null;
    if (tasks.isEmpty()) {
      logNoReplicaDataFound(partitionId,replicaIndex);
    }
 else {
      SerializationService serializationService=nodeEngine.getSerializationService();
      BufferObjectDataOutput out=serializationService.createObjectDataOutput(1024 * 32);
      try {
        out.writeInt(tasks.size());
        for (        Operation task : tasks) {
          serializationService.writeObject(out,task);
        }
        data=compress(out.toByteArray());
      }
  finally {
        closeResource(out);
      }
    }
    long[] replicaVersions=partitionService.getPartitionReplicaVersions(partitionId);
    ReplicaSyncResponse syncResponse=new ReplicaSyncResponse(data,replicaVersions);
    syncResponse.setPartitionId(partitionId).setReplicaIndex(replicaIndex);
    Address target=getCallerAddress();
    logSendSyncResponse(partitionId,replicaIndex,target);
    OperationService operationService=nodeEngine.getOperationService();
    operationService.send(syncResponse,target);
  }
  finally {
    partitionService.decrementReplicaSyncProcessCount();
  }
}
