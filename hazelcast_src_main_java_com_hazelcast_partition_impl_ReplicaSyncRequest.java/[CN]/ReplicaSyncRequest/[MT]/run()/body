{
  NodeEngineImpl nodeEngine=(NodeEngineImpl)getNodeEngine();
  InternalPartitionServiceImpl partitionService=(InternalPartitionServiceImpl)nodeEngine.getPartitionService();
  ILogger logger=nodeEngine.getLogger(getClass());
  int partitionId=getPartitionId();
  int replicaIndex=getReplicaIndex();
  if (!partitionService.incrementReplicaSyncProcessCount()) {
    if (logger.isFinestEnabled()) {
      logger.finest("Max parallel replication process limit exceeded! " + "Could not run replica sync -> " + toString());
    }
    ReplicaSyncRetryResponse response=new ReplicaSyncRetryResponse();
    response.setPartitionId(partitionId).setReplicaIndex(replicaIndex);
    Address target=getCallerAddress();
    OperationService operationService=nodeEngine.getOperationService();
    operationService.send(response,target);
    return;
  }
  try {
    Collection<ServiceInfo> services=nodeEngine.getServiceInfos(MigrationAwareService.class);
    PartitionReplicationEvent event=new PartitionReplicationEvent(partitionId,replicaIndex);
    List<Operation> tasks=new LinkedList<Operation>();
    for (    ServiceInfo serviceInfo : services) {
      MigrationAwareService service=(MigrationAwareService)serviceInfo.getService();
      Operation op=service.prepareReplicationOperation(event);
      if (op != null) {
        op.setServiceName(serviceInfo.getName());
        tasks.add(op);
      }
    }
    byte[] data=null;
    boolean compress=nodeEngine.getGroupProperties().PARTITION_MIGRATION_ZIP_ENABLED.getBoolean();
    if (tasks.isEmpty()) {
      logNoReplicaDataFound(partitionId,replicaIndex);
    }
 else {
      SerializationService serializationService=nodeEngine.getSerializationService();
      BufferObjectDataOutput out=serializationService.createObjectDataOutput(1024 * 32);
      try {
        out.writeInt(tasks.size());
        for (        Operation task : tasks) {
          serializationService.writeObject(out,task);
        }
        data=out.toByteArray();
        if (compress) {
          data=IOUtil.compress(data);
        }
      }
  finally {
        closeResource(out);
      }
    }
    long[] replicaVersions=partitionService.getPartitionReplicaVersions(partitionId);
    ReplicaSyncResponse syncResponse=new ReplicaSyncResponse(data,replicaVersions,compress);
    syncResponse.setPartitionId(partitionId).setReplicaIndex(replicaIndex);
    Address target=getCallerAddress();
    logSendSyncResponse(partitionId,replicaIndex,target);
    OperationService operationService=nodeEngine.getOperationService();
    operationService.send(syncResponse,target);
  }
  finally {
    partitionService.decrementReplicaSyncProcessCount();
  }
}
