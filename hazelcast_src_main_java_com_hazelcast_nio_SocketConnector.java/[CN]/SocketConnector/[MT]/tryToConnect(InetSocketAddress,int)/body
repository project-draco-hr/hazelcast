{
  final SocketChannel socketChannel=SocketChannel.open();
  connectionManager.initSocket(socketChannel.socket());
  bindSocket(socketChannel);
  final String message="Connecting to " + socketAddress + ", timeout: "+ timeout+ ", bind-any: "+ connectionManager.ioService.isSocketBindAny();
  log(Level.FINEST,message);
  try {
    socketChannel.configureBlocking(true);
    if (timeout > 0) {
      socketChannel.socket().connect(socketAddress,timeout);
    }
 else {
      socketChannel.connect(socketAddress);
    }
    log(Level.FINEST,"Successfully connected to: " + address + " using socket "+ socketChannel.socket());
    MemberSocketInterceptor memberSocketInterceptor=connectionManager.getMemberSocketInterceptor();
    if (memberSocketInterceptor != null) {
      log(Level.FINEST,"Calling member socket interceptor: " + memberSocketInterceptor + " for "+ socketChannel);
      memberSocketInterceptor.onConnect(socketChannel.socket());
    }
    socketChannel.configureBlocking(false);
    final SocketChannelWrapper socketChannelWrapper=connectionManager.wrapSocketChannel(socketChannel,true);
    Connection connection=connectionManager.assignSocketChannel(socketChannelWrapper);
    connectionManager.sendBindRequest(connection,address,true);
  }
 catch (  Exception e) {
    closeSocket(socketChannel);
    final Level level=silent ? Level.FINEST : Level.INFO;
    log(level,"Could not connect to: " + socketAddress + ". Reason: "+ e.getClass().getSimpleName()+ "["+ e.getMessage()+ "]");
    throw e;
  }
}
