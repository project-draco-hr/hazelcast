{
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_IO_THREAD_COUNT,"1");
  JoinConfig join=config.getNetworkConfig().getJoin();
  join.getMulticastConfig().setEnabled(false);
  join.getTcpIpConfig().setEnabled(true).addMember("127.0.0.1").setConnectionTimeoutSeconds(3000);
  Properties props=TestKeyStoreUtil.createSslProperties();
  config.getNetworkConfig().setSSLConfig(new SSLConfig().setEnabled(true).setProperties(props));
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(config);
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  warmUpPartitions(h1,h2,h3);
  Member owner1=h1.getPartitionService().getPartition(0).getOwner();
  Member owner2=h2.getPartitionService().getPartition(0).getOwner();
  Member owner3=h3.getPartitionService().getPartition(0).getOwner();
  assertEquals(owner1,owner2);
  assertEquals(owner1,owner3);
  String name="ssl-test";
  int count=128;
  IMap<Integer,byte[]> map1=h1.getMap(name);
  for (int i=1; i < count; i++) {
    map1.put(i,new byte[1024 * i]);
  }
  IMap<Integer,byte[]> map2=h2.getMap(name);
  for (int i=1; i < count; i++) {
    byte[] bytes=map2.get(i);
    assertEquals(i * 1024,bytes.length);
  }
  IMap<Integer,byte[]> map3=h3.getMap(name);
  for (int i=1; i < count; i++) {
    byte[] bytes=map3.get(i);
    assertEquals(i * 1024,bytes.length);
  }
}
