{
  if (!isMapStoreEnabled()) {
    this.writeBehindQueueManager=WriteBehindManagers.emptyWriteBehindManager();
    return;
  }
  storeWrapper=createMapStoreWrapper(mapConfig.getMapStoreConfig(),nodeEngine);
  if (storeWrapper != null) {
    initMapStore(storeWrapper.getImpl(),mapConfig.getMapStoreConfig(),nodeEngine);
  }
  if (isWriteBehindMapStoreEnabled()) {
    this.writeBehindQueueManager=WriteBehindManagers.createWriteBehindManager(name,mapService,storeWrapper);
    this.writeBehindQueueManager.addStoreListener(new StoreListener<DelayedEntry>(){
      @Override public void beforeStore(      StoreEvent<DelayedEntry> storeEvent){
      }
      @Override public void afterStore(      StoreEvent<DelayedEntry> storeEvent){
        final Data key=(Data)storeEvent.getSource().getKey();
        final int partitionId=mapService.getNodeEngine().getPartitionService().getPartitionId(key);
        final PartitionContainer partitionContainer=mapService.getPartitionContainer(partitionId);
        final RecordStore recordStore=partitionContainer.getExistingRecordStore(name);
        if (recordStore != null) {
          recordStore.removeFromWriteBehindWaitingDeletions(key);
        }
      }
    }
);
    this.writeBehindQueueManager.start();
  }
}
