{
  if (force || initialLoaded.compareAndSet(false,true)) {
    mapReady=false;
    NodeEngine nodeEngine=mapService.getNodeEngine();
    int chunkSize=nodeEngine.getGroupProperties().MAP_LOAD_CHUNK_SIZE.getInteger();
    Set keys=store.loadAllKeys();
    if (keys == null || keys.isEmpty()) {
      mapReady=true;
      return;
    }
    Map<Data,Object> chunk=new HashMap<Data,Object>();
    List<Map<Data,Object>> chunkList=new ArrayList<Map<Data,Object>>();
    for (    Object key : keys) {
      Data dataKey=mapService.toData(key);
      int partitionId=nodeEngine.getPartitionService().getPartitionId(dataKey);
      Address partitionOwner=nodeEngine.getPartitionService().getPartitionOwner(partitionId);
      while (partitionOwner == null) {
        partitionOwner=nodeEngine.getPartitionService().getPartitionOwner(partitionId);
        try {
          Thread.sleep(10);
        }
 catch (        InterruptedException e) {
          ExceptionUtil.rethrow(e);
        }
      }
      if (partitionOwner.equals(nodeEngine.getClusterService().getThisAddress())) {
        chunk.put(dataKey,key);
        if (chunk.size() >= chunkSize) {
          chunkList.add(chunk);
          chunk=new HashMap<Data,Object>();
        }
      }
    }
    if (chunk.size() > 0) {
      chunkList.add(chunk);
    }
    int numberOfChunks=chunkList.size();
    AtomicInteger counter=new AtomicInteger(numberOfChunks);
    for (    Map<Data,Object> currentChunk : chunkList) {
      try {
        nodeEngine.getExecutionService().submit("hz:map-load",new MapLoadAllTask(currentChunk,counter));
      }
 catch (      Throwable t) {
        ExceptionUtil.rethrow(t);
      }
    }
  }
}
