{
  if (!isWriteBehindMapStoreEnabled()) {
    return;
  }
  this.writeBehindQueueManager=createWriteBehindManager();
  this.writeBehindQueueManager.addStoreListener(new StoreListener<DelayedEntry>(){
    @Override public void beforeStore(    StoreEvent<DelayedEntry> storeEvent){
    }
    @Override public void afterStore(    StoreEvent<DelayedEntry> storeEvent){
      final DelayedEntry delayedEntry=storeEvent.getSource();
      final Object value=delayedEntry.getValue();
      if (value != null) {
        return;
      }
      final Data key=(Data)storeEvent.getSource().getKey();
      final int partitionId=delayedEntry.getPartitionId();
      final PartitionContainer partitionContainer=mapService.getPartitionContainer(partitionId);
      final RecordStore recordStore=partitionContainer.getExistingRecordStore(name);
      if (recordStore != null) {
        recordStore.removeFromWriteBehindWaitingDeletions(key);
      }
    }
  }
);
  this.writeBehindQueueManager.start();
}
