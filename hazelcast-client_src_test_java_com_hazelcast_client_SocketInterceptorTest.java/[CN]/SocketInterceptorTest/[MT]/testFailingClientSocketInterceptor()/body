{
  Config config=new Config();
  SocketInterceptorConfig sic=new SocketInterceptorConfig();
  MySocketInterceptor mySocketInterceptor=new MySocketInterceptor(true);
  sic.setImplementation(mySocketInterceptor).setEnabled(true);
  config.getNetworkConfig().setSocketInterceptorConfig(sic);
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  int count=1000;
  for (int i=0; i < count; i++) {
    h1.getMap("default").put(i,"value" + i);
    h2.getMap("default").put(i,"value" + i);
  }
  assertEquals(2,h2.getCluster().getMembers().size());
  assertTrue(mySocketInterceptor.getAcceptCallCount() >= 1);
  assertTrue(mySocketInterceptor.getConnectCallCount() >= 1);
  assertEquals(2,mySocketInterceptor.getInitCallCount());
  assertEquals(0,mySocketInterceptor.getAcceptFailureCount());
  assertEquals(0,mySocketInterceptor.getConnectFailureCount());
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setGroupConfig(new GroupConfig("dev","dev-pass")).addAddress("localhost");
  MySocketInterceptor myClientSocketInterceptor=new MySocketInterceptor(false);
  clientConfig.setSocketInterceptor(myClientSocketInterceptor);
  HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
  for (int i=0; i < count; i++) {
    client.getMap("default").put(i,"value" + i);
  }
  assertTrue(mySocketInterceptor.getAcceptCallCount() >= 2);
  assertTrue(mySocketInterceptor.getConnectCallCount() >= 1);
  assertEquals(1,myClientSocketInterceptor.getConnectCallCount());
  assertEquals(0,myClientSocketInterceptor.getAcceptCallCount());
  assertEquals(1,mySocketInterceptor.getAcceptFailureCount());
  assertEquals(0,myClientSocketInterceptor.getAcceptFailureCount());
  assertEquals(1,myClientSocketInterceptor.getConnectFailureCount());
}
