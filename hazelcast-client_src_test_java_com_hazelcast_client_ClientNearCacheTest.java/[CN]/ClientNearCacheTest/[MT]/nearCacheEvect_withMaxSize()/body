{
  final String mapName="nearCashWithMaxSizeSet";
  final HazelcastInstance hz1=Hazelcast.newHazelcastInstance();
  final HazelcastInstance hz2=Hazelcast.newHazelcastInstance();
  final ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  final int cacheSize=100;
  NearCacheConfig cashConfig=new NearCacheConfig();
  cashConfig.setInMemoryFormat(InMemoryFormat.OBJECT);
  cashConfig.setMaxSize(cacheSize);
  clientConfig.addNearCacheConfig(mapName,cashConfig);
  final HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
  final IMap map=client.getMap(mapName);
  for (int i=0; i < cacheSize + 1; i++) {
    map.put("key" + i,"value" + i);
  }
  for (int i=0; i < cacheSize + 1; i++) {
    map.get(i);
  }
  final int expetedSize=(int)(cacheSize - (cacheSize * 0.2));
  HazelcastTestSupport.assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      final NearCacheStats stats=map.getLocalMapStats().getNearCacheStats();
      assertEquals(expetedSize,stats.getOwnedEntryCount());
    }
  }
);
}
