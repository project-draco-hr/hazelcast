{
  final int n=6;
  final int runCount=500;
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(n);
  final Config config=new Config();
  config.setProperty(GroupProperties.PROP_WAIT_SECONDS_BEFORE_JOIN,"0");
  final String mapName="testIndexCleanupOnMigration";
  config.getMapConfig(mapName).addMapIndexConfig(new MapIndexConfig("name",false));
  ExecutorService ex=Executors.newFixedThreadPool(n);
  final CountDownLatch latch=new CountDownLatch(n);
  final AtomicInteger countdown=new AtomicInteger(n * runCount);
  final Random rand=new Random();
  for (int i=0; i < n; i++) {
    Thread.sleep(rand.nextInt((i + 1) * 100) + 10);
    ex.execute(new Runnable(){
      public void run(){
        final HazelcastInstance hz=nodeFactory.newHazelcastInstance(config);
        final String name=UUID.randomUUID().toString();
        final IMap<Object,Value> map=hz.getMap(mapName);
        map.put(name,new Value(name,0));
        map.size();
        try {
          for (int j=1; j <= runCount; j++) {
            Value v=map.get(name);
            v.setIndex(j);
            map.put(name,v);
            try {
              Thread.sleep(rand.nextInt(100) + 1);
            }
 catch (            InterruptedException e) {
              break;
            }
            Value v1=map.get(name);
            assertEquals(v,v1);
            EntryObject e=new PredicateBuilder().getEntryObject();
            Predicate<?,?> predicate=e.get("name").equal(name);
            Collection<Value> values=map.values(predicate);
            assertEquals(1,values.size());
            Value v2=values.iterator().next();
            assertEquals(v1,v2);
            countdown.decrementAndGet();
          }
        }
 catch (        AssertionError e) {
          e.printStackTrace();
        }
catch (        Throwable e) {
          e.printStackTrace();
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  try {
    assertTrue(latch.await(10,TimeUnit.MINUTES));
    assertEquals(0,countdown.get());
  }
  finally {
    ex.shutdownNow();
  }
}
