{
  final LinkedList<LifecycleState> list=new LinkedList<LifecycleState>();
  list.offer(LifecycleState.STARTING);
  list.offer(LifecycleState.STARTED);
  list.offer(LifecycleState.CLIENT_CONNECTED);
  list.offer(LifecycleState.CLIENT_DISCONNECTED);
  list.offer(LifecycleState.CLIENT_CONNECTED);
  final HazelcastInstance instance=hazelcastFactory.newHazelcastInstance();
  final CountDownLatch latch=new CountDownLatch(list.size());
  LifecycleListener listener=new LifecycleListener(){
    public void stateChanged(    LifecycleEvent event){
      final LifecycleState state=list.poll();
      if (state != null && state.equals(event.getState())) {
        latch.countDown();
      }
    }
  }
;
  final ListenerConfig listenerConfig=new ListenerConfig(listener);
  final ClientConfig clientConfig=new ClientConfig();
  clientConfig.addListenerConfig(listenerConfig);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(100);
  hazelcastFactory.newHazelcastClient(clientConfig);
  instance.shutdown();
  hazelcastFactory.newHazelcastInstance();
  assertTrue(latch.await(60,TimeUnit.SECONDS));
}
