{
  logger.finest("Starting join...");
  clusterServiceLock.lock();
  try {
    try {
      joinInProgress=true;
      node.getPartitionService().pauseMigration();
      Collection<MemberImpl> members=clusterService.getMemberImpls();
      Collection<MemberInfo> memberInfos=createMemberInfoList(members);
      for (      MemberInfo memberJoining : joiningMembers.values()) {
        memberInfos.add(memberJoining);
      }
      long time=clusterClock.getClusterTime();
      Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      boolean createPostJoinOperation=(postJoinOps != null && postJoinOps.length > 0);
      PostJoinOperation postJoinOp=(createPostJoinOperation ? new PostJoinOperation(postJoinOps) : null);
      clusterService.updateMembers(memberInfos);
      int count=members.size() - 1 + joiningMembers.size();
      List<Future> calls=new ArrayList<Future>(count);
      PartitionRuntimeState partitionState=node.getPartitionService().createPartitionState();
      for (      MemberInfo member : joiningMembers.values()) {
        long startTime=clusterClock.getClusterStartTime();
        Operation joinOperation=new FinalizeJoinOperation(memberInfos,postJoinOp,time,clusterService.getClusterId(),startTime,clusterStateManager.getState(),partitionState);
        calls.add(invokeClusterOperation(joinOperation,member.getAddress()));
      }
      for (      MemberImpl member : members) {
        if (member.localMember() || joiningMembers.containsKey(member.getAddress())) {
          continue;
        }
        Operation infoUpdateOperation=new MemberInfoUpdateOperation(memberInfos,time,true);
        calls.add(invokeClusterOperation(infoUpdateOperation,member.getAddress()));
      }
      int timeout=Math.min(calls.size() * FINALIZE_JOIN_TIMEOUT_FACTOR,FINALIZE_JOIN_MAX_TIMEOUT);
      waitWithDeadline(calls,timeout,TimeUnit.SECONDS,whileFinalizeJoinsExceptionHandler);
    }
  finally {
      reset();
      node.getPartitionService().resumeMigration();
    }
  }
  finally {
    clusterServiceLock.unlock();
  }
}
