{
  DataRecordEntry mergingDataEntry=(DataRecordEntry)mergingEntry;
  if (!mergingDataEntry.isValid()) {
    return REMOVE_EXISTING;
  }
 else {
    final Object existingObject=existingEntry != null ? existingEntry.getValue() : null;
    final Object mergingObject=mergingEntry.getValue();
    if (existingObject != null && existingObject instanceof CacheEntry && mergingObject != null && mergingObject instanceof CacheEntry) {
      final CacheEntry existing=(CacheEntry)existingObject;
      final CacheEntry merging=(CacheEntry)mergingObject;
      final Object mergingVersionObject=merging.getVersion();
      final Object existingVersionObject=existing.getVersion();
      if (mergingVersionObject != null && existingVersionObject != null && mergingVersionObject instanceof Comparable && existingVersionObject instanceof Comparable) {
        final Comparable mergingVersion=(Comparable)mergingVersionObject;
        final Comparable existingVersion=(Comparable)existingVersionObject;
        if (mergingVersion.compareTo(existingVersion) > 0) {
          return mergingDataEntry.getValueData();
        }
 else {
          return ((DataRecordEntry)existingEntry).getValueData();
        }
      }
    }
    return mergingDataEntry.getValueData();
  }
}
