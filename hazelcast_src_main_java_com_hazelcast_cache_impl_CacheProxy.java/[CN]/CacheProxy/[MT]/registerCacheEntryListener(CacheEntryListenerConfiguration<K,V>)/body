{
  ensureOpen();
  if (cacheEntryListenerConfiguration == null) {
    throw new NullPointerException("CacheEntryListenerConfiguration can't be " + "null");
  }
  final CacheService service=getService();
  final CacheEventListenerAdaptor<K,V> entryListener=new CacheEventListenerAdaptor<K,V>(this,cacheEntryListenerConfiguration,nodeEngine.getSerializationService());
  final String regId=service.registerListener(getDistributedObjectName(),entryListener);
  if (regId != null) {
    cacheConfig.addCacheEntryListenerConfiguration(cacheEntryListenerConfiguration);
    if (cacheEntryListenerConfiguration.isSynchronous()) {
      syncListenerRegistrations.putIfAbsent(cacheEntryListenerConfiguration,regId);
      registerCompletionListener();
    }
 else {
      asyncListenerRegistrations.putIfAbsent(cacheEntryListenerConfiguration,regId);
    }
    final OperationService operationService=nodeEngine.getOperationService();
    final Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    for (    MemberImpl member : members) {
      if (!member.localMember()) {
        final Operation op=new CacheListenerRegistrationOperation(getDistributedObjectName(),cacheEntryListenerConfiguration,true);
        final InternalCompletableFuture<Object> f2=operationService.invokeOnTarget(CacheService.SERVICE_NAME,op,member.getAddress());
        f2.getSafely();
      }
    }
  }
}
