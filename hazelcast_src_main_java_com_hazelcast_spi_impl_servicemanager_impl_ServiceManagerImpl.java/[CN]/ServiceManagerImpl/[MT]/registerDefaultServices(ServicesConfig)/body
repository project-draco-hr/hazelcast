{
  if (!servicesConfig.isEnableDefaults()) {
    return;
  }
  logger.finest("Registering default services...");
  registerService(MapService.SERVICE_NAME,createService(MapService.class));
  registerService(LockService.SERVICE_NAME,new LockServiceImpl(nodeEngine));
  registerService(QueueService.SERVICE_NAME,new QueueService(nodeEngine));
  registerService(TopicService.SERVICE_NAME,new TopicService());
  registerService(ReliableTopicService.SERVICE_NAME,new ReliableTopicService(nodeEngine));
  registerService(MultiMapService.SERVICE_NAME,new MultiMapService(nodeEngine));
  registerService(ListService.SERVICE_NAME,new ListService(nodeEngine));
  registerService(SetService.SERVICE_NAME,new SetService(nodeEngine));
  registerService(DistributedExecutorService.SERVICE_NAME,new DistributedExecutorService());
  registerService(DistributedDurableExecutorService.SERVICE_NAME,new DistributedDurableExecutorService(nodeEngine));
  registerService(AtomicLongService.SERVICE_NAME,new AtomicLongService());
  registerService(AtomicReferenceService.SERVICE_NAME,new AtomicReferenceService());
  registerService(CountDownLatchService.SERVICE_NAME,new CountDownLatchService());
  registerService(SemaphoreService.SERVICE_NAME,new SemaphoreService(nodeEngine));
  registerService(IdGeneratorService.SERVICE_NAME,new IdGeneratorService(nodeEngine));
  registerService(MapReduceService.SERVICE_NAME,new MapReduceService(nodeEngine));
  registerService(ReplicatedMapService.SERVICE_NAME,new ReplicatedMapService(nodeEngine));
  registerService(RingbufferService.SERVICE_NAME,new RingbufferService(nodeEngine));
  registerService(XAService.SERVICE_NAME,new XAService(nodeEngine));
  registerCacheServiceIfAvailable();
  readServiceDescriptors();
}
