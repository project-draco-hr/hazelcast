{
  int internalPoolSize=properties.getInteger(INTERNAL_EXECUTOR_POOL_SIZE);
  if (internalPoolSize <= 0) {
    internalPoolSize=Integer.parseInt(INTERNAL_EXECUTOR_POOL_SIZE.getDefaultValue());
  }
  int executorPoolSize=poolSize;
  if (executorPoolSize <= 0) {
    executorPoolSize=Runtime.getRuntime().availableProcessors();
  }
  logger=loggingService.getLogger(ClientExecutionService.class);
  internalExecutor=new ScheduledThreadPoolExecutor(internalPoolSize,new PoolExecutorThreadFactory(threadGroup,name + ".internal-",classLoader),new RejectedExecutionHandler(){
    public void rejectedExecution(    Runnable r,    ThreadPoolExecutor executor){
      String message="Internal executor rejected task: " + r + ", because client is shutting down...";
      logger.finest(message);
      throw new RejectedExecutionException(message);
    }
  }
);
  userExecutor=new ThreadPoolExecutor(executorPoolSize,executorPoolSize,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>(),new PoolExecutorThreadFactory(threadGroup,name + ".user-",classLoader),new RejectedExecutionHandler(){
    public void rejectedExecution(    Runnable r,    ThreadPoolExecutor executor){
      String message="Internal executor rejected task: " + r + ", because client is shutting down...";
      logger.finest(message);
      throw new RejectedExecutionException(message);
    }
  }
);
}
