{
  Data predicateData=toData(predicate);
  Data mapperData=toData(mapper);
  Data combinerFactoryData=toData(combinerFactory);
  Data reducerFactoryData=toData(reducerFactory);
  List<Data> list=new ArrayList<Data>(keys.size());
  for (  Object key : keys) {
    list.add(toData(key));
  }
  if (keyValueSource instanceof MapKeyValueSource) {
    MapKeyValueSource source=(MapKeyValueSource)keyValueSource;
    return MapReduceForMapCodec.encodeRequest(name,jobId,predicateData,mapperData,combinerFactoryData,reducerFactoryData,source.getMapName(),chunkSize,list,topologyChangedStrategy.name());
  }
 else   if (keyValueSource instanceof ListKeyValueSource) {
    ListKeyValueSource source=(ListKeyValueSource)keyValueSource;
    return MapReduceForMapCodec.encodeRequest(name,jobId,predicateData,mapperData,combinerFactoryData,reducerFactoryData,source.getListName(),chunkSize,list,topologyChangedStrategy.name());
  }
 else   if (keyValueSource instanceof SetKeyValueSource) {
    SetKeyValueSource source=(SetKeyValueSource)keyValueSource;
    return MapReduceForMapCodec.encodeRequest(name,jobId,predicateData,mapperData,combinerFactoryData,reducerFactoryData,source.getSetName(),chunkSize,list,topologyChangedStrategy.name());
  }
 else   if (keyValueSource instanceof MultiMapKeyValueSource) {
    MultiMapKeyValueSource source=(MultiMapKeyValueSource)keyValueSource;
    return MapReduceForMapCodec.encodeRequest(name,jobId,predicateData,mapperData,combinerFactoryData,reducerFactoryData,source.getMultiMapName(),chunkSize,list,topologyChangedStrategy.name());
  }
  return MapReduceForCustomCodec.encodeRequest(name,jobId,predicateData,mapperData,combinerFactoryData,reducerFactoryData,toData(keyValueSource),chunkSize,list,topologyChangedStrategy.name());
}
