{
  try {
    final String jobId=UuidUtil.buildRandomUuidString();
    ClientMessage request=getRequest(name,jobId,keys,predicate,mapper,combinerFactory,reducerFactory,keyValueSource,chunkSize,topologyChangedStrategy);
    final ClientCompletableFuture completableFuture=new ClientCompletableFuture(jobId);
    final ClientInvocation clientInvocation=new ClientInvocation(getClient(),request);
    final ClientInvocationFuture future=clientInvocation.invoke();
    future.andThen(new ExecutionCallback(){
      @Override public void onResponse(      Object res){
        Map map=toObjectMap((ClientMessage)res);
        Object response=map;
        try {
          if (collator != null) {
            response=collator.collate(((Map)response).entrySet());
          }
        }
  finally {
          completableFuture.setResult(response);
          trackableJobs.remove(jobId);
        }
      }
      @Override public void onFailure(      Throwable throwable){
        Throwable t=throwable;
        try {
          if (t instanceof ExecutionException && t.getCause() instanceof CancellationException) {
            t=t.getCause();
          }
          completableFuture.setResult(t);
        }
  finally {
          trackableJobs.remove(jobId);
        }
      }
    }
);
    Address runningMember=clientInvocation.getSendConnection().getRemoteEndpoint();
    trackableJobs.putIfAbsent(jobId,new ClientTrackableJob<T>(jobId,runningMember,completableFuture));
    return completableFuture;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
