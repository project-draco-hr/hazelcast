{
  isNotNull(timeUnit,"timeUnit");
  long totalTimeoutMs=timeUnit.toMillis(timeout);
  while (true) {
    long timeoutStepMs=Math.min(MIN_WAIT_ON_FUTURE_TIMEOUT_MILLIS,totalTimeoutMs);
    try {
      return future.get(timeoutStepMs,TimeUnit.MILLISECONDS);
    }
 catch (    TimeoutException t) {
      totalTimeoutMs-=timeoutStepMs;
      if (totalTimeoutMs <= 0) {
        throw t;
      }
      if (!node.isRunning()) {
        future.cancel(true);
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
}
