{
  final IMap map=getMap();
  int size=10;
  for (int i=0; i < size; i++) {
    map.put(i,new SampleObjects.Employee(i,"",0,false,0D,SampleObjects.State.STATE1));
  }
  EntryProcessor entryProcessor=new ChangeStateEntryProcessor();
  EntryObject e=new PredicateBuilder().getEntryObject();
  Predicate p=e.get("id").lessThan(5);
  MapExecuteWithPredicateRequest request=new MapExecuteWithPredicateRequest(map.getName(),entryProcessor,p);
  final SimpleClient client=getClient();
  client.send(request);
  MapEntrySet entrySet=(MapEntrySet)client.receive();
  Map<Integer,Employee> result=new HashMap<Integer,Employee>();
  for (  Map.Entry<Data,Data> dataEntry : entrySet.getEntrySet()) {
    final Data keyData=dataEntry.getKey();
    final Data valueData=dataEntry.getValue();
    Integer key=(Integer)TestUtil.toObject(keyData);
    result.put(key,(Employee)TestUtil.toObject(valueData));
  }
  assertEquals(5,entrySet.getEntrySet().size());
  for (int i=0; i < 5; i++) {
    assertEquals(SampleObjects.State.STATE2,((Employee)map.get(i)).getState());
  }
  for (int i=5; i < size; i++) {
    assertEquals(SampleObjects.State.STATE1,((Employee)map.get(i)).getState());
  }
  for (int i=0; i < 5; i++) {
    assertEquals(result.get(i).getState(),SampleObjects.State.STATE2);
  }
}
