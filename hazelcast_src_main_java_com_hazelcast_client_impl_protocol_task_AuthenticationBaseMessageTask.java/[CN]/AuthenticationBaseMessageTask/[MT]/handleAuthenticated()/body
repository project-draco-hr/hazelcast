{
  if (isOwnerConnection()) {
    final String uuid=getUuid();
    final String localMemberUUID=clientEngine.getLocalMember().getUuid();
    principal=new ClientPrincipal(uuid,localMemberUUID);
    reAuthLocal();
    Collection<Member> members=nodeEngine.getClusterService().getMembers();
    for (    Member member : members) {
      if (!member.localMember()) {
        ClientReAuthOperation op=new ClientReAuthOperation(uuid);
        op.setCallerUuid(localMemberUUID);
        nodeEngine.getOperationService().send(op,member.getAddress());
      }
    }
  }
  boolean isNotMember=clientEngine.getClusterService().getMember(principal.getOwnerUuid()) == null;
  if (isNotMember) {
    byte status=AuthenticationStatus.CREDENTIALS_FAILED.getId();
    return encodeAuth(status,null,null,null,serializationService.getVersion());
  }
  Connection connection=endpoint.getConnection();
  ILogger logger=clientEngine.getLogger(getClass());
  endpoint.authenticated(principal,credentials,isOwnerConnection());
  setConnectionType();
  logger.log(Level.INFO,"Received auth from " + connection + ", successfully authenticated"+ ", principal : "+ principal+ ", owner connection : "+ isOwnerConnection());
  endpointManager.registerEndpoint(endpoint);
  clientEngine.bind(endpoint);
  final Address thisAddress=clientEngine.getThisAddress();
  byte status=AuthenticationStatus.AUTHENTICATED.getId();
  return encodeAuth(status,thisAddress,principal.getUuid(),principal.getOwnerUuid(),serializationService.getVersion());
}
