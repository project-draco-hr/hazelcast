{
  try {
    int mapSize=map.size();
    if (mapSize == 0) {
      return;
    }
    boolean useBatching=isPutAllUseBatching(mapSize);
    int partitionCount=partitionService.getPartitionCount();
    int initialSize=getPutAllInitialSize(useBatching,mapSize,partitionCount);
    Map<Address,List<Integer>> memberPartitionsMap=partitionService.getMemberPartitionsMap();
    MutableLong[] counterPerMember=null;
    Address[] addresses=null;
    if (useBatching) {
      counterPerMember=new MutableLong[partitionCount];
      addresses=new Address[partitionCount];
      for (      Entry<Address,List<Integer>> addressListEntry : memberPartitionsMap.entrySet()) {
        MutableLong counter=new MutableLong();
        Address address=addressListEntry.getKey();
        for (        int partitionId : addressListEntry.getValue()) {
          counterPerMember[partitionId]=counter;
          addresses[partitionId]=address;
        }
      }
    }
    MapEntries[] entriesPerPartition=new MapEntries[partitionCount];
    for (    Entry entry : map.entrySet()) {
      checkNotNull(entry.getKey(),NULL_KEY_IS_NOT_ALLOWED);
      checkNotNull(entry.getValue(),NULL_VALUE_IS_NOT_ALLOWED);
      Data keyData=toData(entry.getKey(),partitionStrategy);
      int partitionId=partitionService.getPartitionId(keyData);
      MapEntries entries=entriesPerPartition[partitionId];
      if (entries == null) {
        entries=new MapEntries(initialSize);
        entriesPerPartition[partitionId]=entries;
      }
      entries.add(keyData,toData(entry.getValue()));
      if (useBatching) {
        long currentSize=++counterPerMember[partitionId].value;
        if (currentSize % putAllBatchSize == 0) {
          List<Integer> partitions=memberPartitionsMap.get(addresses[partitionId]);
          invokePutAllOperation(addresses[partitionId],partitions,entriesPerPartition);
        }
      }
    }
    for (    Entry<Address,List<Integer>> entry : memberPartitionsMap.entrySet()) {
      invokePutAllOperation(entry.getKey(),entry.getValue(),entriesPerPartition);
    }
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}
