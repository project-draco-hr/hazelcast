{
  int partitionCount=partitionService.getPartitionCount();
  try {
    List<Future> futures=new ArrayList<Future>(partitionCount);
    MapEntrySet[] entrySetPerPartition=new MapEntrySet[partitionCount];
    for (    Entry entry : entries.entrySet()) {
      checkNotNull(entry.getKey(),NULL_KEY_IS_NOT_ALLOWED);
      checkNotNull(entry.getValue(),NULL_VALUE_IS_NOT_ALLOWED);
      int partitionId=partitionService.getPartitionId(entry.getKey());
      MapEntrySet entrySet=entrySetPerPartition[partitionId];
      if (entrySet == null) {
        entrySet=new MapEntrySet();
        entrySetPerPartition[partitionId]=entrySet;
      }
      Data keyData=mapServiceContext.toData(entry.getKey(),partitionStrategy);
      Data valueData=mapServiceContext.toData(entry.getValue());
      entrySet.add(new AbstractMap.SimpleImmutableEntry<Data,Data>(keyData,valueData));
    }
    for (int partitionId=0; partitionId < entrySetPerPartition.length; partitionId++) {
      MapEntrySet entrySet=entrySetPerPartition[partitionId];
      if (entrySet != null) {
        Future f=createPutAllOperationFuture(name,entrySet,partitionId);
        futures.add(f);
      }
    }
    for (    Future future : futures) {
      future.get();
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}
