{
  int partitionCount=partitionService.getPartitionCount();
  try {
    List<Future> futures=new ArrayList<Future>(partitionCount);
    MapEntries[] entriesPerPartition=new MapEntries[partitionCount];
    for (    Entry entry : m.entrySet()) {
      checkNotNull(entry.getKey(),NULL_KEY_IS_NOT_ALLOWED);
      checkNotNull(entry.getValue(),NULL_VALUE_IS_NOT_ALLOWED);
      Data keyData=toData(entry.getKey(),partitionStrategy);
      int partitionId=partitionService.getPartitionId(keyData);
      MapEntries entries=entriesPerPartition[partitionId];
      if (entries == null) {
        entries=new MapEntries();
        entriesPerPartition[partitionId]=entries;
      }
      entries.add(new AbstractMap.SimpleImmutableEntry<Data,Data>(keyData,toData(entry.getValue())));
    }
    for (int partitionId=0; partitionId < entriesPerPartition.length; partitionId++) {
      MapEntries entries=entriesPerPartition[partitionId];
      if (entries != null) {
        Future f=createPutAllOperationFuture(name,entries,partitionId);
        futures.add(f);
      }
    }
    for (    Future future : futures) {
      future.get();
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}
