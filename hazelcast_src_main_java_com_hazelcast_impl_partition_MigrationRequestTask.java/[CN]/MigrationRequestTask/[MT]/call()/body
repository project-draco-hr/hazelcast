{
  if (to.equals(from))   return Boolean.TRUE;
  Node node=((FactoryImpl)hazelcast).node;
  PartitionManager pm=node.concurrentMapManager.getPartitionManager();
  try {
    Member target=pm.getMember(to);
    if (target == null)     return Boolean.FALSE;
    CostAwareRecordList costAwareRecordList=pm.getActivePartitionRecords(partitionId,replicaIndex,to,diffOnly);
    DistributedTask task=new DistributedTask(new MigrationTask(partitionId,costAwareRecordList,replicaIndex,from),target);
    Future future=node.factory.getExecutorService().submit(task);
    return (Boolean)future.get(400,TimeUnit.SECONDS);
  }
 catch (  Throwable e) {
    Level level=Level.WARNING;
    if (e instanceof ExecutionException) {
      e=e.getCause();
    }
    if (e instanceof MemberLeftException || e instanceof IllegalStateException) {
      level=Level.FINEST;
    }
    node.getLogger(MigrationRequestTask.class.getName()).log(level,e.getMessage(),e);
  }
  return Boolean.FALSE;
}
