{
  if (to.equals(from)) {
    getLogger().log(Level.FINEST,"To and from addresses are same! => " + toString());
    return Boolean.TRUE;
  }
  if (from == null) {
    getLogger().log(Level.FINEST,"From address is null => " + toString());
  }
  final Node node=((FactoryImpl)hazelcast).node;
  PartitionManager pm=node.concurrentMapManager.getPartitionManager();
  try {
    Member target=pm.getMember(to);
    if (target == null) {
      getLogger().log(Level.WARNING,"Target member of task could not be found! => " + toString());
      return Boolean.FALSE;
    }
    final CostAwareRecordList costAwareRecordList=pm.getActivePartitionRecords(partitionId,replicaIndex,to,diffOnly);
    DistributedTask task=new DistributedTask(new MigrationTask(partitionId,costAwareRecordList,replicaIndex,from),target);
    Future future=node.factory.getExecutorService().submit(task);
    return (Boolean)future.get(400,TimeUnit.SECONDS);
  }
 catch (  Throwable e) {
    Level level=Level.WARNING;
    if (e instanceof ExecutionException) {
      e=e.getCause();
    }
    if (e instanceof MemberLeftException || e instanceof IllegalStateException) {
      level=Level.FINEST;
    }
    getLogger().log(level,e.getMessage(),e);
  }
  return Boolean.FALSE;
}
