{
  HazelcastClient client=mock(HazelcastClient.class);
  Map<Long,Call> callMap=new HashMap<Long,Call>();
  assertTrue(callMap.isEmpty());
  OutRunnable out=new OutRunnable(client,callMap,mock(PacketWriter.class));
  when(client.getOutRunnable()).thenReturn(out);
  ConnectionManager connectionManager=mock(ConnectionManager.class);
  Connection connection=mock(Connection.class);
  when(connectionManager.getConnection()).thenReturn(connection);
  when(client.getConnectionManager()).thenReturn(connectionManager);
  ListenerManager listenerManager=mock(ListenerManager.class);
  when(client.getListenerManager()).thenReturn(listenerManager);
  final List<Call> calls=Collections.emptyList();
  when(listenerManager.getListenerCalls()).thenReturn(calls);
  final MapClientProxy<String,String> imap=new MapClientProxy(client,"default");
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch correct=new CountDownLatch(1);
  final long ttl=10;
  final TimeUnit timeunit=TimeUnit.MILLISECONDS;
  final String key="1";
  final String value="value";
  new Thread(new Runnable(){
    public void run(){
      latch.countDown();
      String oldValue=imap.putIfAbsent(key,value,ttl,timeunit);
      if (oldValue.equals("key")) {
        correct.countDown();
      }
    }
  }
).start();
  latch.await();
  Thread.sleep(10);
  out.customRun();
  Call call=callMap.values().iterator().next();
  Packet request=call.getRequest();
  long timeout=request.getTimeout();
  assertEquals(timeout,timeunit.toMillis(ttl));
  assertEquals(key,toObject(request.getKey()));
  assertEquals(value,toObject(request.getValue()));
  Packet packet=new Packet();
  packet.setValue(toByte("key"));
  call.setResponse(packet);
  assertTrue("",correct.await(1,TimeUnit.SECONDS));
}
