{
  if (proxy instanceof MProxy) {
    MProxy mProxy=(MProxy)proxy;
    CMap cmap=node.concurrentMapManager.getMap(mProxy.getLongName());
    if (cmap == null) {
      logger.log(Level.WARNING,"CMap[" + mProxy.getLongName() + "] has not been created yet! Initialization attempt failed!");
      return;
    }
    if (!cmap.isMapForQueue() && cmap.initState.notInitialized()) {
synchronized (cmap.getInitLock()) {
        if (cmap.initState.notInitialized()) {
          final MapStoreConfig mapStoreConfig=cmap.mapConfig.getMapStoreConfig();
          if (mapStoreConfig != null && mapStoreConfig.isEnabled()) {
            cmap.initState=InitializationState.INITIALIZING;
            try {
              ExecutorService es=getExecutorService();
              final Set<Member> members=new HashSet<Member>(getCluster().getMembers());
              members.remove(node.localMember);
              final MultiTask task=new MultiTask(new InitializeMap(mProxy.getName()),members);
              es.execute(task);
              if (cmap.loader != null) {
                Set keys=cmap.loader.loadAllKeys();
                if (keys != null) {
                  int count=0;
                  PartitionService partitionService=getPartitionService();
                  Queue<Set> chunks=new ConcurrentLinkedQueue<Set>();
                  Set ownedKeys=new HashSet();
                  for (                  Object key : keys) {
                    if (partitionService.getPartition(key).getOwner().localMember()) {
                      ownedKeys.add(key);
                      count++;
                      if (ownedKeys.size() >= node.groupProperties.MAP_LOAD_CHUNK_SIZE.getInteger()) {
                        chunks.add(ownedKeys);
                        ownedKeys=new HashSet();
                      }
                    }
                  }
                  chunks.add(ownedKeys);
                  loadChunks(mProxy,cmap,chunks);
                  logger.log(Level.INFO,node.address + "[" + mProxy.getName()+ "] loaded "+ count+ " in total.");
                }
              }
              task.get();
            }
 catch (            Throwable e) {
              if (node.isActive()) {
                logger.log(Level.SEVERE,e.getMessage(),e);
              }
            }
          }
        }
        cmap.initState=InitializationState.INITIALIZED;
      }
    }
  }
}
