{
  FactoryImpl factory=null;
  try {
    factory=new FactoryImpl(instanceName,config);
    factories.put(instanceName,factory);
    boolean firstMember=(factory.node.getClusterImpl().getMembers().iterator().next().localMember());
    int initialWaitSeconds=factory.node.groupProperties.INITIAL_WAIT_SECONDS.getInteger();
    if (initialWaitSeconds > 0) {
      try {
        Thread.sleep(initialWaitSeconds * 1000);
        if (firstMember) {
          final ConcurrentMapManager concurrentMapManager=factory.node.concurrentMapManager;
        }
 else {
          Thread.sleep(4 * 1000);
        }
      }
 catch (      InterruptedException ignored) {
      }
    }
    int initialMinClusterSize=factory.node.groupProperties.INITIAL_MIN_CLUSTER_SIZE.getInteger();
    while (factory.node.getClusterImpl().getMembers().size() < initialMinClusterSize) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ignored) {
      }
    }
    if (initialMinClusterSize > 0) {
      if (firstMember) {
        final ConcurrentMapManager concurrentMapManager=factory.node.concurrentMapManager;
      }
 else {
        Thread.sleep(4 * 1000);
      }
      factory.logger.log(Level.INFO,"HazelcastInstance starting after waiting for cluster size of " + initialMinClusterSize);
    }
    factory.lifecycleService.fireLifecycleEvent(STARTED);
    return factory.hazelcastInstanceProxy;
  }
 catch (  Throwable t) {
    if (factory != null) {
      factory.logger.log(Level.SEVERE,t.getMessage(),t);
    }
    Util.throwUncheckedException(t);
    return null;
  }
}
