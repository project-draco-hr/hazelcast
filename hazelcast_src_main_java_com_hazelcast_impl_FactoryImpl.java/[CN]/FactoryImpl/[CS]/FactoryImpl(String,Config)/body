{
  this.name=name;
  node=new Node(this,config);
  globalProxies=new MProxyImpl("c:__hz_Proxies",this);
  logger=node.getLogger(FactoryImpl.class.getName());
  transactionFactory=new TransactionFactory(this);
  hazelcastInstanceProxy=new HazelcastInstanceProxy(this);
  locksMapProxy=new MProxyImpl("c:__hz_Locks",this);
  idGeneratorMapProxy=new MProxyImpl("c:__hz_IdGenerator",this);
  memberStatsTopicProxy=new TopicProxyImpl("t:" + MemberStatsPublisher.STATS_TOPIC_NAME,this);
  node.start();
  memberStatsPublisher=new MemberStatsPublisher(memberStatsTopicProxy,node);
  globalProxies.addEntryListener(new EntryListener(){
    public void entryAdded(    EntryEvent event){
      final ProxyKey proxyKey=(ProxyKey)event.getKey();
      if (!proxies.containsKey(proxyKey)) {
        logger.log(Level.FINEST,"Instance created " + proxyKey);
        node.clusterService.enqueueAndReturn(new Processable(){
          public void process(){
            createProxy(proxyKey);
          }
        }
);
      }
    }
    public void entryRemoved(    EntryEvent event){
      final ProxyKey proxyKey=(ProxyKey)event.getKey();
      if (proxies.containsKey(proxyKey)) {
        logger.log(Level.FINEST,"Instance removed " + proxyKey);
        node.clusterService.enqueueAndReturn(new Processable(){
          public void process(){
            destroyProxy(proxyKey);
          }
        }
);
      }
    }
    public void entryUpdated(    EntryEvent event){
      logger.log(Level.FINEST,"Instance updated " + event.getKey());
    }
    public void entryEvicted(    EntryEvent event){
      logger.log(Level.FINEST,"Instance evicted " + event.getKey());
    }
  }
,false);
  if (node.getClusterImpl().getMembers().size() > 1) {
    Set<ProxyKey> proxyKeys=globalProxies.allKeys();
    for (    final ProxyKey proxyKey : proxyKeys) {
      if (!proxies.containsKey(proxyKey)) {
        node.clusterService.enqueueAndReturn(new Processable(){
          public void process(){
            createProxy(proxyKey);
          }
        }
);
      }
    }
  }
}
