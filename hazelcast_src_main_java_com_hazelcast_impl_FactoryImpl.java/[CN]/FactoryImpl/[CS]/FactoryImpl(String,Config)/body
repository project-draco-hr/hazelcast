{
  this.name=name;
  lifecycleService=new LifecycleServiceImpl(FactoryImpl.this);
  managedContext=new HazelcastManagedContext(this,config.getManagedContext());
  node=new Node(this,config);
  lifecycleService.fireLifecycleEvent(STARTING);
  proxyFactory=node.initializer.getProxyFactory();
  logger=node.getLogger(FactoryImpl.class.getName());
  hazelcastInstanceProxy=new HazelcastInstanceProxy(this);
  locksMapProxy=proxyFactory.createMapProxy(Prefix.LOCKS_MAP_HAZELCAST);
  node.start();
  if (!node.isActive()) {
    throw new IllegalStateException("Node failed to start!");
  }
  final Set<Member> members=node.getClusterImpl().getMembers();
  if (members.size() > 1) {
    Member target=null;
    for (    Member member : members) {
      if (!member.isLiteMember() && !member.localMember()) {
        target=member;
        break;
      }
    }
    if (target != null) {
      DistributedTask task=new DistributedTask(new GetAllProxyKeysCallable(),target);
      Future f=getExecutorService().submit(task);
      try {
        final Set<ProxyKey> proxyKeys=(Set<ProxyKey>)f.get(10,TimeUnit.SECONDS);
        for (        final ProxyKey proxyKey : proxyKeys) {
          if (!proxies.containsKey(proxyKey)) {
            node.clusterService.enqueueAndReturn(new Processable(){
              public void process(){
                createProxy(proxyKey);
              }
            }
);
          }
        }
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,e.getMessage(),e);
      }
    }
  }
  managementService=new ManagementService(this);
  managementService.register();
}
