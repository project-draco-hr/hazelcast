{
  long startSequence=ringbuffer.tailSequence() + 1;
  IFunction<String,Boolean> filter=new IFunction<String,Boolean>(){
    @Override public Boolean apply(    String input){
      return input.startsWith("good");
    }
  }
;
  ReadManyOperation op=new ReadManyOperation(ringbuffer.getName(),startSequence,3,3,filter);
  op.setNodeEngine(nodeEngine);
  assertTrue(op.shouldWait());
  ReadResultSetImpl response=getReadResultSet(op);
  assertEquals(startSequence,op.sequence);
  assertTrue(getReadResultSet(op).isEmpty());
  ringbuffer.add("bad1");
  assertTrue(op.shouldWait());
  assertEquals(startSequence + 1,op.sequence);
  assertEquals(1,response.readCount());
  assertEquals(0,response.size());
  ringbuffer.add("good1");
  assertTrue(op.shouldWait());
  assertEquals(startSequence + 2,op.sequence);
  assertEquals(asList("good1"),response);
  assertEquals(2,response.readCount());
  ringbuffer.add("bad2");
  assertTrue(op.shouldWait());
  assertEquals(startSequence + 3,op.sequence);
  assertEquals(asList("good1"),response);
  assertEquals(3,response.readCount());
  ringbuffer.add("good2");
  assertTrue(op.shouldWait());
  assertEquals(startSequence + 4,op.sequence);
  assertEquals(asList("good1","good2"),response);
  assertEquals(4,response.readCount());
  ringbuffer.add("bad3");
  assertTrue(op.shouldWait());
  assertEquals(startSequence + 5,op.sequence);
  assertEquals(asList("good1","good2"),response);
  assertEquals(5,response.readCount());
  ringbuffer.add("good3");
  assertFalse(op.shouldWait());
  assertEquals(startSequence + 6,op.sequence);
  assertEquals(asList("good1","good2","good3"),response);
  assertEquals(6,response.readCount());
}
