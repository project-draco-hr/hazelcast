{
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class.getName());
  defaultCallTimeout=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  final int coreSize=Runtime.getRuntime().availableProcessors();
  final boolean reallyMultiCore=coreSize >= 8;
  final int concurrencyLevel=reallyMultiCore ? coreSize * 4 : 16;
  remoteCalls=new ConcurrentHashMap<Long,RemoteCall>(1000,0.75f,concurrencyLevel);
  final int opThreadCount=node.getGroupProperties().OPERATION_THREAD_COUNT.getInteger();
  operationThreadCount=opThreadCount > 0 ? opThreadCount : coreSize * 2;
  opExecutors=new ExecutorService[operationThreadCount];
  for (int i=0; i < opExecutors.length; i++) {
    opExecutors[i]=Executors.newSingleThreadExecutor(new OperationThreadFactory(i));
  }
  systemExecutor=nodeEngine.getExecutionService().getExecutor(ExecutionService.SYSTEM_EXECUTOR);
  executingCalls=Collections.newSetFromMap(new ConcurrentHashMap<RemoteCallKey,Boolean>(1000,0.75f,concurrencyLevel));
  backupCalls=new ConcurrentHashMap<Long,Semaphore>(1000,0.75f,concurrencyLevel);
}
