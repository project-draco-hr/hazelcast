{
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class.getName());
  defaultCallTimeout=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  final int coreSize=Runtime.getRuntime().availableProcessors();
  final boolean reallyMultiCore=coreSize >= 8;
  final int concurrencyLevel=reallyMultiCore ? coreSize * 4 : 16;
  remoteCalls=new ConcurrentHashMap<Long,RemoteCall>(1000,0.75f,concurrencyLevel);
  final int opThreadCount=node.getGroupProperties().OPERATION_THREAD_COUNT.getInteger();
  operationThreadCount=opThreadCount > 0 ? opThreadCount : coreSize * 2;
  operationExecutors=new ExecutorService[operationThreadCount];
  for (int i=0; i < operationExecutors.length; i++) {
    operationExecutors[i]=Executors.newSingleThreadExecutor(new OperationThreadFactory(i));
  }
  defaultOperationExecutor=nodeEngine.getExecutionService().getExecutor(ExecutionService.OPERATION_EXECUTOR);
  responseExecutor=Executors.newSingleThreadExecutor(new SingleExecutorThreadFactory(node.threadGroup,node.getConfigClassLoader(),node.getThreadNamePrefix("response")));
  executingCalls=new ConcurrentHashMap<RemoteCallKey,RemoteCallKey>(1000,0.75f,concurrencyLevel);
  backupCalls=new ConcurrentHashMap<Long,Semaphore>(1000,0.75f,concurrencyLevel);
  backupScheduler=EntryTaskSchedulerFactory.newScheduler(nodeEngine.getExecutionService().getScheduledExecutor(),new ScheduledBackupProcessor(),false);
}
