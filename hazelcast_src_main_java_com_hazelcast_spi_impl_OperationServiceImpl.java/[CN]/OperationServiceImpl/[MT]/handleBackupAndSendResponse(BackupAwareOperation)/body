{
  final int maxRetryCount=50;
  final int maxBackups=node.getClusterService().getSize() - 1;
  final int syncBackupCount=backupAwareOp.getSyncBackupCount() > 0 ? Math.min(maxBackups,backupAwareOp.getSyncBackupCount()) : 0;
  final int asyncBackupCount=(backupAwareOp.getAsyncBackupCount() > 0 && maxBackups > syncBackupCount) ? Math.min(maxBackups - syncBackupCount,backupAwareOp.getAsyncBackupCount()) : 0;
  final int totalBackupCount=syncBackupCount + asyncBackupCount;
  final Operation op=(Operation)backupAwareOp;
  Collection<BackupFuture> syncBackups=null;
  Collection<BackupFuture> asyncBackups=null;
  if (totalBackupCount > 0) {
    final String serviceName=op.getServiceName();
    final int partitionId=op.getPartitionId();
    final PartitionInfo partitionInfo=nodeEngine.getPartitionService().getPartitionInfo(partitionId);
    if (syncBackupCount > 0) {
      syncBackups=new ArrayList<BackupFuture>(syncBackupCount);
    }
    if (asyncBackupCount > 0) {
      asyncBackups=new ArrayList<BackupFuture>(asyncBackupCount);
    }
    for (int replicaIndex=1; replicaIndex <= totalBackupCount; replicaIndex++) {
      final Address target=partitionInfo.getReplicaAddress(replicaIndex);
      if (target != null) {
        final Operation backupOp=backupAwareOp.getBackupOperation();
        if (backupOp == null) {
          throw new IllegalArgumentException("Backup operation should not be null!");
        }
        if (target.equals(node.getThisAddress())) {
          throw new IllegalStateException("Normally shouldn't happen!!");
        }
 else {
          final boolean returnsResponse=backupOp.returnsResponse();
          if (returnsResponse) {
            final Future f=createInvocationBuilder(serviceName,backupOp,partitionId).setReplicaIndex(replicaIndex).setTryCount(maxRetryCount).build().invoke();
            final BackupFuture backupFuture=new BackupFuture(f,partitionInfo,replicaIndex,maxRetryCount);
            if (replicaIndex <= syncBackupCount) {
              syncBackups.add(backupFuture);
            }
 else {
              asyncBackups.add(backupFuture);
            }
          }
 else {
            backupOp.setPartitionId(partitionId).setReplicaIndex(replicaIndex).setServiceName(serviceName);
            send(backupOp,target);
          }
        }
      }
    }
  }
  waitBackupResponses(syncBackups);
  sendResponse(op,null);
  waitBackupResponses(asyncBackups);
}
