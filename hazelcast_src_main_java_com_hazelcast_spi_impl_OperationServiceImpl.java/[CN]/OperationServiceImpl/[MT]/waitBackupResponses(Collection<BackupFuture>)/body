{
  while (futures != null && !futures.isEmpty()) {
    final Iterator<BackupFuture> iter=futures.iterator();
    while (iter.hasNext()) {
      final BackupFuture f=iter.next();
      try {
        if (f.canRetry()) {
          f.get(500,TimeUnit.MILLISECONDS);
          f.error=null;
        }
        iter.remove();
        if (f.error != null) {
          logger.log(Level.WARNING,"While backing up -> " + f.error.getMessage(),f.error);
        }
      }
 catch (      InterruptedException ignored) {
      }
catch (      TimeoutException ignored) {
      }
catch (      ExecutionException e) {
        final Throwable t=e.getCause() != null ? e.getCause() : e;
        if (!(t instanceof RetryableException)) {
          throw e;
        }
 else         if (t instanceof MemberLeftException || f.targetLeft()) {
          iter.remove();
        }
 else {
          f.error=e;
        }
      }
    }
  }
}
