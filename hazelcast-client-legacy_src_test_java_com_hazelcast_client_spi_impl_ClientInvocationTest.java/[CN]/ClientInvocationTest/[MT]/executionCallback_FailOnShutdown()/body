{
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually("No requests failed with reason client shutdown",shutdownLatch);
  assertOpenEventually("Not all of the requests failed",errorLatch);
}
