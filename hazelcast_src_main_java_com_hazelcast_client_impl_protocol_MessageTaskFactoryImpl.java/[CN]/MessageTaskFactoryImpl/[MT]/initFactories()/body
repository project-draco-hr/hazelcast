{
  tasks.put(ClientMessageType.AUTHENTICATION_DEFAULT_REQUEST.id(),new MessageTaskFactory(){
    public PartitionSpecificRunnable create(    ClientMessage clientMessage,    Node node,    Connection connection){
      return new AuthenticationMessageTask(clientMessage,node,connection);
    }
  }
);
  tasks.put(ClientMessageType.AUTHENTICATION_CUSTOM_REQUEST.id(),new MessageTaskFactory(){
    public PartitionSpecificRunnable create(    ClientMessage clientMessage,    Node node,    Connection connection){
      return new AuthenticationCustomCredentialsMessageTask(clientMessage,node,connection);
    }
  }
);
  tasks.put(ClientMessageType.MAP_PUT_REQUEST.id(),new MessageTaskFactory(){
    public PartitionSpecificRunnable create(    ClientMessage clientMessage,    Node node,    Connection connection){
      return new MapPutMessageTask(clientMessage,node,connection);
    }
  }
);
  tasks.put(ClientMessageType.ADD_ENTRY_LISTENER_REQUEST.id(),new MessageTaskFactory(){
    public PartitionSpecificRunnable create(    ClientMessage clientMessage,    Node node,    Connection connection){
      return new MapAddEntryListenerTask(clientMessage,node,connection);
    }
  }
);
  tasks.put(ClientMessageType.REGISTER_MEMBERSHIP_LISTENER_REQUEST.id(),new MessageTaskFactory(){
    public PartitionSpecificRunnable create(    ClientMessage clientMessage,    Node node,    Connection connection){
      return new RegisterMembershipListenerMessageTask(clientMessage,node,connection);
    }
  }
);
  tasks.put(ClientMessageType.CREATE_PROXY_REQUEST.id(),new MessageTaskFactory(){
    public PartitionSpecificRunnable create(    ClientMessage clientMessage,    Node node,    Connection connection){
      return new CreateProxyMessageTask(clientMessage,node,connection);
    }
  }
);
  tasks.put(ClientMessageType.GET_PARTITIONS_REQUEST.id(),new MessageTaskFactory(){
    public PartitionSpecificRunnable create(    ClientMessage clientMessage,    Node node,    Connection connection){
      return new GetPartitionsMessageTask(clientMessage,node,connection);
    }
  }
);
}
