{
  this.node=node;
  this.nodeEngine=node.nodeEngine;
  this.logger=node.getLogger(getClass());
  this.partitionService=partitionService;
  partitionCount=partitionService.getPartitionCount();
  partitionStateManager=partitionService.getPartitionStateManager();
  partitionMigrationTimeout=node.groupProperties.getMillis(GroupProperty.PARTITION_MIGRATION_TIMEOUT);
  maxParallelReplications=node.groupProperties.getInteger(GroupProperty.PARTITION_MAX_PARALLEL_REPLICATIONS);
  replicaSyncProcessLock=new Semaphore(maxParallelReplications);
  replicaVersions=new PartitionReplicaVersions[partitionCount];
  for (int i=0; i < replicaVersions.length; i++) {
    replicaVersions[i]=new PartitionReplicaVersions(i);
  }
  ExecutionService executionService=nodeEngine.getExecutionService();
  TaskScheduler globalScheduler=executionService.getGlobalTaskScheduler();
  replicaSyncScheduler=EntryTaskSchedulerFactory.newScheduler(globalScheduler,new ReplicaSyncEntryProcessor(),ScheduleType.POSTPONE);
  replicaSyncRequests=new AtomicReferenceArray<ReplicaSyncInfo>(partitionCount);
}
