{
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(new Config());
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(new Config());
  final ICountDownLatch cdl1=h1.getCountDownLatch("test");
  final ICountDownLatch cdl2=h2.getCountDownLatch("test");
  Member h2Member=h2.getCluster().getLocalMember();
  final AtomicInteger result=new AtomicInteger();
  assertNull(((CountDownLatchProxy)cdl1).getOwner());
  assertNull(((CountDownLatchProxy)cdl2).getOwner());
  assertTrue(cdl2.setCount(1));
  assertEquals(1,((CountDownLatchProxy)cdl1).getCount());
  assertEquals(1,((CountDownLatchProxy)cdl2).getCount());
  assertEquals(h2Member,((CountDownLatchProxy)cdl1).getOwner());
  assertEquals(h2Member,((CountDownLatchProxy)cdl2).getOwner());
  final AtomicBoolean failed=new AtomicBoolean(false);
  Thread thread=new Thread(){
    @Override public void run(){
      try {
        if (!cdl1.await(5,TimeUnit.SECONDS)) {
          failed.set(true);
        }
      }
 catch (      MemberLeftException e) {
        result.incrementAndGet();
      }
catch (      Throwable e) {
        e.printStackTrace();
        failed.set(true);
      }
    }
  }
;
  thread.start();
  Thread.sleep(1000);
  h2.shutdown();
  thread.join();
  assertFalse("Failed latch await!",failed.get());
  assertEquals("Should throw MemberLeftException!",1,result.get());
}
