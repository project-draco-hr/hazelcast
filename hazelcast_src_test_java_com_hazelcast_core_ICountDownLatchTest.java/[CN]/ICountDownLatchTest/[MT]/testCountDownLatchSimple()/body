{
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(new Config());
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(new Config());
  final ICountDownLatch cdl1=h1.getCountDownLatch("test");
  final ICountDownLatch cdl2=h2.getCountDownLatch("test");
  Member h1Member=h1.getCluster().getLocalMember();
  final AtomicInteger result=new AtomicInteger();
  int count=5;
  assertTrue(cdl1.setCount(count));
  assertEquals(count,((CountDownLatchProxy)cdl2).getCount());
  assertEquals(h1Member,((CountDownLatchProxy)cdl1).getOwner());
  assertEquals(h1Member,((CountDownLatchProxy)cdl2).getOwner());
  Thread thread=new Thread(){
    @Override public void run(){
      try {
        if (cdl2.await(10,TimeUnit.SECONDS))         result.incrementAndGet();
      }
 catch (      Throwable e) {
        e.printStackTrace();
        fail();
      }
    }
  }
;
  thread.start();
  for (int i=count; i > 0; i--) {
    assertEquals(i,((CountDownLatchProxy)cdl2).getCount());
    cdl1.countDown();
    Thread.sleep(1000);
  }
  assertEquals(1,result.get());
}
