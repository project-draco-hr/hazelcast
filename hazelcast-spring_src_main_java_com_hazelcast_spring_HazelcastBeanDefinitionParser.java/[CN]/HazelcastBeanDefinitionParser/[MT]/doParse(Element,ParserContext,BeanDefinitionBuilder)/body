{
  super.doParse(element,parserContext,builder);
  XmlConfigBuilder util=new XmlConfigBuilder();
  Config config=util.build();
  try {
    for (    org.w3c.dom.Node node : new IterableNodeList(element.getChildNodes())) {
      final String nodeName=util.cleanNodeName(node.getNodeName());
      if ("network".equals(nodeName)) {
        util.handleNetwork(node);
      }
 else       if ("group".equals(nodeName)) {
        util.handleGroup(node);
      }
 else       if ("properties".equals(nodeName)) {
        util.handleProperties(node,config.getProperties());
      }
 else       if ("executor-service".equals(nodeName)) {
        util.handleExecutor(node);
      }
 else       if ("queue".equals(nodeName)) {
        util.handleQueue(node);
      }
 else       if ("map".equals(nodeName)) {
        util.handleMap(node);
      }
 else       if ("topic".equals(nodeName)) {
        util.handleTopic(node);
      }
 else       if ("merge-policies".equals(nodeName)) {
        util.handleMergePolicies(node);
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException("Configuration failed due to:" + e.getMessage(),e);
  }
  builder.addPropertyValue("networkConfig",config.getNetworkConfig());
  builder.addPropertyValue("groupConfig",config.getGroupConfig());
  builder.addPropertyValue("properties",config.getProperties());
  builder.addPropertyValue("executorConfigMap",config.getExecutorConfigMap());
  builder.addPropertyValue("mapConfigs",config.getMapConfigs());
  builder.addPropertyValue("qConfigs",config.getQConfigs());
}
