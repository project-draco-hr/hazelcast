{
  final Collection<E> collection=getTheCollection();
  final AbstractCollection<E> proxy=this;
  return new Iterator<E>(){
    Iterator<E> iterator=collection.iterator();
    volatile E lastRecord;
    public boolean hasNext(){
      return iterator.hasNext();
    }
    public E next(){
      lastRecord=iterator.next();
      return lastRecord;
    }
    public void remove(){
      iterator.remove();
      proxy.remove(lastRecord);
    }
  }
;
}
