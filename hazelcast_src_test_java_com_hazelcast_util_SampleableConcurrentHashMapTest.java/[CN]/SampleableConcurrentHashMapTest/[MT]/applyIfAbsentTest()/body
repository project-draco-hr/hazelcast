{
  final SampleableConcurrentHashMap<String,String> map=new SampleableConcurrentHashMap<String,String>(10);
  assertEquals(map.applyIfAbsent("key",new IFunction<String,String>(){
    @Override public String apply(    String input){
      return "value";
    }
  }
),"value");
  final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  final int COUNT=10;
  final CountDownLatch latch=new CountDownLatch(COUNT);
  for (int i=0; i < COUNT; i++)   new Thread(new Runnable(){
    @Override public void run(){
      try {
        assertEquals(map.applyIfAbsent("key",new IFunction<String,String>(){
          @Override public String apply(          String input){
            return "value1";
          }
        }
),"value");
      }
 catch (      Throwable e) {
        error.set(e);
      }
 finally {
        latch.countDown();
      }
    }
  }
).start();
  latch.await(20,TimeUnit.SECONDS);
  if (error.get() != null) {
    throw error.get();
  }
  map.clear();
  map.applyIfAbsent("key",new IFunction<String,String>(){
    @Override public String apply(    String input){
      return null;
    }
  }
);
  assertEquals(map.size(),0);
}
