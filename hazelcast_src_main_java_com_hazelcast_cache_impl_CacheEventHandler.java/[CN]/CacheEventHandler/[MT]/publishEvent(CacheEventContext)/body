{
  final EventService eventService=nodeEngine.getEventService();
  final String cacheName=cacheEventContext.getCacheName();
  final Collection<EventRegistration> candidates=eventService.getRegistrations(ICacheService.SERVICE_NAME,cacheName);
  if (candidates.isEmpty()) {
    return;
  }
  final Object eventData;
  final CacheEventType eventType=cacheEventContext.getEventType();
switch (eventType) {
case CREATED:
case UPDATED:
case REMOVED:
case EXPIRED:
    final CacheEventData cacheEventData=new CacheEventDataImpl(cacheName,eventType,cacheEventContext.getDataKey(),cacheEventContext.getDataValue(),cacheEventContext.getDataOldValue(),cacheEventContext.isOldValueAvailable());
  CacheEventSet eventSet=new CacheEventSet(eventType,cacheEventContext.getCompletionId());
eventSet.addEventData(cacheEventData);
eventData=eventSet;
break;
case EVICTED:
eventData=new CacheEventDataImpl(cacheName,CacheEventType.EVICTED,cacheEventContext.getDataKey(),null,null,false);
break;
case INVALIDATED:
eventData=new CacheEventDataImpl(cacheName,CacheEventType.INVALIDATED,cacheEventContext.getDataKey(),null,null,false);
break;
case COMPLETED:
CacheEventData completedEventData=new CacheEventDataImpl(cacheName,CacheEventType.COMPLETED,cacheEventContext.getDataKey(),cacheEventContext.getDataValue(),null,false);
eventSet=new CacheEventSet(eventType,cacheEventContext.getCompletionId());
eventSet.addEventData(completedEventData);
eventData=eventSet;
break;
default :
throw new IllegalArgumentException("Event Type not defined to create an eventData during publish : " + eventType.name());
}
nodeEngine.getEventService().publishEvent(ICacheService.SERVICE_NAME,candidates,eventData,cacheEventContext.getOrderKey());
}
