{
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(null);
  Map<Integer,HazelcastInstance> memberMap=new HashMap<Integer,HazelcastInstance>();
  memberMap.put(h1.getCluster().getLocalMember().getPort(),h1);
  memberMap.put(h2.getCluster().getLocalMember().getPort(),h2);
  HazelcastClient client=HazelcastClient.getHazelcastClient(new InetSocketAddress(h1.getCluster().getLocalMember().getInetAddress(),h1.getCluster().getLocalMember().getPort()),new InetSocketAddress(h2.getCluster().getLocalMember().getInetAddress(),h2.getCluster().getLocalMember().getPort()));
  IMap<String,String> map=client.getMap("default");
  final Map<String,Boolean> m=new HashMap<String,Boolean>();
  final CountDownLatch entryAddLatch=new CountDownLatch(2);
  final CountDownLatch entryUpdatedLatch=new CountDownLatch(2);
  final CountDownLatch entryRemovedLatch=new CountDownLatch(2);
  map.addEntryListener(new EntryListener(){
    public void entryAdded(    EntryEvent event){
      m.put("entryAdded",true);
      assertEquals("hello",event.getKey());
      entryAddLatch.countDown();
    }
    public void entryRemoved(    EntryEvent event){
      entryRemovedLatch.countDown();
      assertEquals("hello",event.getKey());
      assertEquals("new world",event.getValue());
    }
    public void entryUpdated(    EntryEvent event){
      assertEquals("new world",event.getValue());
      assertEquals("hello",event.getKey());
      entryUpdatedLatch.countDown();
    }
    public void entryEvicted(    EntryEvent event){
      m.put("entryEvicted",true);
      entryRemoved(event);
    }
  }
,true);
  map.put("hello","world");
  System.out.println("PUT");
  map.put("hello","new world");
  map.remove("hello");
  memberMap.remove(client.getConnectionManager().getConnection().getAddress().getPort()).shutdown();
  map.put("hello","world");
  System.out.println("PUT");
  map.put("hello","new world");
  map.remove("hello");
  assertTrue(entryAddLatch.await(10,TimeUnit.MILLISECONDS));
  assertTrue(entryUpdatedLatch.await(10,TimeUnit.MILLISECONDS));
  for (Iterator<Integer> iterator=memberMap.keySet().iterator(); iterator.hasNext(); ) {
    memberMap.get(iterator.next()).shutdown();
  }
}
