{
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(new Config());
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(new Config());
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(new Config());
  final HazelcastInstance h4=Hazelcast.newHazelcastInstance(new Config());
  final IMap m1=h1.getMap("default");
  final IMap m2=h2.getMap("default");
  int count=10000;
  OrderKey[] keys=new OrderKey[count];
  for (int i=0; i < count; i++) {
    OrderKey key=new OrderKey(i,i % 119);
    keys[i]=key;
    m1.put(key,i);
  }
  Collection<Future<Boolean>> callableFutures=new LinkedList<Future<Boolean>>();
  Collection<Future> runnableFutures=new LinkedList<Future>();
  ExecutorService es3=h3.getExecutorService();
  for (  OrderKey key : keys) {
    Member member1=h1.getPartitionService().getPartition(key).getOwner();
    Member member2=h1.getPartitionService().getPartition(key.getPartitionKey()).getOwner();
    junit.framework.Assert.assertEquals(member1,member2);
    junit.framework.Assert.assertEquals(key.getOrderId(),m1.get(key));
    callableFutures.add(es3.submit(new TestUtil.OrderUpdateCallable(key.getOrderId(),key.getCustomerId())));
    runnableFutures.add(es3.submit(new TestUtil.OrderUpdateRunnable(key.getOrderId(),key.getCustomerId())));
  }
  for (  Future future : callableFutures) {
    assertTrue((Boolean)future.get(10,TimeUnit.SECONDS));
  }
  for (  Future future : runnableFutures) {
    future.get(10,TimeUnit.SECONDS);
  }
}
