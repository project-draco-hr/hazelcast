{
  final Random random=new Random();
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(null);
  HazelcastInstance instance3=Hazelcast.newHazelcastInstance(null);
  final ISemaphore semaphore1=instance1.getSemaphore("testMultiSemaphore");
  final ISemaphore semaphore2=instance2.getSemaphore("testMultiSemaphore");
  final ISemaphore semaphore3=instance3.getSemaphore("testMultiSemaphore");
  assertEquals(1,semaphore1.availablePermits());
  assertEquals(1,semaphore2.availablePermits());
  assertEquals(1,semaphore3.availablePermits());
  ExecutorService executorService=Executors.newCachedThreadPool();
  executorService.execute(new Runnable(){
    public void run(){
      for (int i=0; i < 10; i++) {
        System.out.println("Requesting semaphore 1");
        semaphore1.tryAcquire();
        System.out.println("Acquired semaphore 1");
        assertEquals(0,semaphore1.availablePermits());
        try {
          Thread.sleep(random.nextInt(100));
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        System.out.println("Releasing semaphore 1");
        semaphore1.release();
      }
    }
  }
);
  executorService.execute(new Runnable(){
    public void run(){
      for (int i=0; i < 20; i++) {
        System.out.println("Requesting semaphore 2");
        semaphore2.tryAcquire();
        System.out.println("Acquired semaphore 2");
        assertEquals(0,semaphore2.availablePermits());
        try {
          Thread.sleep(random.nextInt(100));
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        System.out.println("Releasing semaphore 2");
        semaphore2.release();
      }
    }
  }
);
  executorService.execute(new Runnable(){
    public void run(){
      for (int i=0; i < 30; i++) {
        System.out.println("Requesting semaphore 3");
        semaphore3.tryAcquire();
        System.out.println("Acquired semaphore 3");
        assertEquals(0,semaphore3.availablePermits());
        try {
          Thread.sleep(random.nextInt(100));
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        System.out.println("Releasing semaphore 3");
        semaphore3.release();
      }
    }
  }
);
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}
