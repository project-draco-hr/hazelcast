{
  Config c1=new Config();
  c1.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(multicast);
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(!multicast);
  c1.getNetworkConfig().getJoin().getTcpIpConfig().addMember("127.0.0.1");
  c1.getNetworkConfig().getInterfaces().clear();
  c1.getNetworkConfig().getInterfaces().addInterface("127.0.0.1");
  c1.getNetworkConfig().getInterfaces().setEnabled(true);
  Config c2=new Config();
  c2.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(multicast);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(!multicast);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().addMember("127.0.0.1");
  c2.getNetworkConfig().getInterfaces().clear();
  c2.getNetworkConfig().getInterfaces().addInterface("127.0.0.1");
  c2.getNetworkConfig().getInterfaces().setEnabled(true);
  c1.getGroupConfig().setName("differentGroup");
  c2.getGroupConfig().setName("sameGroup");
  c1.setProperty(GroupProperties.PROP_MERGE_FIRST_RUN_DELAY_SECONDS,"5");
  c1.setProperty(GroupProperties.PROP_MERGE_NEXT_RUN_DELAY_SECONDS,"3");
  c2.setProperty(GroupProperties.PROP_MERGE_FIRST_RUN_DELAY_SECONDS,"5");
  c2.setProperty(GroupProperties.PROP_MERGE_NEXT_RUN_DELAY_SECONDS,"3");
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  LifecycleCountingListener l=new LifecycleCountingListener();
  h2.getLifecycleService().addLifecycleListener(l);
  for (int i=0; i < 500; i++) {
    h2.getMap("default").put(i,"value" + i);
  }
  assertEquals(1,h1.getCluster().getMembers().size());
  assertEquals(1,h2.getCluster().getMembers().size());
  Thread.sleep(2000);
  c1.getGroupConfig().setName("sameGroup");
  assertTrue(l.waitFor(LifecycleEvent.LifecycleState.RESTARTED,40));
  assertEquals(1,l.getCount(LifecycleEvent.LifecycleState.RESTARTING));
  assertEquals(1,l.getCount(LifecycleEvent.LifecycleState.RESTARTED));
  assertEquals(2,h1.getCluster().getMembers().size());
  assertEquals(2,h2.getCluster().getMembers().size());
  assertEquals(500,h1.getMap("default").size());
  assertEquals(500,h2.getMap("default").size());
}
