{
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(new Config());
  MultiMap mm=h1.getMultiMap("default");
  CMap cmap1=getCMapForMultiMap(h1,"default");
  Collection<String> expectedValues=new HashSet<String>();
  expectedValues.add("value1");
  expectedValues.add("value2");
  mm.put("1","value1");
  mm.put("1","value2");
  assertEquals(2,mm.size());
  assertEquals(1,mm.keySet().size());
  Collection values=mm.get("1");
  for (  Object value : values) {
    assertTrue(expectedValues.contains(value));
  }
  assertEquals(1,cmap1.getMapIndexService().getOwnedRecords().size());
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(new Config());
  MultiMap mm2=h2.getMultiMap("default");
  CMap cmap2=getCMapForMultiMap(h2,"default");
  MigrationCompletionLatch l=new MigrationCompletionLatch("1",h1,h2);
  l.await(3,TimeUnit.SECONDS);
  assertEquals(1,cmap1.getMapIndexService().getOwnedRecords().size() + cmap2.getMapIndexService().getOwnedRecords().size());
  cmap1.startCleanup(true);
  cmap2.startCleanup(true);
  assertEquals(2,mm.size());
  assertEquals(1,mm.keySet().size());
  values=mm.get("1");
  for (  Object value : values) {
    assertTrue(expectedValues.contains(value));
  }
  assertEquals(2,mm2.size());
  assertEquals(1,mm2.keySet().size());
  values=mm2.get("1");
  for (  Object value : values) {
    assertTrue(expectedValues.contains(value));
  }
  h1.getLifecycleService().shutdown();
  values=mm2.get("1");
  for (  Object value : values) {
    assertTrue(expectedValues.contains(value));
  }
  assertEquals(2,mm2.size());
  assertEquals(1,mm2.keySet().size());
}
