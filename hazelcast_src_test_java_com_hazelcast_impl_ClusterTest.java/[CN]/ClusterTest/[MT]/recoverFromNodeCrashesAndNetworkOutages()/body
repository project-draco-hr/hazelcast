{
  int nodeCount=5;
  final Config config=new Config();
  config.getGroupConfig().setName("split");
  int port=7801;
  config.setPort(port);
  config.setProperty(GroupProperties.PROP_MERGE_FIRST_RUN_DELAY_SECONDS,"10");
  config.setProperty(GroupProperties.PROP_MERGE_NEXT_RUN_DELAY_SECONDS,"10");
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true);
  for (int i=0; i < nodeCount; i++) {
    config.getNetworkConfig().getJoin().getTcpIpConfig().addMember("localhost:" + (port + i));
  }
  final ConcurrentMap<Integer,HazelcastInstance> nodes=new ConcurrentHashMap<Integer,HazelcastInstance>();
  for (int j=0; j < nodeCount; j++) {
    final int i=j;
    new Thread(new Runnable(){
      public void run(){
        HazelcastInstance h=Hazelcast.newHazelcastInstance(config);
        nodes.put(i,h);
      }
    }
).start();
  }
  Random random=new Random(System.currentTimeMillis());
  for (; ; ) {
    Thread.sleep(random.nextInt(10000));
    for (    int i : nodes.keySet()) {
      if (i != nodeCount - 1) {
        HazelcastInstance h=nodes.get(i);
        HazelcastInstance last=nodes.get(nodeCount - 1);
        closeConnectionBetween(nodes.get(i),nodes.get(nodeCount - 1));
        Thread.sleep(10000);
      }
    }
  }
}
