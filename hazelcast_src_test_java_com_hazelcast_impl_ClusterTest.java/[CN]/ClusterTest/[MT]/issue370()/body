{
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(new Config());
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(new Config());
  Queue<String> q1=h1.getQueue("q");
  Queue<String> q2=h2.getQueue("q");
  for (int i=0; i < 5; i++) {
    q1.offer("item" + i);
  }
  assertEquals(5,q1.size());
  assertEquals(5,q2.size());
  assertEquals("item0",q2.poll());
  assertEquals("item1",q2.poll());
  assertEquals("item2",q2.poll());
  assertEquals(2,q1.size());
  assertEquals(2,q2.size());
  Set keys=h2.getMap("q:q").keySet();
  assertEquals(2,keys.size());
  IMap m1=h1.getMap("default");
  IMap m2=h2.getMap("default");
  for (int i=0; i < 5; i++) {
    m1.put(i,"value" + i);
  }
  assertEquals(5,m1.size());
  assertEquals(5,m2.size());
  m2.remove(1);
  m2.remove(2);
  m2.remove(3);
  assertEquals(2,m1.size());
  assertEquals(2,m2.size());
  assertEquals(2,m1.keySet().size());
  assertEquals(2,m2.keySet().size());
  h1.getLifecycleService().shutdown();
  keys=h2.getMap("q:q").keySet();
  assertEquals(2,keys.size());
  assertEquals(2,q2.size());
  assertEquals(2,m2.size());
  assertEquals(2,m2.keySet().size());
  h1=Hazelcast.newHazelcastInstance(new Config());
  q1=h1.getQueue("q");
  assertEquals(2,q1.size());
  assertEquals(2,q2.size());
  assertEquals(2,m2.size());
  assertEquals(2,m2.keySet().size());
  h2.getLifecycleService().shutdown();
  assertEquals(2,q1.size());
  m1=h1.getMap("default");
  assertEquals(2,m1.size());
  assertEquals(2,m1.keySet().size());
}
