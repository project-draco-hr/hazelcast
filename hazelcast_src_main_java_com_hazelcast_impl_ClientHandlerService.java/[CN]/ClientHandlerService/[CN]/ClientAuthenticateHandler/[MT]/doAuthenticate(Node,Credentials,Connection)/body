{
  boolean authenticated;
  if (credentials == null) {
    authenticated=false;
    logger.log(Level.SEVERE,"Could not retrieve Credentials object!");
  }
 else   if (node.securityContext != null) {
    final Socket endpointSocket=conn.getSocketChannelWrapper().socket();
    credentials.setEndpoint(endpointSocket.getInetAddress().getHostAddress());
    try {
      LoginContext lc=node.securityContext.createClientLoginContext(credentials);
      lc.login();
      getClientEndpoint(conn).setLoginContext(lc);
      authenticated=true;
    }
 catch (    LoginException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      authenticated=false;
    }
  }
 else {
    if (credentials instanceof UsernamePasswordCredentials) {
      final UsernamePasswordCredentials usernamePasswordCredentials=(UsernamePasswordCredentials)credentials;
      final String nodeGroupName=factory.getConfig().getGroupConfig().getName();
      final String nodeGroupPassword=factory.getConfig().getGroupConfig().getPassword();
      authenticated=(nodeGroupName.equals(usernamePasswordCredentials.getUsername()) && nodeGroupPassword.equals(usernamePasswordCredentials.getPassword()));
    }
 else {
      authenticated=false;
      logger.log(Level.SEVERE,"Hazelcast security is disabled.\nUsernamePasswordCredentials or cluster group-name" + " and group-password should be used for authentication!\n" + "Current credentials type is: "+ credentials.getClass().getName());
    }
  }
  logger.log((authenticated ? Level.INFO : Level.WARNING),"received auth from " + conn + ", "+ (authenticated ? "successfully authenticated" : "authentication failed"));
  if (!authenticated) {
    node.clientHandlerService.removeClientEndpoint(conn);
  }
 else {
    ClientEndpoint clientEndpoint=node.clientHandlerService.getClientEndpoint(conn);
    clientEndpoint.authenticated();
    Bind bind=new Bind(new Address(conn.getSocketChannelWrapper().socket().getInetAddress(),conn.getSocketChannelWrapper().socket().getPort()));
    bind.setConnection(conn);
    bind.setNode(node);
    node.clusterService.enqueueAndWait(bind);
  }
  return authenticated;
}
