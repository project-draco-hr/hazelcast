{
  StringBuilder sizeString=new StringBuilder();
  if (type.equals(DATA_FULL_NAME)) {
    sizeString.append("dataSize += ParameterUtil.calculateDataSize(" + name + ");");
  }
 else   if (type.equals("java.lang.Integer")) {
    sizeString.append("dataSize += Bits.INT_SIZE_IN_BYTES;");
  }
 else   if (type.equals("java.lang.Boolean")) {
    sizeString.append("dataSize += Bits.BOOLEAN_SIZE_IN_BYTES;");
  }
 else   if (type.equals("java.lang.String")) {
    sizeString.append("dataSize += ParameterUtil.calculateStringDataSize(" + name + ");");
  }
 else   if (type.equals("int") || type.equals("long") || type.equals("short")|| type.equals("byte")|| type.equals("boolean")) {
    sizeString.append("dataSize += Bits." + type.toUpperCase() + "_SIZE_IN_BYTES;");
  }
 else   if (type.equals("com.hazelcast.nio.Address")) {
    sizeString.append("dataSize += " + PARAMETERS_PACKAGE + "AddressCodec.calculateDataSize("+ name+ ");");
  }
 else   if (type.equals("com.hazelcast.core.Member")) {
    sizeString.append("dataSize += " + PARAMETERS_PACKAGE + "MemberCodec.calculateDataSize("+ name+ ");");
  }
 else   if (type.equals("com.hazelcast.cluster.client.MemberAttributeChange")) {
    sizeString.append("dataSize += " + PARAMETERS_PACKAGE + "MemberAttributeChangeCodec.calculateDataSize("+ name+ ");");
  }
 else   if (type.equals("com.hazelcast.map.impl.SimpleEntryView<" + DATA_FULL_NAME + ","+ DATA_FULL_NAME+ ">")) {
    sizeString.append("dataSize += " + PARAMETERS_PACKAGE + "EntryViewCodec.calculateDataSize("+ name+ ");");
  }
 else   if (type.equals("com.hazelcast.client.impl.client.DistributedObjectInfo")) {
    sizeString.append("dataSize += " + PARAMETERS_PACKAGE + "DistributedObjectInfoCodec.calculateDataSize("+ name+ ");");
  }
 else   if (type.equals("com.hazelcast.mapreduce.JobPartitionState")) {
    sizeString.append("dataSize += " + PARAMETERS_PACKAGE + "JobPartitionStateCodec.calculateDataSize("+ name+ ");");
  }
 else   if (type.equals("javax.transaction.xa.Xid")) {
    sizeString.append("dataSize += " + PARAMETERS_PACKAGE + "XIDCodec.calculateDataSize("+ name+ ");");
  }
 else   if (type.equals("com.hazelcast.cache.impl.CacheEventData")) {
    sizeString.append("dataSize += " + PARAMETERS_PACKAGE + "CacheEventDataCodec.calculateDataSize("+ name+ ");");
  }
 else   if (type.startsWith("java.util.Map<")) {
    sizeString.append(getMapSizeStringJava(type,name));
  }
 else   if (type.startsWith("java.util.List<") || type.startsWith("java.util.Set<") || type.startsWith("java.util.Collection<")) {
    sizeString.append(getCollectionSizeString(name,type));
  }
 else   if (type.endsWith("[]")) {
    sizeString.append(getArraySizeString(type,name));
  }
 else {
    sizeString.append(CodeGenerationUtils.capitalizeFirstLetter(type) + "Codec.calculateDataSize(" + name+ ");");
  }
  return sizeString.toString();
}
