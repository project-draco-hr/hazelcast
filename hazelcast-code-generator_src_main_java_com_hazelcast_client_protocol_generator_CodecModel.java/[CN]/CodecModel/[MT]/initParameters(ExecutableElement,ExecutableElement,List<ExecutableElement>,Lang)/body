{
  for (  VariableElement param : methodElement.getParameters()) {
    final Nullable nullable=param.getAnnotation(Nullable.class);
    ParameterModel pm=new ParameterModel();
    pm.name=param.getSimpleName().toString();
    pm.type=param.asType().toString();
    pm.lang=lang;
    pm.isPrimitive=param.asType().getKind().isPrimitive();
    pm.isNullable=nullable != null;
    requestParams.add(pm);
  }
  for (  VariableElement param : responseElement.getParameters()) {
    final Nullable nullable=param.getAnnotation(Nullable.class);
    ParameterModel pm=new ParameterModel();
    pm.name=param.getSimpleName().toString();
    pm.type=param.asType().toString();
    pm.lang=lang;
    pm.isPrimitive=param.asType().getKind().isPrimitive();
    pm.isNullable=nullable != null;
    responseParams.add(pm);
  }
  for (  ExecutableElement element : eventElementList) {
    List<ParameterModel> eventParam=new ArrayList<ParameterModel>();
    for (    VariableElement param : element.getParameters()) {
      final Nullable nullable=param.getAnnotation(Nullable.class);
      ParameterModel pm=new ParameterModel();
      pm.name=param.getSimpleName().toString();
      pm.type=param.asType().toString();
      pm.lang=lang;
      pm.isPrimitive=param.asType().getKind().isPrimitive();
      pm.isNullable=nullable != null;
      eventParam.add(pm);
    }
    EventModel eventModel=new EventModel();
    eventModel.type=element.getAnnotation(EventResponse.class).value();
    eventModel.name=element.getSimpleName().toString();
    eventModel.eventParams=eventParam;
    events.add(eventModel);
  }
}
