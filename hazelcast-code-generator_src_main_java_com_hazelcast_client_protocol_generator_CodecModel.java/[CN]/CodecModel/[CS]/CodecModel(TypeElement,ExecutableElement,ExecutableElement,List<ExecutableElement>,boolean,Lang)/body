{
  this.retryable=retryable ? 1 : 0;
  this.lang=lang;
  name=methodElement.getSimpleName().toString();
  parentName=parent.getAnnotation(GenerateCodec.class).name();
  className=CodeGenerationUtils.capitalizeFirstLetter(parentName) + CodeGenerationUtils.capitalizeFirstLetter(name) + "Codec";
  packageName="com.hazelcast.client.impl.protocol.codec";
  response=methodElement.getAnnotation(Request.class).response();
  for (  VariableElement param : methodElement.getParameters()) {
    final Nullable nullable=param.getAnnotation(Nullable.class);
    if (nullable != null) {
    }
    param.asType().getKind().isPrimitive();
    ParameterModel pm=new ParameterModel();
    pm.name=param.getSimpleName().toString();
    pm.type=param.asType().toString();
    pm.lang=lang;
    requestParams.add(pm);
  }
  for (  VariableElement param : responseElement.getParameters()) {
    final Nullable nullable=param.getAnnotation(Nullable.class);
    if (nullable != null) {
    }
    ParameterModel pm=new ParameterModel();
    pm.name=param.getSimpleName().toString();
    pm.type=param.asType().toString();
    pm.lang=lang;
    responseParams.add(pm);
  }
  for (  ExecutableElement element : eventElementList) {
    List<ParameterModel> eventParam=new ArrayList<ParameterModel>();
    for (    VariableElement param : element.getParameters()) {
      final Nullable nullable=param.getAnnotation(Nullable.class);
      if (nullable != null) {
      }
      ParameterModel pm=new ParameterModel();
      pm.name=param.getSimpleName().toString();
      pm.type=param.asType().toString();
      pm.lang=lang;
      eventParam.add(pm);
    }
    events.add(eventParam);
  }
}
