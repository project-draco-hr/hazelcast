{
  ClientEngineImpl clientService=(ClientEngineImpl)service;
  ILogger logger=clientEngine.getILogger(getClass());
  boolean authenticated;
  if (credentials == null) {
    authenticated=false;
    logger.log(Level.SEVERE,"Could not retrieve Credentials object!");
  }
 else   if (clientService.getSecurityContext() != null) {
    credentials.setEndpoint(connection.getInetAddress().getHostAddress());
    try {
      SecurityContext securityContext=clientService.getSecurityContext();
      LoginContext lc=securityContext.createClientLoginContext(credentials);
      lc.login();
      clientService.getEndpoint(connection).setLoginContext(lc);
      authenticated=true;
    }
 catch (    LoginException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      authenticated=false;
    }
  }
 else {
    if (credentials instanceof UsernamePasswordCredentials) {
      final UsernamePasswordCredentials usernamePasswordCredentials=(UsernamePasswordCredentials)credentials;
      GroupConfig groupConfig=clientEngine.getConfig().getGroupConfig();
      final String nodeGroupName=groupConfig.getName();
      final String nodeGroupPassword=groupConfig.getPassword();
      authenticated=(nodeGroupName.equals(usernamePasswordCredentials.getUsername()) && nodeGroupPassword.equals(usernamePasswordCredentials.getPassword()));
    }
 else {
      authenticated=false;
      logger.log(Level.SEVERE,"Hazelcast security is disabled.\nUsernamePasswordCredentials or cluster " + "group-name and group-password should be used for authentication!\n" + "Current credentials type is: "+ credentials.getClass().getName());
    }
  }
  logger.log((authenticated ? Level.INFO : Level.WARNING),"Received auth from " + connection + ", "+ (authenticated ? "successfully authenticated" : "authentication failed"));
  if (!authenticated) {
    clientService.removeEndpoint(connection);
    return false;
  }
 else {
    ClientEndpoint clientEndpoint=clientService.getEndpoint(connection);
    clientEndpoint.authenticated();
    clientService.bind(connection);
    return true;
  }
}
