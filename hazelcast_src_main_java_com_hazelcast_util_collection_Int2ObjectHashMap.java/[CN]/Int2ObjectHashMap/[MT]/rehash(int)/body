{
  if (1 != Integer.bitCount(newCapacity)) {
    throw new IllegalStateException("New capacity must be a power of two");
  }
  capacity=newCapacity;
  mask=newCapacity - 1;
  resizeThreshold=(int)(newCapacity * loadFactor);
  final int[] tempKeys=new int[capacity];
  final Object[] tempValues=new Object[capacity];
  for (int i=0, size=values.length; i < size; i++) {
    final Object value=values[i];
    if (null != value) {
      final int key=keys[i];
      int newHash=intHash(key,mask);
      while (null != tempValues[newHash]) {
        newHash=++newHash & mask;
      }
      tempKeys[newHash]=key;
      tempValues[newHash]=value;
    }
  }
  keys=tempKeys;
  values=tempValues;
}
