{
  List<Integer> failedPartitions=new LinkedList<Integer>();
  for (  Map.Entry<Integer,Object> partitionResult : partitionResults.entrySet()) {
    int partitionId=partitionResult.getKey();
    Object result=partitionResult.getValue();
    if (result instanceof Throwable) {
      failedPartitions.add(partitionId);
    }
  }
  for (  Integer failedPartition : failedPartitions) {
    Operation operation;
    if (operationFactory instanceof PartitionAwareOperationFactory) {
      operation=((PartitionAwareOperationFactory)operationFactory).createPartitionOperation(failedPartition);
    }
 else {
      operation=operationFactory.createOperation();
    }
    Future future=operationService.createInvocationBuilder(serviceName,operation,failedPartition).invoke();
    partitionResults.put(failedPartition,future);
  }
  for (  Integer failedPartition : failedPartitions) {
    Future future=(Future)partitionResults.get(failedPartition);
    Object result=future.get();
    partitionResults.put(failedPartition,result);
  }
}
