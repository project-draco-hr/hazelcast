{
  ClientPartitionService partitionService=getContext().getPartitionService();
  int partitionCount=partitionService.getPartitionCount();
  List<Future<?>> futures=new ArrayList<Future<?>>(partitionCount);
  MapEntrySet[] entrySetPerPartition=new MapEntrySet[partitionCount];
  for (  Entry<? extends K,? extends V> entry : m.entrySet()) {
    checkNotNull(entry.getKey(),NULL_KEY_IS_NOT_ALLOWED);
    checkNotNull(entry.getValue(),NULL_VALUE_IS_NOT_ALLOWED);
    final Data keyData=toData(entry.getKey());
    invalidateNearCache(keyData);
    int partitionId=partitionService.getPartitionId(entry.getKey());
    MapEntrySet entrySet=entrySetPerPartition[partitionId];
    if (entrySet == null) {
      entrySet=new MapEntrySet();
      entrySetPerPartition[partitionId]=entrySet;
    }
    entrySet.add(new AbstractMap.SimpleImmutableEntry<Data,Data>(keyData,toData(entry.getValue())));
  }
  for (int partitionId=0; partitionId < entrySetPerPartition.length; partitionId++) {
    MapEntrySet entrySet=entrySetPerPartition[partitionId];
    if (entrySet != null) {
      MapPutAllRequest request=new MapPutAllRequest(name,entrySet);
      futures.add(new ClientInvocation(getClient(),request,partitionService.getPartitionOwner(partitionId)).invoke());
    }
  }
  try {
    for (    Future<?> future : futures) {
      future.get();
    }
  }
 catch (  Exception e) {
    ExceptionUtil.rethrow(e);
  }
}
