{
  PagingPredicate pagingPredicate=null;
  if (predicate instanceof PagingPredicate) {
    pagingPredicate=(PagingPredicate)predicate;
    pagingPredicate.setIterationType(IterationType.VALUE);
    if (pagingPredicate.getPage() > 0 && pagingPredicate.getAnchor() == null) {
      pagingPredicate.previousPage();
      values(pagingPredicate);
      pagingPredicate.nextPage();
    }
  }
  MapQueryRequest request=new MapQueryRequest(name,predicate,IterationType.VALUE);
  QueryResultSet result=invoke(request);
  if (pagingPredicate == null) {
    final ArrayList<V> values=new ArrayList<V>(result.size());
    for (    Object data : result) {
      V value=toObject(data);
      values.add(value);
    }
    return values;
  }
  List<Entry<Object,V>> valueEntryList=new ArrayList<Entry<Object,V>>(result.size());
  for (  QueryResultEntry entry : result.getEntries()) {
    K key=toObject(entry.getKeyData());
    V value=toObject(entry.getValueData());
    valueEntryList.add(new AbstractMap.SimpleImmutableEntry<Object,V>(key,value));
  }
  Collections.sort(valueEntryList,SortingUtil.newComparator(pagingPredicate.getComparator(),IterationType.VALUE));
  if (valueEntryList.size() > pagingPredicate.getPageSize()) {
    valueEntryList=valueEntryList.subList(0,pagingPredicate.getPageSize());
  }
  Entry anchor=null;
  if (valueEntryList.size() != 0) {
    anchor=valueEntryList.get(valueEntryList.size() - 1);
  }
  PagingPredicateAccessor.setPagingPredicateAnchor(pagingPredicate,anchor);
  final ArrayList<V> values=new ArrayList<V>(valueEntryList.size());
  for (  Entry<Object,V> objectVEntry : valueEntryList) {
    values.add(objectVEntry.getValue());
  }
  return values;
}
