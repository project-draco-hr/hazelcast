{
  PagingPredicate pagingPredicate=null;
  if (predicate instanceof PagingPredicate) {
    pagingPredicate=(PagingPredicate)predicate;
    pagingPredicate.setIterationType(IterationType.KEY);
  }
  MapQueryRequest request=new MapQueryRequest(name,predicate,IterationType.KEY);
  QueryResultSet result=invoke(request);
  if (pagingPredicate == null) {
    final InflatableSet<K> keySet=new InflatableSet<K>(result.size());
    for (    Object o : result) {
      final K key=toObject(o);
      keySet.add(key);
    }
    keySet.close();
    return keySet;
  }
  Iterator<Entry> iterator=result.rawIterator();
  ArrayList<Map.Entry> resultList=new ArrayList<Map.Entry>();
  while (iterator.hasNext()) {
    Entry entry=iterator.next();
    K key=toObject(entry.getKey());
    resultList.add(new AbstractMap.SimpleImmutableEntry<K,V>(key,null));
  }
  return (Set<K>)getSortedQueryResultSet(resultList,pagingPredicate,IterationType.KEY);
}
