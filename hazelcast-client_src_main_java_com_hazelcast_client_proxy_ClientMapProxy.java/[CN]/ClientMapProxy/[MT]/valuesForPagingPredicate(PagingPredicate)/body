{
  pagingPredicate.setIterationType(IterationType.VALUE);
  if (pagingPredicate.getPage() > 0 && pagingPredicate.getAnchor() == null) {
    pagingPredicate.previousPage();
    values(pagingPredicate);
    pagingPredicate.nextPage();
  }
  MapQueryRequest request=new MapQueryRequest(name,pagingPredicate,IterationType.VALUE);
  QueryResultSet result=invoke(request);
  List<Entry<Object,V>> valueEntryList=new ArrayList<Entry<Object,V>>(result.size());
  Iterator<Entry> iterator=result.rawIterator();
  while (iterator.hasNext()) {
    Entry entry=iterator.next();
    K key=toObject(entry.getKey());
    V value=toObject(entry.getValue());
    valueEntryList.add(new AbstractMap.SimpleImmutableEntry<Object,V>(key,value));
  }
  Collections.sort(valueEntryList,SortingUtil.newComparator(pagingPredicate.getComparator(),IterationType.VALUE));
  if (valueEntryList.size() > pagingPredicate.getPageSize()) {
    valueEntryList=valueEntryList.subList(0,pagingPredicate.getPageSize());
  }
  Entry anchor=null;
  if (valueEntryList.size() != 0) {
    anchor=valueEntryList.get(valueEntryList.size() - 1);
  }
  PagingPredicateAccessor.setPagingPredicateAnchor(pagingPredicate,anchor);
  ArrayList<V> values=new ArrayList<V>(valueEntryList.size());
  for (  Entry<Object,V> entry : valueEntryList) {
    values.add(entry.getValue());
  }
  return values;
}
