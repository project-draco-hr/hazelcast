{
  final int entryCount=10000;
  final int totalPartitionCount=271;
  final int testMapReplicaCount=3;
  Config config=new ClasspathXmlConfig("hazelcast-default.xml");
  config.getProperties().put(GroupProperties.PROP_CLEANUP_DELAY_SECONDS,"1");
  config.getMapConfig("map1").setBackupCount(4);
  config.getMapConfig("map2").setBackupCount(3);
  config.getMapConfig("map3").setBackupCount(5);
  config.getMapConfig("map4").setBackupCount(1);
  config.getMapConfig("test").setBackupCount(testMapReplicaCount - 1);
  HazelcastInstance hz=Hazelcast.newHazelcastInstance(config);
  final IMap<Integer,Integer> testMap=hz.getMap("test");
  for (int i=0; i < entryCount; i++) {
    testMap.put(i,i);
  }
  final int[] size=new int[]{3,5,7,6,5,4,3,2,1};
  int k=0;
  for (int i=0; i < size.length; i++) {
    int n=size[k++ % size.length];
    System.out.println("Node size : " + n);
    while (Hazelcast.getAllHazelcastInstances().size() < n) {
      Hazelcast.newHazelcastInstance(config);
    }
    while (Hazelcast.getAllHazelcastInstances().size() > n) {
      Hazelcast.getAllHazelcastInstances().iterator().next().getLifecycleService().shutdown();
    }
    Collection<HazelcastInstance> set=Hazelcast.getAllHazelcastInstances();
    final int replicaMax=set.size();
    int wait=replicaMax * 2;
    System.out.println("Waiting " + wait + " seconds for partition arrangement...");
    Thread.sleep(1000 * wait);
    int[] partitionCounts=new int[PartitionInfo.MAX_REPLICA_COUNT];
    println("PARTITIONS: ");
    for (    HazelcastInstance node : set) {
      if (node != null) {
        try {
          int[] pc=getPartitionCounts(node);
          for (int j=0; j < pc.length; j++) {
            partitionCounts[j]+=pc[j];
          }
          println(node.getCluster().getLocalMember() + " => " + Arrays.toString(pc));
        }
 catch (        Exception e) {
        }
      }
    }
    println("Total => " + Arrays.toString(partitionCounts));
    println("");
    for (int j=0; j < partitionCounts.length; j++) {
      int partitionCount=partitionCounts[j];
      if (j < replicaMax) {
        Assert.assertTrue("index: " + j + ", partitions: "+ partitionCount+ ", max-replica: "+ replicaMax,partitionCount == totalPartitionCount);
      }
 else {
        Assert.assertTrue("index: " + j + ", partitions: "+ partitionCount+ ", max-replica: "+ replicaMax,partitionCount == 0);
      }
    }
    println("RECORDS: ");
    int[] recordCounts=new int[PartitionInfo.MAX_REPLICA_COUNT];
    for (    HazelcastInstance node : set) {
      if (node != null) {
        try {
          int[] rc=getCMapRecordCounts(node,"test");
          for (int j=0; j < rc.length; j++) {
            recordCounts[j]+=rc[j];
          }
          println(node.getCluster().getLocalMember() + " => " + Arrays.toString(rc));
        }
 catch (        Exception e) {
        }
      }
    }
    println("Total => " + Arrays.toString(recordCounts));
    println();
    for (int j=0; j < recordCounts.length; j++) {
      int recordCount=recordCounts[j];
      if (j < Math.min(testMapReplicaCount,replicaMax)) {
        Assert.assertTrue("index: " + j + ", records: "+ recordCount+ ", max-replica: "+ replicaMax,recordCount == entryCount);
      }
 else {
        Assert.assertTrue("index: " + j + ", records: "+ recordCount+ ", max-replica: "+ replicaMax,recordCount == 0);
      }
    }
    println("--------------------------------------------------------------------------------");
  }
}
