{
  final MemberGroupFactory nodeGroupFactory=new MemberGroupFactory(){
    public Collection<MemberGroup> createMemberGroups(    Collection<MemberImpl> members){
      MemberGroup[] g=new MemberGroup[4];
      for (int i=0; i < g.length; i++) {
        g[i]=new DefaultMemberGroup();
      }
      for (      MemberImpl member : members) {
        Address address=member.getAddress();
        if (even(address.getHost().hashCode()) && even(address.getPort())) {
          g[0].addMember(member);
        }
 else         if (even(address.getHost().hashCode()) && !even(address.getPort())) {
          g[1].addMember(member);
        }
 else         if (!even(address.getHost().hashCode()) && even(address.getPort())) {
          g[2].addMember(member);
        }
 else         if (!even(address.getHost().hashCode()) && !even(address.getPort())) {
          g[3].addMember(member);
        }
      }
      List<MemberGroup> list=new LinkedList<MemberGroup>();
      for (int i=0; i < g.length; i++) {
        if (g[i].size() > 0) {
          list.add(g[i]);
        }
      }
      return list;
    }
    boolean even(    int k){
      return k % 2 == 0;
    }
  }
;
  PartitionStateGenerator generator=PartitionStateGeneratorFactory.newCustomPartitionStateGenerator(nodeGroupFactory);
  test(generator,nodeGroupFactory);
}
