{
  final SerializationService serializationService=getSerializationService();
  final AddMembershipListenerRequest request=new AddMembershipListenerRequest();
  final ClientCallFuture future=innerSendAndHandle(request,conn,this);
  Object response=future.get();
  SerializableCollection coll=ErrorHandler.returnResultOrThrowException(response);
  Map<String,MemberImpl> prevMembers=Collections.emptyMap();
  if (!members.isEmpty()) {
    prevMembers=new HashMap<String,MemberImpl>(members.size());
    for (    MemberImpl member : members) {
      prevMembers.put(member.getUuid(),member);
    }
    members.clear();
  }
  final Iterator<Data> iter=coll.getCollection().iterator();
  String registrationId=null;
  if (iter.hasNext()) {
    registrationId=serializationService.toObject(iter.next());
  }
  while (iter.hasNext()) {
    members.add((MemberImpl)serializationService.toObject(iter.next()));
  }
  updateMembersRef();
  logger.info(membersString());
  final List<MembershipEvent> events=new LinkedList<MembershipEvent>();
  final Set<Member> eventMembers=Collections.unmodifiableSet(new LinkedHashSet<Member>(members));
  for (  MemberImpl member : members) {
    final MemberImpl former=prevMembers.remove(member.getUuid());
    if (former == null) {
      events.add(new MembershipEvent(client.getCluster(),member,MembershipEvent.MEMBER_ADDED,eventMembers));
    }
  }
  for (  MemberImpl member : prevMembers.values()) {
    events.add(new MembershipEvent(client.getCluster(),member,MembershipEvent.MEMBER_REMOVED,eventMembers));
  }
  for (  MembershipEvent event : events) {
    fireMembershipEvent(event);
  }
  return registrationId;
}
