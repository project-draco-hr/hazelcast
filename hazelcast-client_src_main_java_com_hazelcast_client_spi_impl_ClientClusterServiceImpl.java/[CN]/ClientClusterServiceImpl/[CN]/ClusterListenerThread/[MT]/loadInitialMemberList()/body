{
  final SerializationService serializationService=getSerializationService();
  final Data request=serializationService.toData(new AddMembershipListenerRequest());
  conn.write(request);
  final Data response=conn.read();
  SerializableCollection coll=ErrorHandler.returnResultOrThrowException(serializationService.toObject(response));
  Map<String,MemberImpl> prevMembers=Collections.emptyMap();
  if (!members.isEmpty()) {
    prevMembers=new HashMap<String,MemberImpl>(members.size());
    for (    MemberImpl member : members) {
      prevMembers.put(member.getUuid(),member);
    }
    members.clear();
  }
  for (  Data d : coll.getCollection()) {
    members.add((MemberImpl)serializationService.toObject(d));
  }
  updateMembersRef();
  logger.info(membersString());
  final List<MembershipEvent> events=new LinkedList<MembershipEvent>();
  final Set<Member> eventMembers=Collections.unmodifiableSet(new LinkedHashSet<Member>(members));
  for (  MemberImpl member : members) {
    final MemberImpl former=prevMembers.remove(member.getUuid());
    if (former == null) {
      events.add(new MembershipEvent(client.getCluster(),member,MembershipEvent.MEMBER_ADDED,eventMembers));
    }
  }
  for (  MemberImpl member : prevMembers.values()) {
    events.add(new MembershipEvent(client.getCluster(),member,MembershipEvent.MEMBER_REMOVED,eventMembers));
  }
  for (  MembershipEvent event : events) {
    fireMembershipEvent(event);
  }
}
