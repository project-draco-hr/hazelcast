{
  GroupProperties properties=node.getGroupProperties();
  this.node=node;
  this.nodeEngine=node.nodeEngine;
  this.logger=node.getLogger(InternalPartitionService.class);
  this.partitionCount=properties.getInteger(GroupProperty.PARTITION_COUNT);
  this.partitionStateSyncTimeoutHandler=logAllExceptions(logger,EXCEPTION_MSG_PARTITION_STATE_SYNC_TIMEOUT,FINEST);
  this.partitionListener=new InternalPartitionListener(this,node.getThisAddress());
  this.partitions=InternalPartitionImpl.createArray(partitionCount,partitionListener,node.getThisAddress());
  this.replicaVersions=PartitionReplicaVersions.createArray(partitionCount);
  this.memberGroupFactory=MemberGroupFactoryFactory.newMemberGroupFactory(node.getConfig().getPartitionGroupConfig());
  this.partitionStateGenerator=new PartitionStateGeneratorImpl();
  long intervalMillis=properties.getMillis(GroupProperty.PARTITION_MIGRATION_INTERVAL);
  this.partitionMigrationInterval=(intervalMillis > 0 ? intervalMillis : 0);
  this.partitionMigrationTimeout=properties.getMillis(GroupProperty.PARTITION_MIGRATION_TIMEOUT);
  this.migrationThread=new MigrationThread(node);
  this.proxy=new PartitionServiceProxy(this);
  ExecutionService executionService=nodeEngine.getExecutionService();
  TaskScheduler globalScheduler=executionService.getGlobalTaskScheduler();
  ReplicaSyncEntryProcessor entryProcessor=new ReplicaSyncEntryProcessor(this);
  this.replicaSyncScheduler=EntryTaskSchedulerFactory.newScheduler(globalScheduler,entryProcessor,POSTPONE);
  this.replicaSyncRequests=new AtomicReferenceArray<ReplicaSyncInfo>(partitionCount);
  this.maxParallelReplications=properties.getInteger(GroupProperty.PARTITION_MAX_PARALLEL_REPLICATIONS);
  this.replicaSyncProcessLock=new Semaphore(maxParallelReplications);
  this.delayedResumeMigrationTrigger=getMigrationTrigger(executionService);
  this.backupSyncCheckInterval=getBackupSyncCheckInterval();
  nodeEngine.getMetricsRegistry().scanAndRegister(this,"partitions");
}
