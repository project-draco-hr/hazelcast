{
  logger.info("Removing " + member);
  updateMemberGroupsSize();
  Address deadAddress=member.getAddress();
  Address thisAddress=node.getThisAddress();
  if (thisAddress.equals(deadAddress)) {
    return;
  }
  lock.lock();
  try {
    if (initialized && node.getClusterService().getClusterState() == ClusterState.ACTIVE) {
      stateVersion.incrementAndGet();
    }
    migrationQueue.clear();
    if (node.isMaster()) {
      rollbackActiveMigrationsFromPreviousMaster(node.getLocalMember().getUuid());
    }
    invalidateActiveMigrationsBelongingTo(deadAddress);
    pauseMigration();
    cancelReplicaSyncRequestsInternal(deadAddress);
    removeDeadAddress(deadAddress,thisAddress);
    if (node.isMaster() && initialized) {
      migrationQueue.add(new RepartitioningTask());
    }
    resumeMigrationEventually();
  }
  finally {
    lock.unlock();
  }
}
