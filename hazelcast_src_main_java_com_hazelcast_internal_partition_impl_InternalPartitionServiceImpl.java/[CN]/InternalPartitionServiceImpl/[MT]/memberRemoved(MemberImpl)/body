{
  logger.info("Removing " + member);
  updateMemberGroupsSize();
  final Address deadAddress=member.getAddress();
  final Address thisAddress=node.getThisAddress();
  lock.lock();
  try {
    if (initialized && node.getClusterService().getClusterState() == ClusterState.ACTIVE) {
      stateVersion.incrementAndGet();
    }
    migrationQueue.clear();
    if (node.isMaster() && !thisAddress.equals(lastMaster)) {
      Runnable runnable=new FixPartitionTableTask();
      migrationQueue.add(runnable);
    }
    lastMaster=node.getMasterAddress();
    cancelReplicaSyncRequestsInternal(deadAddress);
    if (node.isMaster()) {
      migrationQueue.add(new Runnable(){
        @Override public void run(){
          if (!initialized) {
            return;
          }
          invalidateActiveMigrationsBelongingTo(deadAddress);
          removeDeadAddress(deadAddress);
          syncPartitionRuntimeState();
        }
      }
);
      migrationQueue.add(new RepartitioningTask());
    }
  }
  finally {
    lock.unlock();
  }
}
