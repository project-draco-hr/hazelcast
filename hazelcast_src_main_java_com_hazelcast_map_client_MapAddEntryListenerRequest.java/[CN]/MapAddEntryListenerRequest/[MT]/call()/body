{
  final ClientEndpoint endpoint=getEndpoint();
  final ClientEngine clientEngine=getClientEngine();
  final MapService mapService=getService();
  final MutableString id=new MutableString();
  EntryListener<Object,Object> listener=new EntryListener<Object,Object>(){
    private void handleEvent(    EntryEvent<Object,Object> event){
      if (endpoint.live()) {
        clientEngine.sendResponse(endpoint,new PortableEntryEvent(event));
      }
 else {
        mapService.removeEventListener(name,id.getString());
      }
    }
    @Override public void entryAdded(    EntryEvent<Object,Object> event){
      handleEvent(event);
    }
    @Override public void entryRemoved(    EntryEvent<Object,Object> event){
      handleEvent(event);
    }
    @Override public void entryUpdated(    EntryEvent<Object,Object> event){
      handleEvent(event);
    }
    @Override public void entryEvicted(    EntryEvent<Object,Object> event){
      handleEvent(event);
    }
  }
;
  EventFilter eventFilter=new EntryEventFilter(includeValue,key);
  if (local) {
    id.setString(mapService.addLocalEventListener(listener,name));
  }
 else {
    id.setString(mapService.addEventListener(listener,eventFilter,name));
  }
  return true;
}
