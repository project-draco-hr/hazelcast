{
  Map<TypeElement,Map<Integer,CodecModel>> allCodecModel=createAllCodecModel(lang);
  Template messageTypeTemplate=messageTypeTemplateMap.get(lang);
  if (messageTypeTemplate != null) {
    for (    Element element : allCodecModel.keySet()) {
      generateMessageTypeEnum((TypeElement)element,lang,messageTypeTemplate);
    }
  }
  Template codecTemplate=codecTemplateMap.get(lang);
  if (lang == Lang.MD) {
    generateDoc(allCodecModel,codecTemplate);
  }
 else   if (lang == Lang.CPP) {
    for (    Map<Integer,CodecModel> map : allCodecModel.values()) {
      for (      CodecModel model : map.values()) {
        if (CodeGenerationUtils.shouldGenerateForCpp(model.getParentName())) {
          String content=generateFromTemplate(cppHeaderTemplate,model);
          saveFile(model.getClassName() + ".h","include." + model.getPackageName().toLowerCase(),content);
          content=generateFromTemplate(cppTemplate,model);
          saveFile(model.getClassName() + ".cpp","src." + model.getPackageName().toLowerCase(),content);
        }
      }
    }
  }
 else {
    for (    Map<Integer,CodecModel> map : allCodecModel.values()) {
      for (      CodecModel model : map.values()) {
        generateCodec(model,codecTemplate);
      }
    }
  }
}
