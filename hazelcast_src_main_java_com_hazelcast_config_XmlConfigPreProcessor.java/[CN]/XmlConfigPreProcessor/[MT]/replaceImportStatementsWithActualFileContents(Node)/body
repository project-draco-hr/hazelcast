{
  Document document=root.getOwnerDocument();
  NodeList misplacedImports=(NodeList)xpath.evaluate("//" + IMPORT.name + "/parent::*[not(name()=\""+ HAZELCAST.name+ "\")]",document,XPathConstants.NODESET);
  if (misplacedImports.getLength() > 0) {
    throw new IllegalStateException("<import> element can appear only in the top level of the XML");
  }
  NodeList importTags=(NodeList)xpath.evaluate("/" + HAZELCAST.name + "/"+ IMPORT.name,document,XPathConstants.NODESET);
  for (  Node node : new AbstractXmlConfigHelper.IterableNodeList(importTags)) {
    NamedNodeMap attributes=node.getAttributes();
    Node resourceAtrribute=attributes.getNamedItem("resource");
    String resource=resourceAtrribute.getTextContent();
    URL url=ConfigLoader.locateConfig(resource);
    if (url == null) {
      throw new HazelcastException("Failed to load resource : " + resource);
    }
    if (!currentlyImportedFiles.add(url.getPath())) {
      throw new HazelcastException("Cyclic loading of resource " + url.getPath() + " is detected !");
    }
    Document doc=xmlConfigBuilder.parse(url.openStream());
    Element importedRoot=doc.getDocumentElement();
    traverseChildsAndReplaceVariables(importedRoot);
    replaceImportStatementsWithActualFileContents(importedRoot);
    for (    Node fromImportedDoc : new AbstractXmlConfigHelper.IterableNodeList(importedRoot.getChildNodes())) {
      Node importedNode=root.getOwnerDocument().importNode(fromImportedDoc,true);
      root.insertBefore(importedNode,node);
    }
    root.removeChild(node);
  }
}
