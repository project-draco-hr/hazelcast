{
  final String queueName=randomString();
  final TransactionContext context=client.newTransactionContext();
  CountDownLatch txnRollbackLatch=new CountDownLatch(1);
  final CountDownLatch memberRemovedLatch=new CountDownLatch(1);
  context.beginTransaction();
  final TransactionalQueue queue=context.getQueue(queueName);
  queue.offer(randomString());
  client.getCluster().addMembershipListener(new MembershipAdapter(){
    @Override public void memberRemoved(    MembershipEvent membershipEvent){
      memberRemovedLatch.countDown();
    }
  }
);
  server.getLifecycleService().terminate();
  try {
    context.commitTransaction();
    fail("commit should throw exception !");
  }
 catch (  Exception e) {
    context.rollbackTransaction();
    txnRollbackLatch.countDown();
  }
  assertOpenEventually(txnRollbackLatch);
  assertOpenEventually(memberRemovedLatch);
  final IQueue<Object> q=client.getQueue(queueName);
  assertNull(q.poll());
  assertEquals(0,q.size());
}
