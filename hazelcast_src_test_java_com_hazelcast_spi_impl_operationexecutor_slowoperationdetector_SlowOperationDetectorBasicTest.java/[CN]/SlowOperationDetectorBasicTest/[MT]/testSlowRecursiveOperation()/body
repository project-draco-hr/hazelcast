{
  int partitionThreads=32;
  int numberOfOperations=40;
  int recursionDepth=15;
  Config config=new Config().setProperty(SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS.getName(),"1000").setProperty(SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS.getName(),valueOf(Integer.MAX_VALUE)).setProperty(PARTITION_OPERATION_THREAD_COUNT.getName(),valueOf(partitionThreads));
  instance=createHazelcastInstance(config);
  List<SlowRecursiveOperation> operations=new ArrayList<SlowRecursiveOperation>(numberOfOperations);
  int partitionCount=getPartitionService(instance).getPartitionCount();
  int partitionIndex=1;
  for (int i=0; i < numberOfOperations; i++) {
    int partitionId=partitionIndex % partitionCount;
    SlowRecursiveOperation operation=new SlowRecursiveOperation(partitionId,recursionDepth,20);
    operations.add(operation);
    executeOperation(instance,operation);
    partitionIndex+=partitionCount / partitionThreads + 1;
  }
  for (  SlowRecursiveOperation operation : operations) {
    operation.join();
  }
  Collection<SlowOperationLog> logs=getSlowOperationLogsAndAssertNumberOfSlowOperationLogs(instance,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,numberOfOperations);
  assertStackTraceContainsClassName(firstLog,"SlowRecursiveOperation");
}
