{
  final String mapName="testListener";
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance();
  final HazelcastInstance client1=HazelcastClient.newHazelcastClient();
  final IMap<Object,Object> map=client1.getMap(mapName);
  map.addEntryListener(new EntryListener<Object,Object>(){
    @Override public void entryAdded(    EntryEvent<Object,Object> event){
    }
    @Override public void entryRemoved(    EntryEvent<Object,Object> event){
    }
    @Override public void entryUpdated(    EntryEvent<Object,Object> event){
    }
    @Override public void entryEvicted(    EntryEvent<Object,Object> event){
    }
    @Override public void mapEvicted(    MapEvent event){
    }
    @Override public void mapCleared(    MapEvent event){
    }
  }
,true);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance();
  instance1.getLifecycleService().terminate();
  instance1=Hazelcast.newHazelcastInstance();
  final Field original=HazelcastInstanceProxy.class.getDeclaredField("original");
  original.setAccessible(true);
  final HazelcastInstanceImpl impl=(HazelcastInstanceImpl)original.get(instance1);
  final EventService eventService=impl.node.nodeEngine.getEventService();
  final Collection<EventRegistration> regs=eventService.getRegistrations(MapService.SERVICE_NAME,mapName);
  assertEquals("there should be only one registrations",1,regs.size());
}
