{
  MemberInfo memberInfo=(MemberInfo)event;
  Set<Integer> partitions=memberInfo.getPartitions();
  StringBuilder blocks=new StringBuilder();
  int size=partitions.size();
  int counter=0;
  for (  int partition : partitions) {
    blocks.append(partition);
    if (++counter != size) {
      blocks.append(", ");
    }
  }
  table.setText(1,1,String.valueOf(size));
  table.setText(2,1,blocks.toString());
  table.setText(3,1,formatMemorySize(memberInfo.getMaxMemory()));
  table.setText(4,1,formatMemorySize(memberInfo.getTotalMemory()));
  table.setText(5,1,formatMemorySize(memberInfo.getTotalMemory() - memberInfo.getFreeMemory()));
  table.setText(6,1,formatMemorySize(memberInfo.getFreeMemory()));
  table.setText(7,1,String.valueOf(memberInfo.getAvailableProcessors()));
  HashMap props=memberInfo.getSystemProps();
  int i=7;
  if (!set) {
    for (    Object key : props.keySet()) {
      i++;
      table.setText(i,0,String.valueOf(key));
      String value=String.valueOf(props.get(key));
      if (value.length() > 100) {
        String newValue=value.replaceAll(":",": ");
        value=newValue;
      }
      table.setText(i,1,value);
    }
    set=true;
  }
}
