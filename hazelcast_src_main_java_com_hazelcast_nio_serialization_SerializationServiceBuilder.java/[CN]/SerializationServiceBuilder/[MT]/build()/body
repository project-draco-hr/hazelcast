{
  if (version < 0) {
    version=0;
  }
  if (config != null) {
    addConfigDataSerializableFactories(dataSerializableFactories,config,classLoader);
    addConfigPortableFactories(portableFactories,config,classLoader);
    classDefinitions.addAll(config.getClassDefinitions());
  }
  final InputOutputFactory inputOutputFactory=createInputOutputFactory();
  final SerializationServiceImpl ss=new SerializationServiceImpl(inputOutputFactory,version,classLoader,dataSerializableFactories,portableFactories,classDefinitions,checkClassDefErrors,managedContext,partitioningStrategy,initialOutputBufferSize,enableCompression,enableSharedObject);
  SerializerHookLoader serializerHookLoader=new SerializerHookLoader(config,classLoader);
  Map<Class,Object> serializers=serializerHookLoader.getSerializers();
  for (  Map.Entry<Class,Object> entry : serializers.entrySet()) {
    Class serializationType=entry.getKey();
    Object value=entry.getValue();
    Serializer serializer;
    if (value instanceof SerializerHook) {
      serializer=((SerializerHook)value).createSerializer();
    }
 else {
      serializer=(Serializer)value;
    }
    if (value instanceof HazelcastInstanceAware) {
      ((HazelcastInstanceAware)value).setHazelcastInstance(hazelcastInstance);
    }
    if (ClassLoaderUtil.isInternalType(value.getClass())) {
      ss.safeRegister(serializationType,serializer);
    }
 else {
      ss.register(serializationType,serializer);
    }
  }
  if (config != null) {
    if (config.getGlobalSerializerConfig() != null) {
      GlobalSerializerConfig globalSerializerConfig=config.getGlobalSerializerConfig();
      Serializer serializer=globalSerializerConfig.getImplementation();
      if (serializer == null) {
        try {
          serializer=ClassLoaderUtil.newInstance(classLoader,globalSerializerConfig.getClassName());
        }
 catch (        Exception e) {
          throw new HazelcastSerializationException(e);
        }
      }
      if (serializer instanceof HazelcastInstanceAware) {
        ((HazelcastInstanceAware)serializer).setHazelcastInstance(hazelcastInstance);
      }
      ss.registerGlobal(serializer);
    }
  }
  return ss;
}
