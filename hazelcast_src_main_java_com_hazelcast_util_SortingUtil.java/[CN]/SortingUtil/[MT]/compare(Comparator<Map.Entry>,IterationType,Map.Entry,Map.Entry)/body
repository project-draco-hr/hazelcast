{
  if (comparator != null) {
    int result=comparator.compare(entry1,entry2);
    if (result != 0) {
      return result;
    }
    return compareIntegers(entry1.getKey().hashCode(),entry2.getKey().hashCode());
  }
  Object comparable1;
  Object comparable2;
switch (iterationType) {
case KEY:
    comparable1=entry1.getKey();
  comparable2=entry2.getKey();
break;
case VALUE:
comparable1=entry1.getValue();
comparable2=entry2.getValue();
break;
default :
if (entry1 instanceof Comparable && entry2 instanceof Comparable) {
comparable1=entry1;
comparable2=entry2;
}
 else {
comparable1=entry1.getKey();
comparable2=entry2.getKey();
}
break;
}
checkIfComparable(comparable1);
checkIfComparable(comparable2);
int result=((Comparable)comparable1).compareTo(comparable2);
if (result != 0) {
return result;
}
return compareIntegers(entry1.getKey().hashCode(),entry2.getKey().hashCode());
}
