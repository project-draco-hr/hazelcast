{
  createAllBlocks();
  Map<Address,List<Block>> addressBlocks=getCurrentMemberBlocks();
  if (addressBlocks.size() == 0) {
    return;
  }
  List<Block> lsEmptyBlocks=new ArrayList<Block>();
  for (  Block blockReal : blocks) {
    if (!blockReal.isMigrating() && thisAddress.equals(blockReal.getOwner())) {
      if (isBlockEmpty(blockReal.getBlockId())) {
        lsEmptyBlocks.add(blockReal);
        blockReal.setOwner(null);
        blockReal.setMigrationAddress(null);
        blockReal.setMigrationStarted(false);
      }
    }
  }
  addressBlocks=getCurrentMemberBlocks();
  int aveBlockOwnCount=PARTITION_COUNT / (addressBlocks.size());
  for (  final Entry<Address,List<Block>> entry : addressBlocks.entrySet()) {
    final Address address=entry.getKey();
    List<Block> blocks=entry.getValue();
    if (blocks.size() < aveBlockOwnCount) {
      int diff=aveBlockOwnCount - blocks.size();
      for (int i=0; i < diff && lsEmptyBlocks.size() > 0; i++) {
        Block block=lsEmptyBlocks.remove(0);
        block.setOwner(address);
      }
    }
  }
  if (lsEmptyBlocks.size() > 0) {
    for (    Address address : addressBlocks.keySet()) {
      if (lsEmptyBlocks.size() == 0) {
        break;
      }
      Block ownableBlock=lsEmptyBlocks.remove(0);
      ownableBlock.setOwner(address);
    }
  }
}
