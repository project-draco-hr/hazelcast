{
  logger.log(Level.FINEST,"Migrating [" + lsRecordsToMigrate.size() + "] "+ blockInfo);
  final CountDownLatch latch=new CountDownLatch(lsRecordsToMigrate.size());
  for (  final Record rec : lsRecordsToMigrate) {
    final CMap cmap=concurrentMapManager.getMap(rec.getName());
    parallelExecutorMigration.execute(new FallThroughRunnable(){
      public void doRun(){
        try {
          concurrentMapManager.migrateRecord(cmap,rec);
        }
  finally {
          latch.countDown();
        }
      }
    }
);
  }
  parallelExecutorMigration.execute(new FallThroughRunnable(){
    public void doRun(){
      try {
        logger.log(Level.FINEST,"migrate blockInfo " + blockInfo + " await ");
        latch.await(10,TimeUnit.SECONDS);
        if (MIGRATION_COMPLETE_WAIT_SECONDS > 0) {
          Thread.sleep(MIGRATION_COMPLETE_WAIT_SECONDS * 1000);
        }
      }
 catch (      InterruptedException ignored) {
      }
 finally {
        concurrentMapManager.enqueueAndReturn(new Processable(){
          public void process(){
            blockInfo.setOwner(blockInfo.getMigrationAddress());
            blockInfo.setMigrationAddress(null);
            completeMigration(blockInfo.getBlockId());
            sendCompletionInfo(blockInfo);
          }
        }
);
      }
    }
  }
);
}
