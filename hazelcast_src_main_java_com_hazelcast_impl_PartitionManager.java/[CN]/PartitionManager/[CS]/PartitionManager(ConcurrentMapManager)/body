{
  this.PARTITION_COUNT=concurrentMapManager.getPartitionCount();
  this.concurrentMapManager=concurrentMapManager;
  this.logger=concurrentMapManager.node.getLogger(PartitionManager.class.getName());
  this.partitions=new PartitionInfo[PARTITION_COUNT];
  for (int i=0; i < PARTITION_COUNT; i++) {
    this.partitions[i]=new PartitionInfo(i,new PartitionListener(){
      public void replicaChanged(      PartitionReplicaChangeEvent event){
        for (        PartitionListener partitionListener : lsPartitionListeners) {
          partitionListener.replicaChanged(event);
        }
        if (!concurrentMapManager.isMaster())         return;
        version.incrementAndGet();
      }
    }
);
  }
  concurrentMapManager.node.executorManager.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){
    public void run(){
      concurrentMapManager.enqueueAndReturn(new Processable(){
        public void process(){
          if (!concurrentMapManager.node.isActive())           return;
          sendClusterRuntimeState();
        }
      }
);
    }
  }
,5,5,TimeUnit.SECONDS);
}
