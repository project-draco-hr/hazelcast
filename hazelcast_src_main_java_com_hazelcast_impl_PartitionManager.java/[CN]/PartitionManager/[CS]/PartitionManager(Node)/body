{
  this.partitionCount=node.groupProperties.CONCURRENT_MAP_PARTITION_COUNT.getInteger();
  this.node=node;
  this.logger=this.node.getLogger(PartitionManager.class.getName());
  this.partitions=new PartitionInfo[partitionCount];
  systemLogService=node.getSystemLogService();
  for (int i=0; i < partitionCount; i++) {
    this.partitions[i]=new PartitionInfo(i,new PartitionListener(){
      public void replicaChanged(      PartitionReplicaChangeEvent event){
        for (        PartitionListener partitionListener : lsPartitionListeners) {
          partitionListener.replicaChanged(event);
        }
        if (event.getReplicaIndex() == 0 && event.getNewAddress() == null && node.isActive() && node.joined()) {
          final String warning="Owner of partition is being removed! " + "Possible data loss for partition[" + event.getPartitionId() + "]. "+ event;
          logger.log(Level.WARNING,warning);
          systemLogService.logPartition(warning);
        }
        if (node.isMaster()) {
          version.incrementAndGet();
        }
      }
    }
);
  }
  partitionMigrationInterval=node.groupProperties.PARTITION_MIGRATION_INTERVAL.getInteger() * 1000;
  partitionMigrationTimeout=(long)(node.groupProperties.PARTITION_MIGRATION_TIMEOUT.getLong() * 1.5f);
  immediateBackupInterval=node.groupProperties.IMMEDIATE_BACKUP_INTERVAL.getInteger() * 1000;
  migrationService=new MigrationService(node);
  migrationService.start();
  int partitionTableSendInterval=node.groupProperties.PARTITION_TABLE_SEND_INTERVAL.getInteger();
  if (partitionTableSendInterval <= 0) {
    partitionTableSendInterval=1;
  }
  node.executorManager.getScheduledExecutorService().scheduleAtFixedRate(new SendClusterStateTask(),partitionTableSendInterval,partitionTableSendInterval,TimeUnit.SECONDS);
  node.executorManager.getScheduledExecutorService().scheduleAtFixedRate(new CheckMigratingPartitionTask(),partitionTableSendInterval,partitionTableSendInterval,TimeUnit.SECONDS);
  node.executorManager.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){
    public void run(){
      if (node.isMaster() && node.isActive() && initialized&& shouldCheckRepartitioning()) {
        logger.log(Level.FINEST,"Checking partition table for repartitioning...");
        immediateTasksQueue.add(new CheckRepartitioningTask());
      }
    }
  }
,180,180,TimeUnit.SECONDS);
  node.nodeService.registerService(PARTITION_SERVICE_NAME,this);
}
