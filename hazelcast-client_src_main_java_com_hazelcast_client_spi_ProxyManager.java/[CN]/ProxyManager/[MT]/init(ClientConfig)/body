{
  register(MapService.SERVICE_NAME,ClientMapProxy.class);
  register(QueueService.SERVICE_NAME,ClientQueueProxy.class);
  register(MultiMapService.SERVICE_NAME,ClientMultiMapProxy.class);
  register(ListService.SERVICE_NAME,ClientListProxy.class);
  register(SetService.SERVICE_NAME,ClientSetProxy.class);
  register(SemaphoreService.SERVICE_NAME,ClientSemaphoreProxy.class);
  register(TopicService.SERVICE_NAME,ClientTopicProxy.class);
  register(AtomicLongService.SERVICE_NAME,ClientAtomicLongProxy.class);
  register(AtomicReferenceService.SERVICE_NAME,ClientAtomicReferenceProxy.class);
  register(DistributedExecutorService.SERVICE_NAME,ClientExecutorServiceProxy.class);
  register(LockServiceImpl.SERVICE_NAME,ClientLockProxy.class);
  register(CountDownLatchService.SERVICE_NAME,ClientCountDownLatchProxy.class);
  register(MapReduceService.SERVICE_NAME,ClientMapReduceProxy.class);
  register(ReplicatedMapService.SERVICE_NAME,ClientReplicatedMapProxy.class);
  register(IdGeneratorService.SERVICE_NAME,new ClientProxyFactory(){
    public ClientProxy create(    String id){
      String instanceName=client.getName();
      IAtomicLong atomicLong=client.getAtomicLong(IdGeneratorService.ATOMIC_LONG_NAME + id);
      return new ClientIdGeneratorProxy(instanceName,IdGeneratorService.SERVICE_NAME,id,atomicLong);
    }
  }
);
  for (  ProxyFactoryConfig proxyFactoryConfig : config.getProxyFactoryConfigs()) {
    try {
      ClassLoader classLoader=config.getClassLoader();
      String className=proxyFactoryConfig.getClassName();
      ClientProxyFactory clientProxyFactory=ClassLoaderUtil.newInstance(classLoader,className);
      register(proxyFactoryConfig.getService(),clientProxyFactory);
    }
 catch (    Exception e) {
      LOGGER.severe(e);
    }
  }
}
