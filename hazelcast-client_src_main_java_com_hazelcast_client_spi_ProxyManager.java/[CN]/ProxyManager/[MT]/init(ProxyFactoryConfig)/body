{
  register(MapService.SERVICE_NAME,new ClientProxyFactory(){
    public ClientProxy create(    Object id){
      return new ClientMapProxy(MapService.SERVICE_NAME,String.valueOf(id));
    }
  }
);
  register(QueueService.SERVICE_NAME,new ClientProxyFactory(){
    public ClientProxy create(    Object id){
      return new ClientQueueProxy(QueueService.SERVICE_NAME,String.valueOf(id));
    }
  }
);
  register(CollectionService.SERVICE_NAME,new ClientProxyFactory(){
    public ClientProxy create(    Object id){
      CollectionProxyId proxyId=(CollectionProxyId)id;
      final CollectionProxyType type=proxyId.getType();
switch (type) {
case MULTI_MAP:
        return new ClientMultiMapProxy(CollectionService.SERVICE_NAME,proxyId);
case LIST:
      return new ClientListProxy(CollectionService.SERVICE_NAME,proxyId);
case SET:
    return new ClientSetProxy(CollectionService.SERVICE_NAME,proxyId);
case QUEUE:
  return null;
}
return null;
}
}
);
register(SemaphoreService.SERVICE_NAME,new ClientProxyFactory(){
public ClientProxy create(Object id){
return new ClientSemaphoreProxy(SemaphoreService.SERVICE_NAME,String.valueOf(id));
}
}
);
register(TopicService.SERVICE_NAME,new ClientProxyFactory(){
public ClientProxy create(Object id){
return new ClientTopicProxy(TopicService.SERVICE_NAME,String.valueOf(id));
}
}
);
register(AtomicLongService.SERVICE_NAME,new ClientProxyFactory(){
public ClientProxy create(Object id){
return new ClientAtomicLongProxy(AtomicLongService.SERVICE_NAME,String.valueOf(id));
}
}
);
for (Map.Entry<String,ClientProxyFactory> entry : config.getFactories().entrySet()) {
register(entry.getKey(),entry.getValue());
}
}
