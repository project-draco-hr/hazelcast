{
  String mapName=randomString();
  Config cfg=new Config();
  cfg.getMapConfig(mapName).setInMemoryFormat(InMemoryFormat.OBJECT);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  HazelcastInstance instance1=factory.newHazelcastInstance(cfg);
  HazelcastInstance instance2=factory.newHazelcastInstance(cfg);
  HazelcastInstance instance3=factory.newHazelcastInstance(cfg);
  final int maxTasks=20;
  final Object key=generateKeyOwnedBy(instance2);
  final IMap<Object,List<Integer>> processorMap=instance1.getMap(mapName);
  processorMap.put(key,new ArrayList<Integer>());
  for (int i=0; i < maxTasks; i++) {
    processorMap.submitToKey(key,new SimpleEntryProcessor(i));
    if (i == maxTasks / 2) {
      instance2.getLifecycleService().terminate();
    }
 else {
      final IMap<Object,List<Integer>> p=instance3.getMap(mapName);
      List<Integer> actualOrder=p.get(key);
      System.out.println(">>>>>> SIZE for now at assert = " + actualOrder.size());
    }
  }
  List<Integer> expectedOrder=new ArrayList<Integer>();
  for (int i=0; i < maxTasks; i++) {
    expectedOrder.add(i);
  }
  assertTrueEventually(new AssertTask(){
    public void run() throws Exception {
      List<Integer> actualOrder=processorMap.get(key);
      System.out.println("list at assert = " + actualOrder);
      assertEquals(actualOrder.size(),maxTasks);
    }
  }
);
  List<Integer> actualOrder=processorMap.get(key);
  assertEquals(expectedOrder,actualOrder);
}
