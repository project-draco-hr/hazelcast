{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  Config cfg=getConfig();
  cfg.getMapConfig("default").setInMemoryFormat(InMemoryFormat.OBJECT);
  HazelcastInstance instance1=nodeFactory.newHazelcastInstance(cfg);
  IMap<Integer,Integer> map=instance1.getMap("testMapEntryProcessorEntryListeners");
  final AtomicInteger addCount=new AtomicInteger(0);
  final AtomicInteger updateCount=new AtomicInteger(0);
  final AtomicInteger removeCount=new AtomicInteger(0);
  final CountDownLatch latch=new CountDownLatch(3);
  map.addEntryListener(new EntryListener<Integer,Integer>(){
    @Override public void entryAdded(    EntryEvent<Integer,Integer> event){
      addCount.incrementAndGet();
      latch.countDown();
    }
    @Override public void entryRemoved(    EntryEvent<Integer,Integer> event){
      removeCount.incrementAndGet();
      latch.countDown();
    }
    @Override public void entryUpdated(    EntryEvent<Integer,Integer> event){
      updateCount.incrementAndGet();
      latch.countDown();
    }
    @Override public void entryEvicted(    EntryEvent<Integer,Integer> event){
    }
    @Override public void mapEvicted(    MapEvent event){
    }
    @Override public void mapCleared(    MapEvent event){
    }
  }
,true);
  map.executeOnKey(1,new ValueReaderEntryProcessor());
  assertNull(map.get(1));
  map.executeOnKey(1,new ValueReaderEntryProcessor());
  map.put(1,3);
  assertNotNull(map.get(1));
  map.executeOnKey(1,new ValueReaderEntryProcessor());
  map.put(2,2);
  ValueReaderEntryProcessor valueReaderEntryProcessor=new ValueReaderEntryProcessor();
  map.executeOnKey(2,valueReaderEntryProcessor);
  assertEquals(2,valueReaderEntryProcessor.getValue().intValue());
  map.put(2,5);
  map.executeOnKey(2,valueReaderEntryProcessor);
  assertEquals(5,valueReaderEntryProcessor.getValue().intValue());
  assertTrue(latch.await(1,TimeUnit.MINUTES));
  assertEquals(2,addCount.get());
  assertEquals(0,removeCount.get());
  assertEquals(1,updateCount.get());
}
