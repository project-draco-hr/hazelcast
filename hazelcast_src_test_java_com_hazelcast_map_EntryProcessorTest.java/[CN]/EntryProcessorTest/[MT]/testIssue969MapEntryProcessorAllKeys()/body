{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  Config cfg=new Config();
  cfg.getMapConfig("default").setInMemoryFormat(InMemoryFormat.OBJECT);
  HazelcastInstance instance1=nodeFactory.newHazelcastInstance(cfg);
  HazelcastInstance instance2=nodeFactory.newHazelcastInstance(cfg);
  IMap<Integer,Integer> map=instance1.getMap("testMapEntryProcessor");
  final AtomicInteger addCount=new AtomicInteger(0);
  final AtomicInteger updateCount=new AtomicInteger(0);
  final AtomicInteger removeCount=new AtomicInteger(0);
  map.addEntryListener(new EntryListener<Integer,Integer>(){
    @Override public void entryAdded(    EntryEvent<Integer,Integer> event){
      addCount.incrementAndGet();
    }
    @Override public void entryRemoved(    EntryEvent<Integer,Integer> event){
      removeCount.incrementAndGet();
    }
    @Override public void entryUpdated(    EntryEvent<Integer,Integer> event){
      updateCount.incrementAndGet();
    }
    @Override public void entryEvicted(    EntryEvent<Integer,Integer> event){
    }
  }
,true);
  int size=100;
  for (int i=0; i < size; i++) {
    map.put(i,i);
  }
  final EntryProcessor entryProcessor=new IncrementorEntryProcessor();
  Map<Integer,Object> res=map.executeOnEntries(entryProcessor);
  for (int i=0; i < size; i++) {
    assertEquals(map.get(i),(Object)(i + 1));
  }
  for (int i=0; i < size; i++) {
    assertEquals(map.get(i),res.get(i));
  }
  final RemoveEntryProcessor removeEntryProcessor=new RemoveEntryProcessor();
  map.executeOnEntries(removeEntryProcessor);
  assertEquals(0,map.size());
  assertEquals(100,addCount.get());
  assertEquals(100,removeCount.get());
  assertEquals(100,updateCount.get());
  instance1.getLifecycleService().shutdown();
  instance2.getLifecycleService().shutdown();
}
