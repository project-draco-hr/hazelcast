{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  Config cfg=getConfig();
  cfg.getMapConfig("default").setInMemoryFormat(InMemoryFormat.OBJECT);
  HazelcastInstance instance1=nodeFactory.newHazelcastInstance(cfg);
  nodeFactory.newHazelcastInstance(cfg);
  nodeFactory.newHazelcastInstance(cfg);
  IMap<Integer,Integer> map=instance1.getMap("testMapEntryProcessorEntryListeners");
  final AtomicInteger addCount=new AtomicInteger(0);
  final AtomicInteger updateCount=new AtomicInteger(0);
  final AtomicInteger removeCount=new AtomicInteger(0);
  final AtomicInteger addKey1Sum=new AtomicInteger(0);
  final AtomicInteger updateKey1Sum=new AtomicInteger(0);
  final AtomicInteger removeKey1Sum=new AtomicInteger(0);
  final CountDownLatch latch=new CountDownLatch(6);
  map.addEntryListener(new EntryAddedListener<Integer,Integer>(){
    @Override public void entryAdded(    EntryEvent<Integer,Integer> event){
      addCount.incrementAndGet();
      if (event.getKey() == 1) {
        addKey1Sum.addAndGet(event.getValue());
      }
      latch.countDown();
    }
  }
,true);
  map.addEntryListener(new EntryRemovedListener<Integer,Integer>(){
    @Override public void entryRemoved(    EntryEvent<Integer,Integer> event){
      removeCount.incrementAndGet();
      if (event.getKey() == 1) {
        removeKey1Sum.addAndGet(event.getOldValue());
      }
      latch.countDown();
    }
  }
,true);
  map.addEntryListener(new EntryUpdatedListener<Integer,Integer>(){
    @Override public void entryUpdated(    EntryEvent<Integer,Integer> event){
      updateCount.incrementAndGet();
      if (event.getKey() == 1) {
        updateKey1Sum.addAndGet(event.getValue());
      }
      latch.countDown();
    }
  }
,true);
  map.executeOnKey(1,new ValueSetterEntryProcessor(5));
  map.executeOnKey(2,new ValueSetterEntryProcessor(7));
  map.executeOnKey(2,new ValueSetterEntryProcessor(1));
  map.executeOnKey(1,new ValueSetterEntryProcessor(3));
  map.executeOnKey(1,new ValueSetterEntryProcessor(1));
  map.executeOnKey(1,new ValueSetterEntryProcessor(null));
  assertEquals((Integer)1,map.get(2));
  assertEquals(null,map.get(1));
  assertTrue(latch.await(100,TimeUnit.SECONDS));
  assertEquals(2,addCount.get());
  assertEquals(3,updateCount.get());
  assertEquals(1,removeCount.get());
  assertEquals(5,addKey1Sum.get());
  assertEquals(4,updateKey1Sum.get());
  assertEquals(1,removeKey1Sum.get());
}
