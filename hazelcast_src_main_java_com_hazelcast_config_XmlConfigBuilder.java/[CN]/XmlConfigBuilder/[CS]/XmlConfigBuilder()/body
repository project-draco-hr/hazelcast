{
  String configFile=System.getProperty("hazelcast.config");
  try {
    if (configFile != null) {
      configurationFile=new File(configFile);
      if (!configurationFile.exists()) {
        String msg="Config file at '" + configFile + "' doesn't exist.";
        msg+="\nHazelcast will try to use the hazelcast.xml config file in the classpath.";
        logger.log(Level.WARNING,msg);
        configurationFile=null;
      }
    }
    if (configurationFile == null) {
      configFile="hazelcast.xml";
      configurationFile=new File("hazelcast.xml");
      if (!configurationFile.exists()) {
        configurationFile=null;
      }
    }
    if (configurationFile != null) {
      logger.log(Level.INFO,"Using configuration file at " + configurationFile.getAbsolutePath());
      try {
        in=new FileInputStream(configurationFile);
        configurationUrl=configurationFile.toURI().toURL();
        usingSystemConfig=true;
      }
 catch (      final Exception e) {
        String msg="Having problem reading config file at '" + configFile + "'.";
        msg+="\nException message: " + e.getMessage();
        msg+="\nHazelcast will try to use the hazelcast.xml config file in the jar.";
        logger.log(Level.WARNING,msg);
        in=null;
      }
    }
    if (in == null) {
      configurationUrl=Config.class.getClassLoader().getResource("hazelcast.xml");
      if (configurationUrl == null)       return;
      in=Config.class.getClassLoader().getResourceAsStream("hazelcast.xml");
      if (in == null) {
        String msg="Having problem reading config file hazelcast.xml in the classpath.";
        msg+="\nHazelcast will start with default configuration.";
        logger.log(Level.WARNING,msg);
      }
    }
  }
 catch (  final Exception e) {
    logger.log(Level.SEVERE,"Error while creating configuration",e);
    e.printStackTrace();
  }
}
