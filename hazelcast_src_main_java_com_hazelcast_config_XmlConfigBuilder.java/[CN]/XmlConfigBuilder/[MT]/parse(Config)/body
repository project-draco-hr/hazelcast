{
  this.config=config;
  final DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
  Document doc=null;
  try {
    doc=builder.parse(in);
    final ByteArrayOutputStream baos=new ByteArrayOutputStream();
    Util.streamXML(doc,baos);
    final byte[] bytes=baos.toByteArray();
    final ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
    config.setXmlConfig(Util.inputStreamToString(bais));
    if ("true".equals(System.getProperty("hazelcast.config.print"))) {
      logger.log(Level.INFO,"Hazelcast config URL : " + config.getConfigurationUrl());
      logger.log(Level.INFO,"=== Hazelcast config xml ===");
      logger.log(Level.INFO,config.getXmlConfig());
      logger.log(Level.INFO,"==============================");
      logger.log(Level.INFO,"");
    }
  }
 catch (  final Exception e) {
    String msgPart="config file '" + config.getConfigurationFile() + "' set as a system property.";
    if (!usingSystemConfig) {
      msgPart="hazelcast-default.xml config file in the classpath.";
    }
    String msg="Having problem parsing the " + msgPart;
    msg+="\nException: " + e.getMessage();
    msg+="\nHazelcast will start with default configuration.";
    logger.log(Level.WARNING,msg);
    return;
  }
  final Element docElement=doc.getDocumentElement();
  try {
    docElement.getTextContent();
  }
 catch (  final Throwable e) {
    domLevel3=false;
  }
  for (  org.w3c.dom.Node node : new IterableNodeList(docElement.getChildNodes())) {
    final String nodeName=node.getNodeName();
    if ("network".equals(nodeName)) {
      handleNetwork(node);
    }
 else     if ("group".equals(nodeName)) {
      handleGroup(node);
    }
 else     if ("properties".equals(nodeName)) {
      handleProperties(node,config.getProperties());
    }
 else     if ("executor-service".equals(nodeName)) {
      handleExecutor(node);
    }
 else     if ("queue".equals(nodeName)) {
      handleQueue(node);
    }
 else     if ("map".equals(nodeName)) {
      handleMap(node);
    }
 else     if ("topic".equals(nodeName)) {
      handleTopic(node);
    }
 else     if ("merge-policies".equals(nodeName)) {
      handleMergePolicies(node);
    }
  }
}
