{
  final String name=getAttribute(node,"name");
  final MapConfig mapConfig=new MapConfig();
  mapConfig.setName(name);
  for (  org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {
    final String nodeName=cleanNodeName(n.getNodeName());
    final String value=getTextContent(n).trim();
    if ("backup-count".equals(nodeName)) {
      mapConfig.setBackupCount(getIntegerValue("backup-count",value,MapConfig.DEFAULT_BACKUP_COUNT));
    }
 else     if ("in-memory-format".equals(nodeName)) {
      mapConfig.setInMemoryFormat(MapConfig.InMemoryFormat.valueOf(value));
    }
 else     if ("statistics-enabled".equals(nodeName)) {
      mapConfig.setStatisticsEnabled(Boolean.valueOf(value));
    }
 else     if ("async-backup-count".equals(nodeName)) {
      mapConfig.setAsyncBackupCount(getIntegerValue("async-backup-count",value,MapConfig.MIN_BACKUP_COUNT));
    }
 else     if ("eviction-policy".equals(nodeName)) {
      mapConfig.setEvictionPolicy(MapConfig.EvictionPolicy.valueOf(value));
    }
 else     if ("max-size".equals(nodeName)) {
      final MaxSizeConfig msc=mapConfig.getMaxSizeConfig();
      final Node maxSizePolicy=n.getAttributes().getNamedItem("policy");
      if (maxSizePolicy != null) {
        msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.valueOf(getTextContent(maxSizePolicy)));
      }
      int size=0;
      if (value.length() < 2) {
        size=Integer.parseInt(value);
      }
 else {
        char last=value.charAt(value.length() - 1);
        int type=0;
        if (last == 'g' || last == 'G') {
          type=1;
        }
 else         if (last == 'm' || last == 'M') {
          type=2;
        }
        if (type == 0) {
          size=Integer.parseInt(value);
        }
 else         if (type == 1) {
          size=Integer.parseInt(value.substring(0,value.length() - 1)) * 1000;
        }
 else {
          size=Integer.parseInt(value.substring(0,value.length() - 1));
        }
      }
      msc.setSize(size);
    }
 else     if ("eviction-percentage".equals(nodeName)) {
      mapConfig.setEvictionPercentage(getIntegerValue("eviction-percentage",value,MapConfig.DEFAULT_EVICTION_PERCENTAGE));
    }
 else     if ("time-to-live-seconds".equals(nodeName)) {
      mapConfig.setTimeToLiveSeconds(getIntegerValue("time-to-live-seconds",value,MapConfig.DEFAULT_TTL_SECONDS));
    }
 else     if ("max-idle-seconds".equals(nodeName)) {
      mapConfig.setMaxIdleSeconds(getIntegerValue("max-idle-seconds",value,MapConfig.DEFAULT_MAX_IDLE_SECONDS));
    }
 else     if ("map-store".equals(nodeName)) {
      MapStoreConfig mapStoreConfig=createMapStoreConfig(n);
      mapConfig.setMapStoreConfig(mapStoreConfig);
    }
 else     if ("near-cache".equals(nodeName)) {
      handleViaReflection(n,mapConfig,new NearCacheConfig());
    }
 else     if ("merge-policy".equals(nodeName)) {
      mapConfig.setMergePolicy(value);
    }
 else     if ("read-backup-data".equals(nodeName)) {
      mapConfig.setReadBackupData(checkTrue(value));
    }
 else     if ("statistics-enabled".equals(nodeName)) {
      mapConfig.setStatisticsEnabled(checkTrue(value));
    }
 else     if ("wan-replication-ref".equals(nodeName)) {
      WanReplicationRef wanReplicationRef=new WanReplicationRef();
      final String wanName=getAttribute(n,"name");
      wanReplicationRef.setName(wanName);
      for (      org.w3c.dom.Node wanChild : new IterableNodeList(n.getChildNodes())) {
        final String wanChildName=cleanNodeName(wanChild.getNodeName());
        final String wanChildValue=getTextContent(n);
        if ("merge-policy".equals(wanChildName)) {
          wanReplicationRef.setMergePolicy(wanChildValue);
        }
      }
      mapConfig.setWanReplicationRef(wanReplicationRef);
    }
 else     if ("indexes".equals(nodeName)) {
      for (      org.w3c.dom.Node indexNode : new IterableNodeList(n.getChildNodes())) {
        if ("index".equals(cleanNodeName(indexNode))) {
          final NamedNodeMap attrs=indexNode.getAttributes();
          boolean ordered=checkTrue(getTextContent(attrs.getNamedItem("ordered")));
          String attribute=getTextContent(indexNode);
          mapConfig.addMapIndexConfig(new MapIndexConfig(attribute,ordered));
        }
      }
    }
 else     if ("entry-listeners".equals(nodeName)) {
      for (      org.w3c.dom.Node listenerNode : new IterableNodeList(n.getChildNodes())) {
        if ("entry-listener".equals(cleanNodeName(listenerNode))) {
          final NamedNodeMap attrs=listenerNode.getAttributes();
          boolean incValue=checkTrue(getTextContent(attrs.getNamedItem("include-value")));
          boolean local=checkTrue(getTextContent(attrs.getNamedItem("local")));
          String listenerClass=getTextContent(listenerNode);
          mapConfig.addEntryListenerConfig(new EntryListenerConfig(listenerClass,local,incValue));
        }
      }
    }
 else     if ("storage-type".equals(nodeName)) {
      mapConfig.setStorageType(StorageType.valueOf(value.toUpperCase()));
    }
  }
  this.config.addMapConfig(mapConfig);
}
