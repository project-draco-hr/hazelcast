{
  final Node attName=node.getAttributes().getNamedItem("name");
  final String name=getTextContent(attName);
  final MapConfig mapConfig=new MapConfig();
  mapConfig.setName(name);
  for (  org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {
    final String nodeName=n.getNodeName().toLowerCase();
    final String value=getTextContent(n).trim();
    if ("backup-count".equals(nodeName)) {
      mapConfig.setBackupCount(getIntegerValue("backup-count",value,MapConfig.DEFAULT_BACKUP_COUNT));
    }
 else     if ("eviction-policy".equals(nodeName)) {
      mapConfig.setEvictionPolicy(value);
    }
 else     if ("max-size".equals(nodeName)) {
      mapConfig.setMaxSize(getIntegerValue("max-size",value,MapConfig.DEFAULT_MAX_SIZE));
    }
 else     if ("eviction-percentage".equals(nodeName)) {
      mapConfig.setEvictionPercentage(getIntegerValue("eviction-percentage",value,MapConfig.DEFAULT_EVICTION_PERCENTAGE));
    }
 else     if ("eviction-delay-seconds".equals(nodeName)) {
      mapConfig.setEvictionDelaySeconds(getIntegerValue("eviction-delay-seconds",value,MapConfig.DEFAULT_EVICTION_DELAY_SECONDS));
    }
 else     if ("time-to-live-seconds".equals(nodeName)) {
      mapConfig.setTimeToLiveSeconds(getIntegerValue("time-to-live-seconds",value,MapConfig.DEFAULT_TTL_SECONDS));
    }
 else     if ("max-idle-seconds".equals(nodeName)) {
      mapConfig.setMaxIdleSeconds(getIntegerValue("max-idle-seconds",value,MapConfig.DEFAULT_MAX_IDLE_SECONDS));
    }
 else     if ("map-store".equals(nodeName)) {
      MapStoreConfig mapStoreConfig=createMapStoreConfig(n);
      mapConfig.setMapStoreConfig(mapStoreConfig);
    }
 else     if ("near-cache".equals(nodeName)) {
      handleViaReflection(n,mapConfig,new NearCacheConfig());
    }
  }
  this.config.getMapMapConfigs().put(name,mapConfig);
}
