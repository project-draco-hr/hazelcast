{
  Node attName=node.getAttributes().getNamedItem("name");
  String name=getTextContent(attName);
  MultiMapConfig multiMapConfig=new MultiMapConfig();
  multiMapConfig.setName(name);
  for (  Node n : childElements(node)) {
    String nodeName=cleanNodeName(n);
    String value=getTextContent(n).trim();
    if ("value-collection-type".equals(nodeName)) {
      multiMapConfig.setValueCollectionType(value);
    }
 else     if ("backup-count".equals(nodeName)) {
      multiMapConfig.setBackupCount(getIntegerValue("backup-count",value));
    }
 else     if ("async-backup-count".equals(nodeName)) {
      multiMapConfig.setAsyncBackupCount(getIntegerValue("async-backup-count",value));
    }
 else     if ("entry-listeners".equals(nodeName)) {
      for (      Node listenerNode : childElements(n)) {
        if ("entry-listener".equals(cleanNodeName(listenerNode))) {
          NamedNodeMap attrs=listenerNode.getAttributes();
          boolean incValue=getBooleanValue(getTextContent(attrs.getNamedItem("include-value")));
          boolean local=getBooleanValue(getTextContent(attrs.getNamedItem("local")));
          String listenerClass=getTextContent(listenerNode);
          multiMapConfig.addEntryListenerConfig(new EntryListenerConfig(listenerClass,local,incValue));
        }
      }
    }
 else     if ("statistics-enabled".equals(nodeName)) {
      multiMapConfig.setStatisticsEnabled(getBooleanValue(value));
    }
 else     if ("binary".equals(nodeName)) {
      multiMapConfig.setBinary(getBooleanValue(value));
    }
  }
  this.config.addMultiMapConfig(multiMapConfig);
}
