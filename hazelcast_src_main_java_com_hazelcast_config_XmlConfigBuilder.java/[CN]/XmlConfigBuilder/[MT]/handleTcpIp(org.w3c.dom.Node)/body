{
  final NamedNodeMap atts=node.getAttributes();
  final Join join=config.getNetworkConfig().getJoin();
  for (int a=0; a < atts.getLength(); a++) {
    final org.w3c.dom.Node att=atts.item(a);
    final String value=getTextContent(att).trim();
    if (att.getNodeName().equals("enabled")) {
      join.getTcpIpConfig().setEnabled(checkTrue(value));
    }
 else     if (att.getNodeName().equals("conn-timeout-seconds")) {
      join.getTcpIpConfig().setConnectionTimeoutSeconds(getIntegerValue("conn-timeout-seconds",value,5));
    }
  }
  final NodeList nodelist=node.getChildNodes();
  for (int i=0; i < nodelist.getLength(); i++) {
    final org.w3c.dom.Node n=nodelist.item(i);
    final String value=getTextContent(n).trim();
    if (cleanNodeName(n.getNodeName()).equals("required-member")) {
      join.getTcpIpConfig().setRequiredMember(value);
    }
 else     if (cleanNodeName(n.getNodeName()).equals("hostname")) {
      join.getTcpIpConfig().addMember(value);
    }
 else     if (cleanNodeName(n.getNodeName()).equals("address")) {
      int colonIndex=value.indexOf(':');
      if (colonIndex == -1) {
        logger.log(Level.WARNING,"Address should be in the form of ip:port. Address [" + value + "] is not valid.");
      }
 else {
        String hostStr=value.substring(0,colonIndex);
        String portStr=value.substring(colonIndex + 1);
        try {
          join.getTcpIpConfig().addAddress(new Address(hostStr,Integer.parseInt(portStr)));
        }
 catch (        UnknownHostException e) {
          logger.log(Level.WARNING,e.getMessage(),e);
        }
      }
    }
 else     if ("interface".equals(cleanNodeName(n.getNodeName()))) {
      join.getTcpIpConfig().addMember(value);
    }
 else     if ("member".equals(cleanNodeName(n.getNodeName()))) {
      join.getTcpIpConfig().addMember(value);
    }
 else     if ("members".equals(cleanNodeName(n.getNodeName()))) {
      join.getTcpIpConfig().addMember(value);
    }
  }
}
