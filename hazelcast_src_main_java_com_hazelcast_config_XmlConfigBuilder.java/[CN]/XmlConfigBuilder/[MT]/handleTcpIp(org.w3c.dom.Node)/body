{
  final NamedNodeMap atts=node.getAttributes();
  final Join join=config.getNetworkConfig().getJoin();
  for (int a=0; a < atts.getLength(); a++) {
    final org.w3c.dom.Node att=atts.item(a);
    final String value=getTextContent(att).trim();
    if (att.getNodeName().equals("enabled")) {
      join.getJoinMembers().setEnabled(checkTrue(value));
    }
 else     if (att.getNodeName().equals("conn-timeout-seconds")) {
      join.getJoinMembers().setConnectionTimeoutSeconds(getIntegerValue("conn-timeout-seconds",value,5));
    }
  }
  final NodeList nodelist=node.getChildNodes();
  members:   for (int i=0; i < nodelist.getLength(); i++) {
    final org.w3c.dom.Node n=nodelist.item(i);
    final String value=getTextContent(n).trim();
    if (n.getNodeName().equalsIgnoreCase("required-member")) {
      join.getJoinMembers().setRequiredMember(value);
    }
 else     if (n.getNodeName().equalsIgnoreCase("hostname")) {
      join.getJoinMembers().addMember(value);
    }
 else     if (n.getNodeName().equalsIgnoreCase("address")) {
      int colonIndex=value.indexOf(':');
      if (colonIndex == -1) {
        logger.log(Level.WARNING,"Address should be in the form of ip:port. Address [" + value + "] is not valid.");
      }
 else {
        String hostStr=value.substring(0,colonIndex);
        String portStr=value.substring(colonIndex + 1);
        try {
          join.getJoinMembers().addAddress(new Address(hostStr,Integer.parseInt(portStr),true));
        }
 catch (        UnknownHostException e) {
          e.printStackTrace();
        }
      }
    }
 else     if ("interface".equalsIgnoreCase(n.getNodeName())) {
      final int indexStar=value.indexOf('*');
      final int indexDash=value.indexOf('-');
      if (indexStar == -1 && indexDash == -1) {
        join.getJoinMembers().addMember(value);
      }
 else {
        final String first3=value.substring(0,value.lastIndexOf('.'));
        final String lastOne=value.substring(value.lastIndexOf('.') + 1);
        if (first3.indexOf('*') != -1 && first3.indexOf('-') != -1) {
          String msg="First 3 parts of interface definition cannot contain '*' and '-'.";
          msg+="\nPlease change the value '" + value + "' in the config file.";
          logger.log(Level.WARNING,msg);
          continue members;
        }
        if (lastOne.equals("*")) {
          for (int j=0; j < 256; j++) {
            join.getJoinMembers().addMember(first3 + "." + String.valueOf(j));
          }
        }
 else         if (lastOne.indexOf('-') != -1) {
          final int start=Integer.parseInt(lastOne.substring(0,lastOne.indexOf('-')));
          final int end=Integer.parseInt(lastOne.substring(lastOne.indexOf('-') + 1));
          for (int j=start; j <= end; j++) {
            join.getJoinMembers().addMember(first3 + "." + String.valueOf(j));
          }
        }
      }
    }
  }
}
