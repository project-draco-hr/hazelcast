{
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  final NamedNodeMap atts=node.getAttributes();
  for (int a=0; a < atts.getLength(); a++) {
    final Node att=atts.item(a);
    final String value=getTextContent(att).trim();
    if ("enabled".equals(att.getNodeName())) {
      mapStoreConfig.setEnabled(getBooleanValue(value));
    }
 else     if ("initial-mode".equals(att.getNodeName())) {
      final InitialLoadMode mode=InitialLoadMode.valueOf(upperCaseInternal(getTextContent(att)));
      mapStoreConfig.setInitialLoadMode(mode);
    }
  }
  for (  Node n : childElements(node)) {
    final String nodeName=cleanNodeName(n);
    if ("class-name".equals(nodeName)) {
      mapStoreConfig.setClassName(getTextContent(n).trim());
    }
 else     if ("factory-class-name".equals(nodeName)) {
      mapStoreConfig.setFactoryClassName(getTextContent(n).trim());
    }
 else     if ("write-delay-seconds".equals(nodeName)) {
      mapStoreConfig.setWriteDelaySeconds(getIntegerValue("write-delay-seconds",getTextContent(n).trim(),MapStoreConfig.DEFAULT_WRITE_DELAY_SECONDS));
    }
 else     if ("write-batch-size".equals(nodeName)) {
      mapStoreConfig.setWriteBatchSize(getIntegerValue("write-batch-size",getTextContent(n).trim(),MapStoreConfig.DEFAULT_WRITE_BATCH_SIZE));
    }
 else     if ("write-coalescing".equals(nodeName)) {
      final String writeCoalescing=getTextContent(n).trim();
      if (isNullOrEmpty(writeCoalescing)) {
        mapStoreConfig.setWriteCoalescing(MapStoreConfig.DEFAULT_WRITE_COALESCING);
      }
 else {
        mapStoreConfig.setWriteCoalescing(getBooleanValue(writeCoalescing));
      }
    }
 else     if ("properties".equals(nodeName)) {
      fillProperties(n,mapStoreConfig.getProperties());
    }
  }
  return mapStoreConfig;
}
