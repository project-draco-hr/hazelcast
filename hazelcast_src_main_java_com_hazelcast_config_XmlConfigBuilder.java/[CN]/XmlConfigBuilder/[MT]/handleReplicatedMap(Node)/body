{
  final Node attName=node.getAttributes().getNamedItem("name");
  final String name=getTextContent(attName);
  final ReplicatedMapConfig replicatedMapConfig=new ReplicatedMapConfig();
  replicatedMapConfig.setName(name);
  for (  Node n : childElements(node)) {
    final String nodeName=cleanNodeName(n);
    final String value=getTextContent(n).trim();
    if ("concurrency-level".equals(nodeName)) {
      replicatedMapConfig.setConcurrencyLevel(getIntegerValue("concurrency-level",value,ReplicatedMapConfig.DEFAULT_CONCURRENCY_LEVEL));
    }
 else     if ("in-memory-format".equals(nodeName)) {
      replicatedMapConfig.setInMemoryFormat(InMemoryFormat.valueOf(upperCaseInternal(value)));
    }
 else     if ("replication-delay-millis".equals(nodeName)) {
      replicatedMapConfig.setReplicationDelayMillis(getIntegerValue("replication-delay-millis",value,ReplicatedMapConfig.DEFAULT_REPLICATION_DELAY_MILLIS));
    }
 else     if ("async-fillup".equals(nodeName)) {
      replicatedMapConfig.setAsyncFillup(getBooleanValue(value));
    }
 else     if ("statistics-enabled".equals(nodeName)) {
      replicatedMapConfig.setStatisticsEnabled(getBooleanValue(value));
    }
 else     if ("entry-listeners".equals(nodeName)) {
      for (      Node listenerNode : childElements(n)) {
        if ("entry-listener".equals(cleanNodeName(listenerNode))) {
          final NamedNodeMap attrs=listenerNode.getAttributes();
          boolean incValue=getBooleanValue(getTextContent(attrs.getNamedItem("include-value")));
          boolean local=getBooleanValue(getTextContent(attrs.getNamedItem("local")));
          String listenerClass=getTextContent(listenerNode);
          replicatedMapConfig.addEntryListenerConfig(new EntryListenerConfig(listenerClass,local,incValue));
        }
      }
    }
 else     if ("merge-policy".equals(nodeName)) {
      replicatedMapConfig.setMergePolicy(value);
    }
  }
  this.config.addReplicatedMapConfig(replicatedMapConfig);
}
