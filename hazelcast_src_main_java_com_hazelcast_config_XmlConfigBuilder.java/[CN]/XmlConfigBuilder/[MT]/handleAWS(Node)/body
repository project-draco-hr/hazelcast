{
  final JoinConfig join=config.getNetworkConfig().getJoin();
  final NamedNodeMap atts=node.getAttributes();
  final AwsConfig awsConfig=join.getAwsConfig();
  for (int a=0; a < atts.getLength(); a++) {
    final Node att=atts.item(a);
    final String value=getTextContent(att).trim();
    if ("enabled".equals(lowerCaseInternal(att.getNodeName()))) {
      awsConfig.setEnabled(checkTrue(value));
    }
 else     if (att.getNodeName().equals("connection-timeout-seconds")) {
      awsConfig.setConnectionTimeoutSeconds(getIntegerValue("connection-timeout-seconds",value,DEFAULT_VALUE));
    }
  }
  for (  Node n : new IterableNodeList(node.getChildNodes())) {
    final String value=getTextContent(n).trim();
    if ("secret-key".equals(cleanNodeName(n.getNodeName()))) {
      awsConfig.setSecretKey(value);
    }
 else     if ("access-key".equals(cleanNodeName(n.getNodeName()))) {
      awsConfig.setAccessKey(value);
    }
 else     if ("region".equals(cleanNodeName(n.getNodeName()))) {
      awsConfig.setRegion(value);
    }
 else     if ("host-header".equals(cleanNodeName(n.getNodeName()))) {
      awsConfig.setHostHeader(value);
    }
 else     if ("security-group-name".equals(cleanNodeName(n.getNodeName()))) {
      awsConfig.setSecurityGroupName(value);
    }
 else     if ("tag-key".equals(cleanNodeName(n.getNodeName()))) {
      awsConfig.setTagKey(value);
    }
 else     if ("tag-value".equals(cleanNodeName(n.getNodeName()))) {
      awsConfig.setTagValue(value);
    }
 else     if ("iam-role".equals(cleanNodeName(n.getNodeName()))) {
      awsConfig.setIamRole(value);
    }
  }
}
