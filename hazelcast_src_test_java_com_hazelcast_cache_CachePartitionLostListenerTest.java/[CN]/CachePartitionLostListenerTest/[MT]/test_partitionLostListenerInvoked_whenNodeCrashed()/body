{
  final List<HazelcastInstance> instances=getCreatedInstancesShuffledAfterWarmedUp(2);
  final HazelcastInstance survivingInstance=instances.get(0);
  final HazelcastInstance terminatingInstance=instances.get(1);
  final EventCollectingCachePartitionLostListener listener=new EventCollectingCachePartitionLostListener(0);
  final HazelcastServerCachingProvider cachingProvider=createCachingProvider(survivingInstance);
  final CacheManager cacheManager=cachingProvider.getCacheManager();
  final CacheConfig<Integer,String> config=new CacheConfig<Integer,String>();
  config.setBackupCount(0);
  final Cache<Integer,String> cache=cacheManager.createCache(getIthCacheName(0),config);
  final ICache iCache=cache.unwrap(ICache.class);
  iCache.addPartitionLostListener(listener);
  final Set<Integer> survivingPartitionIds=new HashSet<Integer>();
  final Node survivingNode=getNode(survivingInstance);
  final Address survivingAddress=survivingNode.getThisAddress();
  for (  InternalPartition partition : survivingNode.getPartitionService().getPartitions()) {
    if (survivingAddress.equals(partition.getReplicaAddress(0))) {
      survivingPartitionIds.add(partition.getPartitionId());
    }
  }
  terminatingInstance.getLifecycleService().terminate();
  waitAllForSafeState(survivingInstance);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      final List<CachePartitionLostEvent> events=listener.getEvents();
      assertFalse(events.isEmpty());
      for (      CachePartitionLostEvent event : events) {
        assertFalse(survivingPartitionIds.contains(event.getPartitionId()));
      }
    }
  }
);
  cacheManager.destroyCache(getIthCacheName(0));
  cacheManager.close();
  cachingProvider.close();
}
