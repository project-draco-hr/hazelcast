{
  final AtomicReference<Thread> thread=new AtomicReference<Thread>();
  final AtomicBoolean interrupted=new AtomicBoolean();
  Future getFuture=spawn(new Callable<Object>(){
    @Override public Object call() throws Exception {
      thread.set(Thread.currentThread());
      try {
        return future.get(1,HOURS);
      }
  finally {
        interrupted.set(Thread.currentThread().isInterrupted());
      }
    }
  }
);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertNotSame(VOID,future.getState());
    }
  }
);
  sleepSeconds(5);
  thread.get().interrupt();
  assertCompletesEventually(getFuture);
  assertTrue(interrupted.get());
  try {
    future.get();
    fail();
  }
 catch (  InterruptedException e) {
  }
}
