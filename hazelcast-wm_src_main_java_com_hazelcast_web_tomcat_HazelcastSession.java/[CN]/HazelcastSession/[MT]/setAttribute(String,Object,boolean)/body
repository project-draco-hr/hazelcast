{
  if (name == null)   throw new IllegalArgumentException(sm.getString("standardSession.setAttribute.namenull"));
  if (HAZEL_SESSION_MARK.equals(name)) {
    throw new IllegalArgumentException(HAZEL_MARK_EXCEPTION);
  }
  if (value == null) {
    removeAttribute(name);
    return;
  }
  if (!isValidInternal())   throw new IllegalStateException(sm.getString("standardSession.setAttribute.ise"));
  if ((manager != null) && manager.getDistributable() && !(value instanceof Serializable))   throw new IllegalArgumentException(sm.getString("standardSession.setAttribute.iae"));
  HazelcastAttribute oldHattribute=(HazelcastAttribute)attributes.get(name);
  HttpSessionBindingEvent event=null;
  if (notify && value instanceof HttpSessionBindingListener) {
    if (oldHattribute != null && value != oldHattribute.getValue()) {
      event=new HttpSessionBindingEvent(getSession(),name,value);
      try {
        ((HttpSessionBindingListener)value).valueBound(event);
      }
 catch (      Throwable t) {
        manager.getContainer().getLogger().error(sm.getString("standardSession.bindingEvent"),t);
      }
    }
  }
  if (oldHattribute == null) {
    oldHattribute=new HazelcastAttribute(getIdInternal(),name,value);
  }
 else {
    oldHattribute.setValue(value);
  }
  long requestId=HazelcastValve.requestLocal.get();
  oldHattribute.touch(requestId);
  HazelcastAttribute unboundHattribute=(HazelcastAttribute)attributes.put(name,oldHattribute);
  Object unbound=unboundHattribute != null ? unboundHattribute.getValue() : null;
  if (notify && (unbound != null) && (unbound != value)&& (unbound instanceof HttpSessionBindingListener)) {
    try {
      ((HttpSessionBindingListener)unbound).valueUnbound(new HttpSessionBindingEvent(getSession(),name));
    }
 catch (    Throwable t) {
      manager.getContainer().getLogger().error(sm.getString("standardSession.bindingEvent"),t);
    }
  }
  if (!notify)   return;
  Context context=(Context)manager.getContainer();
  Object listeners[]=context.getApplicationEventListeners();
  if (listeners == null)   return;
  for (int i=0; i < listeners.length; i++) {
    if (!(listeners[i] instanceof HttpSessionAttributeListener))     continue;
    HttpSessionAttributeListener listener=(HttpSessionAttributeListener)listeners[i];
    try {
      if (unbound != null) {
        fireContainerEvent(context,"beforeSessionAttributeReplaced",listener);
        if (event == null) {
          event=new HttpSessionBindingEvent(getSession(),name,unbound);
        }
        listener.attributeReplaced(event);
        fireContainerEvent(context,"afterSessionAttributeReplaced",listener);
      }
 else {
        fireContainerEvent(context,"beforeSessionAttributeAdded",listener);
        if (event == null) {
          event=new HttpSessionBindingEvent(getSession(),name,value);
        }
        listener.attributeAdded(event);
        fireContainerEvent(context,"afterSessionAttributeAdded",listener);
      }
    }
 catch (    Throwable t) {
      try {
        if (unbound != null) {
          fireContainerEvent(context,"afterSessionAttributeReplaced",listener);
        }
 else {
          fireContainerEvent(context,"afterSessionAttributeAdded",listener);
        }
      }
 catch (      Exception e) {
        ;
      }
      manager.getContainer().getLogger().error(sm.getString("standardSession.attributeEvent"),t);
    }
  }
}
