{
  if (expiring)   return;
synchronized (this) {
    if (manager == null)     return;
    expiring=true;
    Context context=(Context)manager.getContainer();
    Object listeners[]=context.getApplicationLifecycleListeners();
    if (notify && (listeners != null)) {
      HttpSessionEvent event=new HttpSessionEvent(getSession());
      for (int i=0; i < listeners.length; i++) {
        int j=(listeners.length - 1) - i;
        if (!(listeners[j] instanceof HttpSessionListener))         continue;
        HttpSessionListener listener=(HttpSessionListener)listeners[j];
        try {
          fireContainerEvent(context,"beforeSessionDestroyed",listener);
          listener.sessionDestroyed(event);
          fireContainerEvent(context,"afterSessionDestroyed",listener);
        }
 catch (        Throwable t) {
          try {
            fireContainerEvent(context,"afterSessionDestroyed",listener);
          }
 catch (          Exception e) {
            ;
          }
          manager.getContainer().getLogger().error(sm.getString("standardSession.sessionEvent"),t);
        }
      }
    }
    if (ACTIVITY_CHECK) {
      accessCount.set(0);
    }
    setValid(false);
    long timeNow=System.currentTimeMillis();
    int timeAlive=(int)((timeNow - creationTime) / 1000);
synchronized (manager) {
      if (timeAlive > manager.getSessionMaxAliveTime()) {
        manager.setSessionMaxAliveTime(timeAlive);
      }
      int numExpired=manager.getExpiredSessions();
      numExpired++;
      manager.setExpiredSessions(numExpired);
      int average=manager.getSessionAverageAliveTime();
      average=((average * (numExpired - 1)) + timeAlive) / numExpired;
      manager.setSessionAverageAliveTime(average);
    }
    manager.remove(this);
    if (notify) {
      fireSessionEvent(Session.SESSION_DESTROYED_EVENT,null);
    }
    expiring=false;
    String keys[]=keys();
    for (int i=0; i < keys.length; i++)     removeAttributeHard(keys[i],notify);
    removeAttributeHard(HAZEL_SESSION_MARK,notify);
  }
}
