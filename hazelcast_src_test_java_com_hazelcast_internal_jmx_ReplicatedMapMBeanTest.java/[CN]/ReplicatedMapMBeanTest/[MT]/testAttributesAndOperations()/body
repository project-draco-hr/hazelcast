{
  long started=System.currentTimeMillis();
  replicatedMap.put("firstKey","firstValue");
  replicatedMap.put("secondKey","secondValue");
  replicatedMap.remove("secondKey");
  String value=replicatedMap.get("firstKey");
  String values=invokeMethod("values");
  String entries=invokeMethod("entrySet");
  long localEntryCount=getLongAttribute("localOwnedEntryCount");
  long localCreationTime=getLongAttribute("localCreationTime");
  long localLastAccessTime=getLongAttribute("localLastAccessTime");
  long localLastUpdateTime=getLongAttribute("localLastUpdateTime");
  long localHits=getLongAttribute("localHits");
  long localPutOperationCount=getLongAttribute("localPutOperationCount");
  long localGetOperationCount=getLongAttribute("localGetOperationCount");
  long localRemoveOperationCount=getLongAttribute("localRemoveOperationCount");
  long localTotalPutLatency=getLongAttribute("localTotalPutLatency");
  long localTotalGetLatency=getLongAttribute("localTotalGetLatency");
  long localTotalRemoveLatency=getLongAttribute("localTotalRemoveLatency");
  long localMaxPutLatency=getLongAttribute("localMaxPutLatency");
  long localMaxGetLatency=getLongAttribute("localMaxGetLatency");
  long localMaxRemoveLatency=getLongAttribute("localMaxRemoveLatency");
  long localEventOperationCount=getLongAttribute("localEventOperationCount");
  long localOtherOperationCount=getLongAttribute("localOtherOperationCount");
  long localTotal=getLongAttribute("localTotal");
  int size=getIntegerAttribute("size");
  assertEquals("firstValue",value);
  assertEquals("[firstValue,]",values);
  assertEquals("[{key:firstKey, value:firstValue},]",entries);
  assertEquals(1,localEntryCount);
  assertTrue(localCreationTime >= started);
  assertTrue(localLastAccessTime >= started);
  assertTrue(localLastUpdateTime >= started);
  assertEquals(3,localHits);
  assertEquals(2,localPutOperationCount);
  assertEquals(1,localGetOperationCount);
  assertEquals(1,localRemoveOperationCount);
  assertTrue("localTotalPutLatency should be >= 0",localTotalPutLatency >= 0);
  assertTrue("localTotalGetLatency should be >= 0",localTotalGetLatency >= 0);
  assertTrue("localTotalRemoveLatency should be >= 0",localTotalRemoveLatency >= 0);
  assertTrue("localMaxPutLatency should be >= 0",localMaxPutLatency >= 0);
  assertTrue("localMaxGetLatency should be >= 0",localMaxGetLatency >= 0);
  assertTrue("localMaxRemoveLatency should be >= 0",localMaxRemoveLatency >= 0);
  assertEquals(0,localEventOperationCount);
  assertTrue("localOtherOperationCount should be > 0",localOtherOperationCount > 0);
  assertTrue("localTotal should be > 0",localTotal > 0);
  assertEquals(1,size);
  holder.invokeMBeanOperation(TYPE_NAME,objectName,"clear",null,null);
  values=invokeMethod("values");
  entries=invokeMethod("entrySet");
  size=getIntegerAttribute("size");
  assertEquals("Empty",values);
  assertEquals("Empty",entries);
  assertEquals(0,size);
}
