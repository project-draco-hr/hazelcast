{
  final String mapName=randomMapName();
  Config config=newConfig(testCase.getMergePolicyClassName(),mapName);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  waitAllForSafeState(h1,h2);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.latch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  ReplicatedMap<Object,Object> map1=h1.getReplicatedMap(mapName);
  ReplicatedMap<Object,Object> map2=h2.getReplicatedMap(mapName);
  final Map<Object,Object> expectedValues=testCase.populateMaps(map1,map2,h1);
  assertOpenEventually(lifeCycleListener.latch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      ReplicatedMap<Object,Object> mapTest=h1.getReplicatedMap(mapName);
      for (      Map.Entry<Object,Object> entry : expectedValues.entrySet()) {
        assertEquals(entry.getValue(),mapTest.get(entry.getKey()));
      }
    }
  }
);
}
