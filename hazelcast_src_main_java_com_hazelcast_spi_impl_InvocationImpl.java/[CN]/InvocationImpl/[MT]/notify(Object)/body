{
  Object response;
  if (obj == null) {
    response=NULL_RESPONSE;
  }
 else   if (obj instanceof CallTimeoutException) {
    response=RETRY_RESPONSE;
    if (logger.isFinestEnabled()) {
      logger.finest("Call timed-out during wait-notify phase, retrying call: " + toString());
    }
    invokeCount--;
  }
 else   if (obj instanceof Throwable) {
    final Throwable error=(Throwable)obj;
    final ExceptionAction action=onException(error);
    final int localInvokeCount=invokeCount;
    if (action == ExceptionAction.RETRY_INVOCATION && localInvokeCount < tryCount) {
      response=RETRY_RESPONSE;
      if (localInvokeCount > 99 && localInvokeCount % 10 == 0) {
        logger.warning("Retrying invocation: " + toString() + ", Reason: "+ error);
      }
    }
 else     if (action == ExceptionAction.CONTINUE_WAIT) {
      response=WAIT_RESPONSE;
    }
 else {
      response=obj;
    }
  }
 else {
    response=obj;
  }
  if (response == RETRY_RESPONSE) {
    if (invocationFuture.interrupted) {
      invocationFuture.set(INTERRUPTED_RESPONSE);
    }
 else {
      final ExecutionService ex=nodeEngine.getExecutionService();
      ex.schedule(new ScheduledTaskRunner(ex.getExecutor(ExecutionService.ASYNC_EXECUTOR),new ReinvocationTask()),tryPauseMillis,TimeUnit.MILLISECONDS);
    }
    return;
  }
  if (response == WAIT_RESPONSE) {
    return;
  }
  if (response instanceof Response && op instanceof BackupAwareOperation) {
    final Response resp=(Response)response;
    if (resp.backupCount > 0) {
      waitForBackups(resp.backupCount,5,TimeUnit.SECONDS,resp);
      return;
    }
  }
  invocationFuture.set(response);
}
