{
  if (!isActive()) {
    remote=false;
    throw new HazelcastInstanceNotActiveException();
  }
  invokeCount++;
  final Address target=getTarget();
  final Address thisAddress=nodeEngine.getThisAddress();
  if (target == null) {
    remote=false;
    if (isActive()) {
      setResult(new WrongTargetException(thisAddress,target,partitionId,replicaIndex,op.getClass().getName(),serviceName));
    }
 else {
      setResult(new HazelcastInstanceNotActiveException());
    }
  }
 else   if (!OperationAccessor.isJoinOperation(op) && nodeEngine.getClusterService().getMember(target) == null) {
    setResult(new TargetNotMemberException(target,partitionId,op.getClass().getName(),serviceName));
  }
 else {
    if (op.getPartitionId() != partitionId) {
      setResult(new IllegalStateException("Partition id of operation: " + op.getPartitionId() + " is not equal to the partition id of invocation: "+ partitionId));
      return;
    }
    if (op.getReplicaIndex() != replicaIndex) {
      setResult(new IllegalStateException("Replica index of operation: " + op.getReplicaIndex() + " is not equal to the replica index of invocation: "+ replicaIndex));
      return;
    }
    OperationAccessor.setInvocationTime(op,nodeEngine.getClusterTime());
    final OperationServiceImpl operationService=nodeEngine.operationService;
    if (thisAddress.equals(target)) {
      remote=false;
      ResponseHandlerFactory.setLocalResponseHandler(this);
      operationService.runOperation(op);
    }
 else {
      remote=true;
      RemoteCall call=new RemoteCall(target,this);
      final long callId=operationService.registerRemoteCall(call);
      OperationAccessor.setCallId(op,callId);
      boolean sent=operationService.send(op,target);
      if (!sent) {
        setResult(new RetryableIOException("Packet not sent to -> " + target));
      }
    }
  }
}
