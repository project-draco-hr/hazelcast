{
  if (!nodeEngine.isActive()) {
    remote=false;
    throw new HazelcastInstanceNotActiveException();
  }
  target=getTarget();
  invokeCount++;
  final Address thisAddress=nodeEngine.getThisAddress();
  if (target == null) {
    remote=false;
    if (nodeEngine.isActive()) {
      notify(new WrongTargetException(thisAddress,target,partitionId,replicaIndex,op.getClass().getName(),serviceName));
    }
 else {
      notify(new HazelcastInstanceNotActiveException());
    }
  }
 else {
    final MemberImpl member=nodeEngine.getClusterService().getMember(target);
    if (!OperationAccessor.isJoinOperation(op) && member == null) {
      notify(new TargetNotMemberException(target,partitionId,op.getClass().getName(),serviceName));
    }
 else {
      if (op.getPartitionId() != partitionId) {
        notify(new IllegalStateException("Partition id of operation: " + op.getPartitionId() + " is not equal to the partition id of invocation: "+ partitionId));
        return;
      }
      if (op.getReplicaIndex() != replicaIndex) {
        notify(new IllegalStateException("Replica index of operation: " + op.getReplicaIndex() + " is not equal to the replica index of invocation: "+ replicaIndex));
        return;
      }
      final OperationServiceImpl operationService=nodeEngine.operationService;
      OperationAccessor.setInvocationTime(op,nodeEngine.getClusterTime());
      if (thisAddress.equals(target)) {
        remote=false;
        final long prevCallId=op.getCallId();
        if (prevCallId != 0) {
          operationService.deregisterRemoteCall(prevCallId);
        }
        if (op instanceof BackupAwareOperation) {
          final long callId=operationService.newCallId();
          registerBackups((BackupAwareOperation)op,callId);
          OperationAccessor.setCallId(op,callId);
        }
        ResponseHandlerFactory.setLocalResponseHandler(op,this);
        if (op instanceof PartitionAwareOperation) {
          operationService.executeOperation(op);
        }
 else {
          operationService.runOperation(op);
        }
      }
 else {
        remote=true;
        final RemoteCall call=member != null ? new RemoteCall(member,this) : new RemoteCall(target,this);
        final long callId=operationService.registerRemoteCall(call);
        if (op instanceof BackupAwareOperation) {
          registerBackups((BackupAwareOperation)op,callId);
        }
        OperationAccessor.setCallId(op,callId);
        boolean sent=operationService.send(op,target);
        if (!sent) {
          notify(new RetryableIOException("Packet not sent to -> " + target));
        }
      }
    }
  }
}
