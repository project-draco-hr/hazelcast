{
  BeanDefinitionBuilder cacheConfigBuilder=createBeanBuilder(CacheSimpleConfig.class);
  final Node attName=node.getAttributes().getNamedItem("name");
  final String name=getTextContent(attName);
  fillAttributeValues(node,cacheConfigBuilder);
  for (  org.w3c.dom.Node childNode : new IterableNodeList(node.getChildNodes(),Node.ELEMENT_NODE)) {
    if ("max-size".equals(cleanNodeName(childNode))) {
      final CacheMaxSizeConfig maxSizeConfig=new CacheMaxSizeConfig();
      final Node size=childNode.getAttributes().getNamedItem("size");
      final Node maxSizePolicy=childNode.getAttributes().getNamedItem("policy");
      if (size != null) {
        maxSizeConfig.setSize(Integer.parseInt(getTextContent(size)));
      }
      if (maxSizePolicy != null) {
        maxSizeConfig.setMaxSizePolicy(CacheMaxSizeConfig.CacheMaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
      }
      cacheConfigBuilder.addPropertyValue("maxSizeConfig",maxSizeConfig);
    }
    if ("cache-entry-listeners".equals(cleanNodeName(childNode))) {
      ManagedList listeners=new ManagedList();
      for (      Node listenerNode : new IterableNodeList(childNode.getChildNodes(),Node.ELEMENT_NODE)) {
        final BeanDefinitionBuilder listenerConfBuilder=createBeanBuilder(CacheSimpleEntryListenerConfig.class);
        fillAttributeValues(listenerNode,listenerConfBuilder);
        listeners.add(listenerConfBuilder.getBeanDefinition());
      }
      cacheConfigBuilder.addPropertyValue("cacheEntryListeners",listeners);
    }
  }
  cacheConfigManagedMap.put(name,cacheConfigBuilder.getBeanDefinition());
}
