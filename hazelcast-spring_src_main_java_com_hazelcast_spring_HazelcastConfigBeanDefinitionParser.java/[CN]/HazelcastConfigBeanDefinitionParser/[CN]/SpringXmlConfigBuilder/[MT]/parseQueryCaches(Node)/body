{
  final BeanDefinitionBuilder builder=createBeanBuilder(QueryCacheConfig.class);
  for (  Node node : childElements(queryCacheNode)) {
    String nodeName=cleanNodeName(node);
    String textContent=getTextContent(node);
    NamedNodeMap attrs=queryCacheNode.getAttributes();
    String cacheName=getTextContent(attrs.getNamedItem("name"));
    builder.addPropertyValue("name",cacheName);
    if ("predicate".equals(nodeName)) {
      BeanDefinitionBuilder predicateBuilder=createBeanBuilder(PredicateConfig.class);
      String predicateType=getTextContent(node.getAttributes().getNamedItem("type"));
      if ("sql".equals(predicateType)) {
        predicateBuilder.addPropertyValue("sql",textContent);
      }
 else       if ("class-name".equals(predicateType)) {
        predicateBuilder.addPropertyValue("className",textContent);
      }
      builder.addPropertyValue("predicateConfig",predicateBuilder.getBeanDefinition());
    }
 else     if ("entry-listeners".equals(nodeName)) {
      ManagedList listeners=new ManagedList();
      final String implementationAttr="implementation";
      for (      Node listenerNode : childElements(node)) {
        BeanDefinitionBuilder listenerConfBuilder=createBeanBuilder(EntryListenerConfig.class);
        fillAttributeValues(listenerNode,listenerConfBuilder,implementationAttr);
        Node implementationNode=listenerNode.getAttributes().getNamedItem(implementationAttr);
        if (implementationNode != null) {
          listenerConfBuilder.addPropertyReference(implementationAttr,getTextContent(implementationNode));
        }
        listeners.add(listenerConfBuilder.getBeanDefinition());
      }
      builder.addPropertyValue("entryListenerConfigs",listeners);
    }
 else     if ("include-value".equals(nodeName)) {
      boolean includeValue=getBooleanValue(textContent);
      builder.addPropertyValue("includeValue",includeValue);
    }
 else     if ("batch-size".equals(nodeName)) {
      int batchSize=getIntegerValue("batch-size",textContent.trim());
      builder.addPropertyValue("batchSize",batchSize);
    }
 else     if ("buffer-size".equals(nodeName)) {
      int bufferSize=getIntegerValue("buffer-size",textContent.trim());
      builder.addPropertyValue("bufferSize",bufferSize);
    }
 else     if ("delay-seconds".equals(nodeName)) {
      int delaySeconds=getIntegerValue("delay-seconds",textContent.trim());
      builder.addPropertyValue("delaySeconds",delaySeconds);
    }
 else     if ("in-memory-format".equals(nodeName)) {
      String value=textContent.trim();
      builder.addPropertyValue("inMemoryFormat",InMemoryFormat.valueOf(upperCaseInternal(value)));
    }
 else     if ("coalesce".equals(nodeName)) {
      boolean coalesce=getBooleanValue(textContent);
      builder.addPropertyValue("coalesce",coalesce);
    }
 else     if ("populate".equals(nodeName)) {
      boolean populate=getBooleanValue(textContent);
      builder.addPropertyValue("populate",populate);
    }
 else     if ("indexes".equals(nodeName)) {
      ManagedList indexes=new ManagedList();
      for (      Node indexNode : childElements(node)) {
        final BeanDefinitionBuilder indexConfBuilder=createBeanBuilder(MapIndexConfig.class);
        fillAttributeValues(indexNode,indexConfBuilder);
        indexes.add(indexConfBuilder.getBeanDefinition());
      }
      builder.addPropertyValue("indexConfigs",indexes);
    }
 else     if ("eviction".equals(nodeName)) {
      builder.addPropertyValue("evictionConfig",getEvictionConfig(node));
    }
  }
  return builder;
}
