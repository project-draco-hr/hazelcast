{
  BeanDefinitionBuilder serviceConfigBuilder=createBeanBuilder(ServiceConfig.class);
  final AbstractBeanDefinition beanDefinition=serviceConfigBuilder.getBeanDefinition();
  fillAttributeValues(node,serviceConfigBuilder);
  boolean classNameSet=false;
  for (  Node child : childElements(node)) {
    final String nodeName=cleanNodeName(child);
    if ("name".equals(nodeName)) {
      serviceConfigBuilder.addPropertyValue(xmlToJavaName(nodeName),getTextContent(child));
    }
 else     if ("class-name".equals(nodeName)) {
      serviceConfigBuilder.addPropertyValue(xmlToJavaName(nodeName),getTextContent(child));
      classNameSet=true;
    }
 else     if ("properties".equals(nodeName)) {
      handleProperties(child,serviceConfigBuilder);
    }
 else     if ("configuration".equals(nodeName)) {
      final Node parser=child.getAttributes().getNamedItem("parser");
      final String name=getTextContent(parser);
      try {
        ServiceConfigurationParser serviceConfigurationParser=ClassLoaderUtil.newInstance(getClass().getClassLoader(),name);
        Object obj=serviceConfigurationParser.parse((Element)child);
        serviceConfigBuilder.addPropertyValue(xmlToJavaName("config-object"),obj);
      }
 catch (      Exception e) {
        ExceptionUtil.sneakyThrow(e);
      }
    }
  }
  final NamedNodeMap attrs=node.getAttributes();
  Node classNameNode=attrs.getNamedItem("class-name");
  if (classNameNode != null) {
    serviceConfigBuilder.addPropertyValue("className",getTextContent(classNameNode));
  }
  Node implNode=attrs.getNamedItem("implementation");
  if (implNode != null) {
    serviceConfigBuilder.addPropertyReference("implementation",getTextContent(implNode));
  }
  Assert.isTrue(classNameSet || classNameNode != null || implNode != null,"One of 'class-name' or 'implementation' " + "attributes is required to create ServiceConfig!");
  return beanDefinition;
}
