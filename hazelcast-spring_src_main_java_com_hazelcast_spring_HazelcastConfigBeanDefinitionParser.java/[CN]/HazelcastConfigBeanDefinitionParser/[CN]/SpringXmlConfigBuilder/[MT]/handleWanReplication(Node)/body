{
  final BeanDefinitionBuilder wanRepConfigBuilder=createBeanBuilder(WanReplicationConfig.class);
  final AbstractBeanDefinition beanDefinition=wanRepConfigBuilder.getBeanDefinition();
  final Node attName=node.getAttributes().getNamedItem("name");
  final String name=getTextContent(attName);
  wanRepConfigBuilder.addPropertyValue("name",name);
  final ManagedList wanPublishers=new ManagedList();
  for (  Node n : childElements(node)) {
    final String nName=cleanNodeName(n);
    if ("wan-publisher".equals(nName)) {
      final BeanDefinitionBuilder publisherConfigBuilder=createBeanBuilder(WanPublisherConfig.class);
      final AbstractBeanDefinition childBeanDefinition=publisherConfigBuilder.getBeanDefinition();
      fillAttributeValues(n,publisherConfigBuilder,Collections.<String>emptyList());
      final NamedNodeMap attrs=n.getAttributes();
      Node classNameNode=attrs.getNamedItem("class-name");
      String className=classNameNode != null ? getTextContent(classNameNode) : null;
      Node implNode=attrs.getNamedItem("implementation");
      String implementation=implNode != null ? getTextContent(implNode) : null;
      publisherConfigBuilder.addPropertyValue("className",className);
      if (implementation != null) {
        publisherConfigBuilder.addPropertyReference("implementation",implementation);
      }
      Assert.isTrue(className != null || implementation != null,"One of 'class-name' or 'implementation' " + "attributes is required to create WanPublisherConfig!");
      for (      Node child : childElements(n)) {
        final String nodeName=cleanNodeName(child);
        if ("properties".equals(nodeName)) {
          handleProperties(child,publisherConfigBuilder);
          break;
        }
 else         if ("queue-full-behavior".equals(nodeName)) {
          publisherConfigBuilder.addPropertyValue(xmlToJavaName(nodeName),getTextContent(child));
        }
 else         if ("queue-capacity".equals(nodeName)) {
          publisherConfigBuilder.addPropertyValue(xmlToJavaName(nodeName),getTextContent(child));
        }
      }
      wanPublishers.add(childBeanDefinition);
    }
 else     if ("wan-consumer".equals(nName)) {
      final BeanDefinitionBuilder consumerConfigBuilder=createBeanBuilder(WanConsumerConfig.class);
      final NamedNodeMap attrs=n.getAttributes();
      Node classNameNode=attrs.getNamedItem("class-name");
      String className=classNameNode != null ? getTextContent(classNameNode) : null;
      Node implNode=attrs.getNamedItem("implementation");
      String implementation=implNode != null ? getTextContent(implNode) : null;
      consumerConfigBuilder.addPropertyValue("className",className);
      if (implementation != null) {
        consumerConfigBuilder.addPropertyReference("implementation",implementation);
      }
      Assert.isTrue(className != null || implementation != null,"One of 'class-name' or 'implementation' " + "attributes is required to create WanConsumerConfig!");
      for (      Node child : childElements(n)) {
        final String nodeName=cleanNodeName(child);
        if ("properties".equals(nodeName)) {
          handleProperties(child,consumerConfigBuilder);
          break;
        }
      }
      wanRepConfigBuilder.addPropertyValue("wanConsumerConfig",consumerConfigBuilder.getBeanDefinition());
    }
  }
  wanRepConfigBuilder.addPropertyValue("wanPublisherConfigs",wanPublishers);
  wanReplicationManagedMap.put(name,beanDefinition);
}
