{
  final BeanDefinitionBuilder memberAttributeConfigBuilder=createBeanBuilder(MemberAttributeConfig.class);
  final AbstractBeanDefinition beanDefinition=memberAttributeConfigBuilder.getBeanDefinition();
  ManagedMap<String,Object> attributes=new ManagedMap<String,Object>();
  for (  Node n : new IterableNodeList(node.getChildNodes(),Node.ELEMENT_NODE)) {
    final String name=cleanNodeName(n.getNodeName());
    if (!"attribute".equals(name)) {
      continue;
    }
    final String attributeName=getTextContent(n.getAttributes().getNamedItem("name")).trim();
    final String attributeType=getTextContent(n.getAttributes().getNamedItem("type")).trim();
    final String value=getTextContent(n);
    final Object oValue;
    if ("string".equals(attributeType)) {
      oValue=value;
    }
 else     if ("boolean".equals(attributeType)) {
      oValue=Boolean.parseBoolean(value);
    }
 else     if ("byte".equals(attributeType)) {
      oValue=Byte.parseByte(value);
    }
 else     if ("double".equals(attributeType)) {
      oValue=Double.parseDouble(value);
    }
 else     if ("float".equals(attributeType)) {
      oValue=Float.parseFloat(value);
    }
 else     if ("int".equals(attributeType)) {
      oValue=Integer.parseInt(value);
    }
 else     if ("long".equals(attributeType)) {
      oValue=Long.parseLong(value);
    }
 else     if ("short".equals(attributeType)) {
      oValue=Short.parseShort(value);
    }
 else {
      oValue=value;
    }
    attributes.put(attributeName,oValue);
  }
  memberAttributeConfigBuilder.addPropertyValue("attributes",attributes);
  configBuilder.addPropertyValue("memberAttributeConfig",beanDefinition);
}
