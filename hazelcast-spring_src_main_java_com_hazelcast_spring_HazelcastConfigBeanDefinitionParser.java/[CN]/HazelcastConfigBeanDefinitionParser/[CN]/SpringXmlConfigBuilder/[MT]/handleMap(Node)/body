{
  BeanDefinitionBuilder mapConfigBuilder=createBeanBuilder(MapConfig.class);
  final AbstractBeanDefinition beanDefinition=mapConfigBuilder.getBeanDefinition();
  final Node attName=node.getAttributes().getNamedItem("name");
  final String name=getTextContent(attName);
  mapConfigBuilder.addPropertyValue("name",name);
  fillAttributeValues(node,mapConfigBuilder,"maxSize","maxSizePolicy");
  final BeanDefinitionBuilder maxSizeConfigBuilder=createBeanBuilder(MaxSizeConfig.class);
  final AbstractBeanDefinition maxSizeConfigBeanDefinition=maxSizeConfigBuilder.getBeanDefinition();
  mapConfigBuilder.addPropertyValue("maxSizeConfig",maxSizeConfigBeanDefinition);
  final Node maxSizeNode=node.getAttributes().getNamedItem("max-size");
  if (maxSizeNode != null) {
    maxSizeConfigBuilder.addPropertyValue("size",getTextContent(maxSizeNode));
  }
  final Node maxSizePolicyNode=node.getAttributes().getNamedItem("max-size-policy");
  if (maxSizePolicyNode != null) {
    maxSizeConfigBuilder.addPropertyValue(xmlToJavaName(cleanNodeName(maxSizePolicyNode)),MaxSizeConfig.MaxSizePolicy.valueOf(getTextContent(maxSizePolicyNode)));
  }
  for (  Node childNode : new IterableNodeList(node.getChildNodes(),Node.ELEMENT_NODE)) {
    final String nodeName=cleanNodeName(childNode.getNodeName());
    if ("map-store".equals(nodeName)) {
      handleMapStoreConfig(childNode,mapConfigBuilder);
    }
 else     if ("near-cache".equals(nodeName)) {
      handleNearCacheConfig(childNode,mapConfigBuilder);
    }
 else     if ("wan-replication-ref".equals(nodeName)) {
      handleWanReplicationRef(mapConfigBuilder,childNode);
    }
 else     if ("indexes".equals(nodeName)) {
      ManagedList indexes=new ManagedList();
      for (      Node indexNode : new IterableNodeList(childNode.getChildNodes(),Node.ELEMENT_NODE)) {
        final BeanDefinitionBuilder indexConfBuilder=createBeanBuilder(MapIndexConfig.class);
        fillAttributeValues(indexNode,indexConfBuilder);
        indexes.add(indexConfBuilder.getBeanDefinition());
      }
      mapConfigBuilder.addPropertyValue("mapIndexConfigs",indexes);
    }
 else     if ("attributes".equals(nodeName)) {
      ManagedList attributes=new ManagedList();
      for (      Node attributeNode : new IterableNodeList(childNode.getChildNodes(),Node.ELEMENT_NODE)) {
        final BeanDefinitionBuilder attributeConfBuilder=createBeanBuilder(MapAttributeConfig.class);
        fillAttributeValues(attributeNode,attributeConfBuilder);
        attributes.add(attributeConfBuilder.getBeanDefinition());
      }
      mapConfigBuilder.addPropertyValue("mapAttributeConfigs",attributes);
    }
 else     if ("entry-listeners".equals(nodeName)) {
      ManagedList listeners=parseListeners(childNode,EntryListenerConfig.class);
      mapConfigBuilder.addPropertyValue("entryListenerConfigs",listeners);
    }
 else     if ("quorum-ref".equals(nodeName)) {
      mapConfigBuilder.addPropertyValue("quorumName",getTextContent(node));
    }
 else     if ("query-caches".equals(nodeName)) {
      ManagedList queryCaches=getQueryCaches(childNode);
      mapConfigBuilder.addPropertyValue("queryCacheConfigs",queryCaches);
    }
 else     if ("partition-lost-listeners".endsWith(nodeName)) {
      ManagedList listeners=parseListeners(childNode,MapPartitionLostListenerConfig.class);
      mapConfigBuilder.addPropertyValue("partitionLostListenerConfigs",listeners);
    }
  }
  mapConfigManagedMap.put(name,beanDefinition);
}
