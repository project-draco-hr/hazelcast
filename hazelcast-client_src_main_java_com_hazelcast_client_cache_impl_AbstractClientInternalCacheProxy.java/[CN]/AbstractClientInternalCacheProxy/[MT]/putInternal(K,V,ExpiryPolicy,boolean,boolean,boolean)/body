{
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  final Data expiryPolicyData=toData(expiryPolicy);
  final int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  ClientDelegatingFuture delegatingFuture=new ClientDelegatingFuture(future,clientContext.getSerializationService(),putResponseDecoder);
  if (!async) {
    try {
      Object response=delegatingFuture.get();
      if (nearCache != null) {
        if (cacheOnUpdate) {
          storeInNearCache(keyData,valueData,value);
        }
 else {
          invalidateNearCache(keyData);
        }
      }
      if (statisticsEnabled) {
        handleStatisticsOnPut(isGet,start,response);
      }
      return response;
    }
 catch (    Throwable e) {
      throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
 else {
    if (nearCache != null || statisticsEnabled) {
      delegatingFuture.andThen(new ExecutionCallback<Object>(){
        @Override public void onResponse(        Object responseData){
          if (nearCache != null) {
            if (cacheOnUpdate) {
              storeInNearCache(keyData,valueData,value);
            }
 else {
              invalidateNearCache(keyData);
            }
          }
          if (statisticsEnabled) {
            handleStatisticsOnPut(isGet,start,responseData);
          }
        }
        @Override public void onFailure(        Throwable t){
        }
      }
);
    }
    return delegatingFuture;
  }
}
