{
  final long start=System.nanoTime();
  ensureOpen();
  if (hasOldValue) {
    validateNotNull(key,oldValue);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,oldValue);
  }
 else {
    validateNotNull(key);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key);
  }
  final Data keyData=toData(key);
  final Data oldValueData=oldValue != null ? toData(oldValue) : null;
  ClientRequest request;
  InMemoryFormat inMemoryFormat=cacheConfig.getInMemoryFormat();
  if (isGet) {
    request=new CacheGetAndRemoveRequest(nameWithPrefix,keyData,inMemoryFormat);
  }
 else {
    request=new CacheRemoveRequest(nameWithPrefix,keyData,oldValueData,inMemoryFormat);
  }
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,withCompletionEvent);
    invalidateNearCache(keyData);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  DelegatingFuture delegatingFuture=new DelegatingFuture<T>(future,clientContext.getSerializationService());
  if (async && statisticsEnabled) {
    delegatingFuture.andThen(new ExecutionCallback<Object>(){
      public void onResponse(      Object responseData){
        Object response=clientContext.getSerializationService().toObject(responseData);
        handleStatisticsOnRemove(isGet,start,response);
      }
      public void onFailure(      Throwable t){
      }
    }
);
  }
  return delegatingFuture;
}
