{
  final long start=System.nanoTime();
  final Set<Data> keysData;
  keysData=new HashSet<Data>();
  for (  K key : keys) {
    keysData.add(toData(key));
  }
  final int partitionCount=clientContext.getPartitionService().getPartitionCount();
  final int completionId=nextCompletionId();
  registerCompletionLatch(completionId,partitionCount);
  ClientMessage request=CacheRemoveAllKeysCodec.encodeRequest(nameWithPrefix,keysData,completionId);
  try {
    invoke(request);
    waitCompletionLatch(completionId,null);
    if (statisticsEnabled) {
      statistics.increaseCacheRemovals(keysData.size());
      statistics.addRemoveTimeNanos(System.nanoTime() - start);
    }
  }
 catch (  Throwable t) {
    deregisterCompletionLatch(completionId);
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}
