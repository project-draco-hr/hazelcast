{
  for (int i=0; i < 2; i++) {
    map.executeOnEntries(getSlowEntryProcessor(3));
  }
  SlowEntryProcessorChild entryProcessorChild=new SlowEntryProcessorChild(3);
  map.executeOnEntries(entryProcessorChild);
  map.executeOnEntries(getSlowEntryProcessor(4));
  awaitSlowEntryProcessors();
  entryProcessorChild.await();
  logger.finest(getOperationStats(instance).toString());
  JsonArray slowOperationLogsJsonArray=getSlowOperationLogsJsonArray(instance);
  JsonObject firstLogJsonObject=slowOperationLogsJsonArray.get(0).asObject();
  JsonObject secondLogJsonObject=slowOperationLogsJsonArray.get(1).asObject();
  assertJSONContainsClassNameJustOnce(firstLogJsonObject,secondLogJsonObject,"SlowEntryProcessor");
  assertJSONContainsClassNameJustOnce(firstLogJsonObject,secondLogJsonObject,"SlowEntryProcessorChild");
  int firstSize=firstLogJsonObject.get("invocations").asArray().size();
  int secondSize=secondLogJsonObject.get("invocations").asArray().size();
  assertTrue(format("Expected to find 1 and 3 invocations in logs, but was %d and %d",firstSize,secondSize),(firstSize == 1 ^ secondSize == 1) && (firstSize == 3 ^ secondSize == 3));
}
