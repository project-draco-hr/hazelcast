{
  final Collection<String> possibleMembers=getMembers();
  final Set<Address> possibleAddresses=new HashSet<Address>();
  final NetworkConfig networkConfig=config.getNetworkConfig();
  for (  String possibleMember : possibleMembers) {
    AddressHolder addressHolder=AddressUtil.getAddressHolder(possibleMember);
    try {
      boolean portIsDefined=addressHolder.getPort() != -1 || !networkConfig.isPortAutoIncrement();
      int count=portIsDefined ? 1 : maxPortTryCount;
      int port=addressHolder.getPort() != -1 ? addressHolder.getPort() : networkConfig.getPort();
      AddressMatcher addressMatcher=null;
      try {
        addressMatcher=AddressUtil.getAddressMatcher(addressHolder.getAddress());
      }
 catch (      InvalidAddressException ignore) {
        EmptyStatement.ignore(ignore);
      }
      if (addressMatcher != null) {
        final Collection<String> matchedAddresses;
        if (addressMatcher.isIPv4()) {
          matchedAddresses=AddressUtil.getMatchingIpv4Addresses(addressMatcher);
        }
 else {
          matchedAddresses=Collections.singleton(addressHolder.getAddress());
        }
        for (        String matchedAddress : matchedAddresses) {
          addPossibleAddresses(possibleAddresses,null,InetAddress.getByName(matchedAddress),port,count);
        }
      }
 else {
        final String host=addressHolder.getAddress();
        final InterfacesConfig interfaces=networkConfig.getInterfaces();
        if (interfaces.isEnabled()) {
          final InetAddress[] inetAddresses=InetAddress.getAllByName(host);
          for (          InetAddress inetAddress : inetAddresses) {
            if (AddressUtil.matchAnyInterface(inetAddress.getHostAddress(),interfaces.getInterfaces())) {
              addPossibleAddresses(possibleAddresses,host,inetAddress,port,count);
            }
          }
        }
 else {
          addPossibleAddresses(possibleAddresses,host,null,port,count);
        }
      }
    }
 catch (    UnknownHostException e) {
      logger.warning("Cannot resolve hostname '" + addressHolder.getAddress() + "'. Please make sure host is valid and reachable.");
      if (logger.isFineEnabled()) {
        logger.log(Level.FINE,"Error during resolving possible target!",e);
      }
    }
  }
  possibleAddresses.remove(node.getThisAddress());
  return possibleAddresses;
}
