{
  try {
    blacklistedAddresses.clear();
    Collection<Address> possibleAddresses=getPossibleAddresses();
    boolean foundConnection=tryInitialConnection(possibleAddresses);
    if (!foundConnection) {
      logger.fine("This node will assume master role since no possible member where connected to.");
      node.setAsMaster();
      return;
    }
    long maxJoinMillis=getMaxJoinMillis();
    long startTime=Clock.currentTimeMillis();
    while (node.isRunning() && !node.joined() && (Clock.currentTimeMillis() - startTime < maxJoinMillis)) {
      tryToJoinPossibleAddresses(possibleAddresses);
      if (node.joined()) {
        return;
      }
      if (isAllBlacklisted(possibleAddresses)) {
        logger.fine("This node will assume master role since none of the possible members accepted join request.");
        node.setAsMaster();
        return;
      }
      boolean masterCandidate=isThisNodeMasterCandidate(possibleAddresses);
      if (masterCandidate) {
        boolean consensus=claimMastership(possibleAddresses);
        if (consensus) {
          if (logger.isFineEnabled()) {
            Set<Address> votingEndpoints=new HashSet<Address>(possibleAddresses);
            votingEndpoints.removeAll(blacklistedAddresses.keySet());
            logger.fine("Setting myself as master after consensus!" + " Voting endpoints: " + votingEndpoints);
          }
          node.setAsMaster();
          claimingMaster=false;
          return;
        }
      }
 else {
        if (logger.isFineEnabled()) {
          logger.fine("Cannot claim myself as master! Will try to connect a possible master...");
        }
      }
      claimingMaster=false;
      lookForMaster(possibleAddresses);
    }
  }
 catch (  Throwable t) {
    logger.severe(t);
  }
}
