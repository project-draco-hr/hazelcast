{
  List<HazelcastInstance> instanceList=buildInstances(3,25701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  final HazelcastInstance[] instances=new HazelcastInstance[]{h1,h2,h3};
  final AtomicBoolean doingWork=new AtomicBoolean(true);
  Thread[] workThreads=new Thread[instances.length];
  for (int i=0; i < instances.length; i++) {
    final int threadNum=i;
    workThreads[threadNum]=new Thread(new Runnable(){
      public void run(){
        while (doingWork.get()) {
          final HazelcastInstance hz=instances[threadNum];
          Set<Member> members=new HashSet<Member>(hz.getCluster().getMembers());
          members.remove(hz.getCluster().getLocalMember());
          final Map<Member,Future<String>> futures=hz.getExecutorService("test").submitToMembers(new PingCallable(),members);
          for (          Future<String> f : futures.values()) {
            try {
              f.get();
            }
 catch (            MemberLeftException ignored) {
            }
catch (            Exception e) {
              e.printStackTrace();
            }
          }
          sleepSeconds(2);
        }
      }
    }
);
    workThreads[threadNum].start();
  }
  final Node n3=TestUtil.getNode(h3);
  n3.clusterService.removeAddress(h1.getCluster().getLocalMember().getAddress(),null);
  sleepSeconds(30);
  doingWork.set(false);
  for (  Thread t : workThreads) {
    t.join();
  }
  assertClusterSize(3,h1);
  assertClusterSize(3,h2);
  assertClusterSize(3,h3);
}
