{
  List<HazelcastInstance> instanceList=buildInstances(5,55701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  final HazelcastInstance h4=instanceList.get(3);
  final HazelcastInstance h5=instanceList.get(4);
  assertEquals(5,h1.getCluster().getMembers().size());
  assertEquals(5,h2.getCluster().getMembers().size());
  assertEquals(5,h3.getCluster().getMembers().size());
  assertEquals(5,h4.getCluster().getMembers().size());
  assertEquals(5,h5.getCluster().getMembers().size());
  Thread.sleep(15 * 1000);
  Member master=h1.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  h1.shutdown();
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  master=h2.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  Thread.sleep(10 * 1000);
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
}
