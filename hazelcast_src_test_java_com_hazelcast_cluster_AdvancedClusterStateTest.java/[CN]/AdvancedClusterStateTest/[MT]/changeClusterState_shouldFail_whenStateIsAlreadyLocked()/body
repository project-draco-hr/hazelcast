{
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  HazelcastInstance[] instances=factory.newInstances();
  final HazelcastInstance hz=instances[instances.length - 1];
  final ClusterServiceImpl clusterService=spyClusterService(hz);
  final CountDownLatch stateLockedLatch=new CountDownLatch(1);
  final CountDownLatch transactionPauseLatch=new CountDownLatch(1);
  MemberListAnswer memberListAnswer=new MemberListAnswer(){
    @Override Collection<MemberImpl> onAnswer(    Collection<MemberImpl> members) throws Exception {
      if (clusterService.getClusterState() == ClusterState.IN_TRANSITION) {
        stateLockedLatch.countDown();
        transactionPauseLatch.await(1,TimeUnit.MINUTES);
      }
      return members;
    }
  }
;
  memberListAnswer.cluster=clusterService;
  when(clusterService.getMemberImpls()).thenAnswer(memberListAnswer);
  Thread stateThread=new Thread(){
    public void run(){
      hz.getCluster().changeClusterState(ClusterState.PASSIVE);
    }
  }
;
  stateThread.start();
  assertOpenEventually(stateLockedLatch);
  final HazelcastInstance hz2=instances[instances.length - 2];
  try {
    hz2.getCluster().changeClusterState(ClusterState.PASSIVE);
    fail("Cluster state change should fail, because state is already locked!");
  }
  finally {
    transactionPauseLatch.countDown();
    stateThread.join();
  }
}
