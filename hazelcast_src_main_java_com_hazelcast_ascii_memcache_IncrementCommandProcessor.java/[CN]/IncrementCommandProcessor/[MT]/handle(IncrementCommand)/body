{
  String key=null;
  try {
    key=URLDecoder.decode(incrementCommand.getKey(),"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    throw new HazelcastException(e);
  }
  String mapName=DefaultMapName;
  int index=key.indexOf(':');
  if (index != -1) {
    mapName=MapNamePreceder + key.substring(0,index);
    key=key.substring(index + 1);
  }
  try {
    textCommandService.lock(mapName,key);
  }
 catch (  Exception e) {
    incrementCommand.setResponse(NOT_FOUND);
    if (incrementCommand.shouldReply()) {
      textCommandService.sendResponse(incrementCommand);
    }
    return;
  }
  Object value=textCommandService.get(mapName,key);
  MemcacheEntry entry=null;
  if (value != null) {
    if (value instanceof MemcacheEntry) {
      entry=(MemcacheEntry)value;
    }
 else     if (value instanceof byte[]) {
      entry=new MemcacheEntry(incrementCommand.getKey(),(byte[])value,0);
    }
 else     if (value instanceof String) {
      entry=new MemcacheEntry(incrementCommand.getKey(),((String)value).getBytes(),0);
    }
 else {
      try {
        entry=new MemcacheEntry(incrementCommand.getKey(),textCommandService.toByteArray(value),0);
      }
 catch (      Exception e) {
        throw ExceptionUtil.rethrow(e);
      }
    }
    final byte[] value1=entry.getValue();
    final long current=(value1 == null || value1.length == 0) ? 0 : byteArrayToLong(value1);
    long result=-1;
    if (incrementCommand.getType() == TextCommandType.INCREMENT) {
      result=current + incrementCommand.getValue();
      result=0 > result ? Long.MAX_VALUE : result;
      textCommandService.incrementIncHitCount();
    }
 else     if (incrementCommand.getType() == TextCommandType.DECREMENT) {
      result=current - incrementCommand.getValue();
      result=0 > result ? 0 : result;
      textCommandService.incrementDecrHitCount();
    }
    incrementCommand.setResponse(ByteUtil.concatenate(String.valueOf(result).getBytes(),RETURN));
    MemcacheEntry newValue=new MemcacheEntry(key,longToByteArray(result),entry.getFlag());
    textCommandService.put(mapName,key,newValue);
  }
 else {
    if (incrementCommand.getType() == TextCommandType.INCREMENT)     textCommandService.incrementIncMissCount();
 else     textCommandService.incrementDecrMissCount();
    incrementCommand.setResponse(NOT_FOUND);
  }
  textCommandService.unlock(mapName,key);
  if (incrementCommand.shouldReply()) {
    textCommandService.sendResponse(incrementCommand);
  }
}
