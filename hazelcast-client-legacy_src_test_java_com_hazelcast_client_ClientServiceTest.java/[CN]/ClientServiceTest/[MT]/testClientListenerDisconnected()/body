{
  Config config=new Config();
  config.setProperty(GroupProperty.IO_THREAD_COUNT,"1");
  final HazelcastInstance hz=hazelcastFactory.newHazelcastInstance(config);
  final HazelcastInstance hz2=hazelcastFactory.newHazelcastInstance(config);
  int clientCount=10;
  ClientDisconnectedListenerLatch listenerLatch=new ClientDisconnectedListenerLatch(2 * clientCount);
  hz.getClientService().addClientListener(listenerLatch);
  hz2.getClientService().addClientListener(listenerLatch);
  Collection<HazelcastInstance> clients=new LinkedList<HazelcastInstance>();
  for (int i=0; i < clientCount; i++) {
    HazelcastInstance client=hazelcastFactory.newHazelcastClient();
    IMap<Object,Object> map=client.getMap(randomMapName());
    map.addEntryListener(new EntryAdapter<Object,Object>(),true);
    map.put(generateKeyOwnedBy(hz),"value");
    map.put(generateKeyOwnedBy(hz2),"value");
    clients.add(client);
  }
  ExecutorService ex=Executors.newFixedThreadPool(4);
  try {
    for (    final HazelcastInstance client : clients) {
      ex.execute(new Runnable(){
        @Override public void run(){
          client.shutdown();
        }
      }
);
    }
    assertOpenEventually(listenerLatch,30);
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(0,hz.getClientService().getConnectedClients().size());
      }
    }
,10);
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(0,hz2.getClientService().getConnectedClients().size());
      }
    }
,10);
  }
  finally {
    ex.shutdown();
  }
}
