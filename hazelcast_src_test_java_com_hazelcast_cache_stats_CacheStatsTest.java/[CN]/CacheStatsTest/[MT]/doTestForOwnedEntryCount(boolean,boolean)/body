{
  final String cacheName=randomName();
  ICache<Integer,String> cache;
  CacheStatistics[] allStats;
  HazelcastInstance instance2=null;
  if (useBackups) {
    instance2=getHazelcastInstance();
    CachingProvider cp=getCachingProvider(instance2);
    CacheManager cm=cp.getCacheManager();
    cache=createCache(cacheName);
    ICache<Integer,String> c=cm.getCache(cacheName).unwrap(ICache.class);
    allStats=new CacheStatistics[]{cache.getLocalCacheStatistics(),c.getLocalCacheStatistics()};
  }
 else {
    cache=createCache(cacheName);
    allStats=new CacheStatistics[]{cache.getLocalCacheStatistics()};
  }
  final int ENTRY_COUNT=100;
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,"Value-" + i);
  }
  assertOwnedEntryCount(ENTRY_COUNT,allStats);
  if (triggerMigration && instance2 != null) {
    instance2.shutdown();
    allStats=new CacheStatistics[]{cache.getLocalCacheStatistics()};
    assertOwnedEntryCount(ENTRY_COUNT,allStats);
  }
  for (int i=0; i < 10; i++) {
    cache.remove(i);
  }
  assertOwnedEntryCount(ENTRY_COUNT - 10,allStats);
  for (int i=10; i < ENTRY_COUNT; i++) {
    cache.remove(i);
  }
  assertOwnedEntryCount(0,allStats);
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,"Value-" + i);
  }
  assertOwnedEntryCount(ENTRY_COUNT,allStats);
  if (triggerMigration) {
    instance2=getHazelcastInstance();
    CachingProvider cp=getCachingProvider(instance2);
    CacheManager cm=cp.getCacheManager();
    ICache<Integer,String> c=cm.getCache(cacheName).unwrap(ICache.class);
    allStats=new CacheStatistics[]{cache.getLocalCacheStatistics(),c.getLocalCacheStatistics()};
    assertOwnedEntryCount(ENTRY_COUNT,allStats);
  }
  cache.clear();
  assertOwnedEntryCount(0,allStats);
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,"Value-" + i);
  }
  assertOwnedEntryCount(ENTRY_COUNT,allStats);
  cache.destroy();
  assertOwnedEntryCount(0,allStats);
}
