{
  final Config config=new XmlConfigBuilder().build();
  config.setProperty("hazelcast.logging.type","log4j");
  config.setProperty("hazelcast.jmx","false");
  MapConfig mapConfig=config.getMapConfig(MAP_NAME);
  final CountDownLatch halfOfKeysAreLoaded=new CountDownLatch(1);
  final InMemoryMapStore store=new InMemoryMapStore(halfOfKeysAreLoaded,MS_PER_LOAD,false);
  store.preload(PRELOAD_SIZE);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setEnabled(true);
  mapStoreConfig.setInitialLoadMode(InitialLoadMode.LAZY);
  mapStoreConfig.setWriteDelaySeconds(WRITE_DELAY_SECONDS);
  mapStoreConfig.setClassName(null);
  mapStoreConfig.setImplementation(store);
  mapConfig.setMapStoreConfig(mapStoreConfig);
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  final CountDownLatch node1Started=new CountDownLatch(1);
  final CountDownLatch node1FinishedLoading=new CountDownLatch(1);
  Thread thread1=new Thread(new Runnable(){
    @Override public void run(){
      HazelcastInstance hcInstance=factory.newHazelcastInstance(config);
      node1Started.countDown();
      try {
        IMap<String,String> map=hcInstance.getMap(MAP_NAME);
        map.size();
        node1FinishedLoading.countDown();
      }
  finally {
        thread1Shutdown.set(System.currentTimeMillis());
        hcInstance.getLifecycleService().shutdown();
      }
    }
  }
,"Thread 1");
  thread1.start();
  node1Started.await();
  Thread thread2=new Thread(new Runnable(){
    @Override public void run(){
      HazelcastInstance hcInstance=factory.newHazelcastInstance(config);
      try {
        hcInstance.getMap(MAP_NAME);
        final int loadTimeMillis=MS_PER_LOAD * PRELOAD_SIZE;
        node1FinishedLoading.await(loadTimeMillis,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException e) {
        EmptyStatement.ignore(e);
      }
 finally {
        thread2Shutdown.set(System.currentTimeMillis());
        hcInstance.getLifecycleService().shutdown();
      }
    }
  }
,"Thread 2");
  thread2.start();
  thread1.join();
  thread2.join();
  if (thread1Shutdown.get() > thread2Shutdown.get()) {
    fail("Thread 2 was shutdown before thread 1.");
  }
}
