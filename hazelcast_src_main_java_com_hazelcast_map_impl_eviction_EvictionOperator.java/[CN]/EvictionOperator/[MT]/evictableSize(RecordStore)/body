{
  int currentPartitionSize=recordStore.size();
  MapConfig mapConfig=recordStore.getMapContainer().getMapConfig();
  final int maxSize=mapConfig.getMaxSizeConfig().getSize();
  int evictableSize;
  final MaxSizeConfig.MaxSizePolicy maxSizePolicy=mapConfig.getMaxSizeConfig().getMaxSizePolicy();
  final int evictionPercentage=mapConfig.getEvictionPercentage();
switch (maxSizePolicy) {
case PER_PARTITION:
    int targetSizePerPartition=Double.valueOf(maxSize * ((ONE_HUNDRED_PERCENT - evictionPercentage) / (1D * ONE_HUNDRED_PERCENT))).intValue();
  int diffFromTargetSize=currentPartitionSize - targetSizePerPartition;
int prunedSize=currentPartitionSize * evictionPercentage / ONE_HUNDRED_PERCENT + 1;
evictableSize=Math.max(diffFromTargetSize,prunedSize);
break;
case PER_NODE:
double maxExpectedRecordStoreSize=maxSizeChecker.calculatePerNodeMaxRecordStoreSize(recordStore);
int expectedSizeAfterEviction=(int)(maxExpectedRecordStoreSize * (ONE_HUNDRED_PERCENT - evictionPercentage) / ONE_HUNDRED_PERCENT);
expectedSizeAfterEviction=Math.max(expectedSizeAfterEviction,1);
evictableSize=currentPartitionSize - expectedSizeAfterEviction;
break;
case USED_HEAP_PERCENTAGE:
case USED_HEAP_SIZE:
case FREE_HEAP_PERCENTAGE:
case FREE_HEAP_SIZE:
evictableSize=Math.max(currentPartitionSize * evictionPercentage / ONE_HUNDRED_PERCENT,1);
break;
default :
throw new IllegalArgumentException("Max size policy is not defined [" + maxSizePolicy + "]");
}
return evictableSize;
}
