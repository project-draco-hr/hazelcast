{
  List<FutureTask> lsFutureTasks=new LinkedList<FutureTask>();
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return imap.get(1);
    }
    @Override public String toString(){
      return "m.get";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return imap.put(1,"value1");
    }
    @Override public String toString(){
      return "m.put";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return imap.evict(1);
    }
    @Override public String toString(){
      return "m.evict";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return imap.remove(1);
    }
    @Override public String toString(){
      return "m.remove";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return imap.getMapEntry(1);
    }
    @Override public String toString(){
      return "m.getMapEntry";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return imap.containsKey(1);
    }
    @Override public String toString(){
      return "m.containsKey";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return imap.getAsync(1).get();
    }
    @Override public String toString(){
      return "m.getAsync";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return imap.putIfAbsent(1,"valuePutIfAbsent");
    }
    @Override public String toString(){
      return "m.putIfAbsent";
    }
  }
);
  addRunnable(esSingle,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      imap.lock(1);
      return Boolean.TRUE;
    }
    @Override public String toString(){
      return "m.lock";
    }
  }
);
  addRunnable(esSingle,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      imap.unlock(1);
      return Boolean.TRUE;
    }
    @Override public String toString(){
      return "m.unlock";
    }
  }
);
  return lsFutureTasks;
}
