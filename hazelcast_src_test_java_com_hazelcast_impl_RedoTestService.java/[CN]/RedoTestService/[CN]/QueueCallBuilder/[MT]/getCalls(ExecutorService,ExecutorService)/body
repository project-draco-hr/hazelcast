{
  List<FutureTask> lsFutureTasks=new LinkedList<FutureTask>();
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return q.offer(1);
    }
    @Override public String toString(){
      return "q.offer";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return q.offer(1);
    }
    @Override public String toString(){
      return "q.offer";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return q.offer(1);
    }
    @Override public String toString(){
      return "q.offer";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return q.poll();
    }
    @Override public String toString(){
      return "q.poll";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return q.poll(20,TimeUnit.SECONDS);
    }
    @Override public String toString(){
      return "q.poll with timeout";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return q.take();
    }
    @Override public String toString(){
      return "q.take";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return q.peek();
    }
    @Override public String toString(){
      return "q.peek";
    }
  }
);
  addRunnable(es,lsFutureTasks,new Callable(){
    public Object call() throws Exception {
      return q.size();
    }
    @Override public String toString(){
      return "q.size";
    }
  }
);
  return lsFutureTasks;
}
