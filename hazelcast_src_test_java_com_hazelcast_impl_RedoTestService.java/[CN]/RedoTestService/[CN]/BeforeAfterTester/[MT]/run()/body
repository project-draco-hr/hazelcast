{
  try {
    behavior.before();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  List<FutureTask> lsFutureTasks=callBuilder.getCalls(es,esSingle);
  long wait=3;
  for (  FutureTask futureTask : lsFutureTasks) {
    try {
      Object result=futureTask.get(wait,TimeUnit.SECONDS);
      fail("Expected: TimeoutException, got " + result + ", callTask: "+ futureTask);
    }
 catch (    TimeoutException e) {
    }
catch (    Exception e) {
      fail();
      return;
    }
    wait=0;
  }
  behavior.after();
  for (  FutureTask futureTask : lsFutureTasks) {
    try {
      futureTask.get(5,TimeUnit.SECONDS);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Failed callTask: " + futureTask);
    }
  }
  behavior.destroy();
  destroy();
}
