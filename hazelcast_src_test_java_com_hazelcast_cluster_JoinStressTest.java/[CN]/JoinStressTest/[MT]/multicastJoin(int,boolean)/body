{
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(count);
  final Config config=new Config();
  config.setProperty("hazelcast.wait.seconds.before.join","5");
  config.getNetworkConfig().getJoin().getMulticastConfig().setMulticastTimeoutSeconds(25);
  final ConcurrentMap<Integer,HazelcastInstance> map=new ConcurrentHashMap<Integer,HazelcastInstance>();
  final CountDownLatch latch=new CountDownLatch(count);
  final ExecutorService ex=Executors.newCachedThreadPool();
  for (int i=0; i < count; i++) {
    final int index=i;
    ex.execute(new Runnable(){
      public void run(){
        if (sleep) {
          try {
            Thread.sleep((int)(1000 * Math.random()));
          }
 catch (          InterruptedException ignored) {
          }
        }
        HazelcastInstance h=nodeFactory.newHazelcastInstance(config);
        map.put(index,h);
        latch.countDown();
      }
    }
);
  }
  assertOpenEventually(latch);
  for (  HazelcastInstance h : map.values()) {
    assertEquals(count,h.getCluster().getMembers().size());
  }
  ex.shutdown();
}
