{
  final BufferObjectDataOutput out=receiveOutput;
  try {
    out.reset();
    inflater.reset();
    try {
      multicastSocket.receive(datagramPacketReceive);
    }
 catch (    IOException ignore) {
      return null;
    }
    try {
      inflater.setInput(datagramPacketReceive.getData(),datagramPacketReceive.getOffset(),datagramPacketReceive.getLength());
      final int count=inflater.inflate(out.getBuffer());
      out.position(count);
      ObjectDataInput input=node.serializationService.createObjectDataInput(out.toByteArray());
      final byte packetVersion=input.readByte();
      if (packetVersion != Packet.PACKET_VERSION) {
        logger.log(Level.WARNING,"Received a JoinRequest with different packet version: " + packetVersion);
        return null;
      }
      JoinInfo joinInfo=new JoinInfo();
      joinInfo.readData(input);
      return joinInfo;
    }
 catch (    Exception e) {
      if (e instanceof EOFException || e instanceof DataFormatException) {
        logger.log(Level.WARNING,"Received data format is invalid." + " (An old version of Hazelcast may be running here.)",e);
      }
 else {
        throw e;
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return null;
}
