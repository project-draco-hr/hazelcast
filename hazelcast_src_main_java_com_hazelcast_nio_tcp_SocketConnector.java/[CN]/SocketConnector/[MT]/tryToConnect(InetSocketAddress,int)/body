{
  final SocketChannel socketChannel=SocketChannel.open();
  connectionManager.initSocket(socketChannel.socket());
  if (connectionManager.ioService.isSocketBind()) {
    bindSocket(socketChannel);
  }
  final Level level=silent ? Level.FINEST : Level.INFO;
  if (logger.isLoggable(level)) {
    final String message="Connecting to " + socketAddress + ", timeout: "+ timeout+ ", bind-any: "+ connectionManager.ioService.isSocketBindAny();
    log(level,message);
  }
  try {
    socketChannel.configureBlocking(true);
    connectSocketChannel(socketAddress,timeout,socketChannel);
    if (logger.isFinestEnabled()) {
      log(Level.FINEST,"Successfully connected to: " + address + " using socket "+ socketChannel.socket());
    }
    final SocketChannelWrapper socketChannelWrapper=connectionManager.wrapSocketChannel(socketChannel,true);
    connectionManager.interceptSocket(socketChannel.socket(),false);
    socketChannelWrapper.configureBlocking(false);
    TcpIpConnection connection=connectionManager.assignSocketChannel(socketChannelWrapper);
    connection.getWriteHandler().setProtocol(Protocols.CLUSTER);
    connectionManager.sendBindRequest(connection,address,true);
  }
 catch (  Exception e) {
    closeSocket(socketChannel);
    log(level,"Could not connect to: " + socketAddress + ". Reason: "+ e.getClass().getSimpleName()+ "["+ e.getMessage()+ "]");
    throw e;
  }
}
