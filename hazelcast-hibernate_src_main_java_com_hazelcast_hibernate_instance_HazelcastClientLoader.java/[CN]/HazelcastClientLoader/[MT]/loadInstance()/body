{
  if (props == null) {
    throw new NullPointerException("Hibernate environment properties is null!");
  }
  if (client != null && client.getLifecycleService().isRunning()) {
    logger.log(Level.WARNING,"Current HazelcastClient is already active! Shutting it down...");
    unloadInstance();
  }
  String address=PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_ADDRESS,props,null);
  if (address == null) {
    String[] hosts=PropertiesHelper.toStringArray(CacheEnvironment.NATIVE_CLIENT_HOSTS,",",props);
    if (hosts != null && hosts.length > 0) {
      address=hosts[0];
      logger.log(Level.WARNING,"Hibernate property '" + CacheEnvironment.NATIVE_CLIENT_HOSTS + "' "+ "is deprecated, use '"+ CacheEnvironment.NATIVE_CLIENT_ADDRESS+ "' instead!");
    }
  }
  String group=PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_GROUP,props,null);
  String pass=PropertiesHelper.getString(CacheEnvironment.NATIVE_CLIENT_PASSWORD,props,null);
  if (address == null || group == null || pass == null) {
    throw new CacheException("Configuration properties " + CacheEnvironment.NATIVE_CLIENT_ADDRESS + ", "+ CacheEnvironment.NATIVE_CLIENT_GROUP+ " and "+ CacheEnvironment.NATIVE_CLIENT_PASSWORD+ " are mandatory to use native client!");
  }
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setGroupConfig(new GroupConfig(group,pass)).addAddress(address);
  clientConfig.setUpdateAutomatic(true);
  return (client=HazelcastClient.newHazelcastClient(clientConfig));
}
