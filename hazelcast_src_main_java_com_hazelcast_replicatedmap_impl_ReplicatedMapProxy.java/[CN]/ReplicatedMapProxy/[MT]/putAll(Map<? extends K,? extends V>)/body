{
  checkNotNull(entries,"entries cannot be null");
  int mapSize=entries.size();
  if (mapSize == 0) {
    return;
  }
  int partitionCount=partitionService.getPartitionCount();
  int initialSize=getPutAllInitialSize(mapSize,partitionCount);
  try {
    List<Future> futures=new ArrayList<Future>(partitionCount);
    ReplicatedMapEntries[] entrySetPerPartition=new ReplicatedMapEntries[partitionCount];
    for (    Entry entry : entries.entrySet()) {
      isNotNull(entry.getKey(),"key must not be null!");
      isNotNull(entry.getValue(),"value must not be null!");
      int partitionId=partitionService.getPartitionId(entry.getKey());
      ReplicatedMapEntries mapEntries=entrySetPerPartition[partitionId];
      if (mapEntries == null) {
        mapEntries=new ReplicatedMapEntries(initialSize);
        entrySetPerPartition[partitionId]=mapEntries;
      }
      Data keyData=serializationService.toData(entry.getKey());
      Data valueData=serializationService.toData(entry.getValue());
      mapEntries.add(keyData,valueData);
    }
    for (int partitionId=0; partitionId < partitionCount; partitionId++) {
      ReplicatedMapEntries entrySet=entrySetPerPartition[partitionId];
      if (entrySet != null) {
        Future future=createPutAllOperationFuture(name,entrySet,partitionId);
        futures.add(future);
      }
    }
    for (    Future future : futures) {
      future.get();
    }
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}
