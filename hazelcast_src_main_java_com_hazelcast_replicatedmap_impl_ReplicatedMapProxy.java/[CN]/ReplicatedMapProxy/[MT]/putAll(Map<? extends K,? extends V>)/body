{
  checkNotNull(entries,"entries cannot be null");
  int partitionCount=partitionService.getPartitionCount();
  try {
    List<Future> futures=new ArrayList<Future>(partitionCount);
    ReplicatedMapEntries[] entrySetPerPartition=new ReplicatedMapEntries[partitionCount];
    for (    Entry entry : entries.entrySet()) {
      isNotNull(entry.getKey(),"key must not be null!");
      isNotNull(entry.getValue(),"value must not be null!");
      int partitionId=partitionService.getPartitionId(entry.getKey());
      ReplicatedMapEntries entrySet=entrySetPerPartition[partitionId];
      if (entrySet == null) {
        entrySet=new ReplicatedMapEntries();
        entrySetPerPartition[partitionId]=entrySet;
      }
      Data keyData=serializationService.toData(entry.getKey());
      Data valueData=serializationService.toData(entry.getValue());
      entrySet.add(new AbstractMap.SimpleImmutableEntry<Data,Data>(keyData,valueData));
    }
    for (int partitionId=0; partitionId < partitionCount; partitionId++) {
      ReplicatedMapEntries entrySet=entrySetPerPartition[partitionId];
      if (entrySet != null) {
        Future f=createPutAllOperationFuture(name,entrySet,partitionId);
        futures.add(f);
      }
    }
    for (    Future future : futures) {
      future.get();
    }
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}
