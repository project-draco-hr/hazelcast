{
  if (instance != null && instance.getLifecycleService().isRunning()) {
    logger.log(Level.WARNING,"Current HazelcastInstance is already loaded and running! " + "Returning current instance...");
    return instance;
  }
  String configResourcePath=null;
  if (props != null) {
    instanceName=CacheEnvironment.getInstanceName(props);
    useLiteMember=CacheEnvironment.isLiteMember(props);
    if (!useLiteMember && props.contains(CacheEnvironment.USE_SUPER_CLIENT)) {
      useLiteMember=CacheEnvironment.isSuperClient(props);
      logger.log(Level.WARNING,"'" + CacheEnvironment.USE_SUPER_CLIENT + "' property is deprecated!"+ " Please use '"+ CacheEnvironment.USE_LITE_MEMBER+ "' instead...");
    }
    configResourcePath=CacheEnvironment.getConfigFilePath(props);
  }
  if (useLiteMember) {
    logger.log(Level.WARNING,"Creating Hazelcast node as Lite-Member. " + "Be sure this node has access to an already running cluster...");
  }
  if (isEmpty(configResourcePath)) {
    if (!useLiteMember && instanceName == null) {
      staticInstance=true;
    }
  }
 else {
    try {
      config=ConfigLoader.load(configResourcePath);
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,"IOException: " + e.getMessage());
    }
    if (config == null) {
      throw new CacheException("Could not find configuration file: " + configResourcePath);
    }
  }
  if (instanceName != null) {
    instance=Hazelcast.getHazelcastInstanceByName(instanceName);
    if (instance == null) {
      try {
        createOrGetInstance();
      }
 catch (      DuplicateInstanceNameException ignored) {
        instance=Hazelcast.getHazelcastInstanceByName(instanceName);
      }
    }
  }
 else {
    createOrGetInstance();
  }
  return instance;
}
