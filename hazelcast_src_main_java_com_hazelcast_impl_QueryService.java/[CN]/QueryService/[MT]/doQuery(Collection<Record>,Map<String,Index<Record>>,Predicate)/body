{
  Collection<Record> records=null;
  boolean strong=false;
  if (predicate != null && predicate instanceof IndexAwarePredicate) {
    List<IndexedPredicate> lsIndexPredicates=new ArrayList<IndexedPredicate>();
    IndexAwarePredicate iap=(IndexAwarePredicate)predicate;
    iap.collectIndexedPredicates(lsIndexPredicates);
    for (    IndexedPredicate indexedPredicate : lsIndexPredicates) {
      Index<Record> index=namedIndexes.get(indexedPredicate.getIndexName());
      if (index != null) {
        Collection<Record> sub;
        if (!(indexedPredicate instanceof RangedPredicate)) {
          sub=index.getRecords(getLongValue(indexedPredicate.getValue()));
        }
 else {
          RangedPredicate rangedPredicate=(RangedPredicate)indexedPredicate;
          RangedPredicate.RangeType type=rangedPredicate.getRangeType();
          if (rangedPredicate.getRangeType() == RangedPredicate.RangeType.BETWEEN) {
            sub=index.getSubRecords(getLongValue(rangedPredicate.getFrom()),getLongValue(rangedPredicate.getTo()));
          }
 else {
            boolean equal=(type == LESS_EQUAL || type == GREATER_EQUAL);
            if (type == LESS || type == LESS_EQUAL) {
              sub=index.getSubRecords(equal,true,getLongValue(indexedPredicate.getValue()));
            }
 else {
              sub=index.getSubRecords(equal,false,getLongValue(indexedPredicate.getValue()));
            }
          }
        }
        if (sub != null) {
          logger.log(Level.FINEST,node.getName() + " index sub.size " + sub.size());
          System.out.println(node.getName() + " index sub.size " + sub.size());
        }
        if (records == null) {
          records=sub;
        }
 else {
          Iterator itCurrentEntries=records.iterator();
          while (itCurrentEntries.hasNext()) {
            if (!sub.contains(itCurrentEntries.next())) {
              itCurrentEntries.remove();
            }
          }
          System.out.println(node.getName() + " after join " + records.size());
        }
      }
    }
  }
  if (records == null) {
    records=allRecords;
  }
  return records;
}
