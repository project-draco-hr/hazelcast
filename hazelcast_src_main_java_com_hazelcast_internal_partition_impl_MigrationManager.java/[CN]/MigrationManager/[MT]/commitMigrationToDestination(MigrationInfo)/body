{
  if (!node.isMaster()) {
    return false;
  }
  if (node.getThisAddress().equals(migrationInfo.getDestination())) {
    final boolean result=node.isRunning();
    if (logger.isFinestEnabled()) {
      logger.finest("Shortcutting migration commit with result: " + result + " since destination is master: "+ migrationInfo);
    }
    return result;
  }
  try {
    if (logger.isFinestEnabled()) {
      logger.finest("Sending commit operation for: " + migrationInfo);
    }
    PartitionRuntimeState partitionState=partitionService.createMigrationCommitPartitionState(migrationInfo);
    MigrationCommitOperation operation=new MigrationCommitOperation(partitionState,migrationInfo);
    Future<Boolean> future=nodeEngine.getOperationService().createInvocationBuilder(SERVICE_NAME,operation,migrationInfo.getDestination()).setTryCount(Integer.MAX_VALUE).setCallTimeout(Long.MAX_VALUE).invoke();
    final Boolean result=future.get();
    if (logger.isFinestEnabled()) {
      logger.finest("Migration commit result: " + result + " for migration : "+ migrationInfo);
    }
    return result;
  }
 catch (  Throwable t) {
    if (t instanceof MemberLeftException || t instanceof TargetNotMemberException) {
      logger.warning("Migration commit failed for " + migrationInfo + " since destination left the cluster");
    }
 else {
      logger.severe("Migration commit failed for " + migrationInfo,t);
    }
    return false;
  }
}
