{
  migrationInfo.setStatus(MigrationStatus.SUCCESS);
  internalMigrationListener.onMigrationComplete(MigrationParticipant.MASTER,migrationInfo,true);
  addCompletedMigration(migrationInfo);
  boolean commitSuccessful=commitMigrationToDestination(migrationInfo);
  partitionServiceLock.lock();
  try {
    if (commitSuccessful) {
      internalMigrationListener.onMigrationCommit(MigrationParticipant.MASTER,migrationInfo);
      InternalPartitionImpl partition=partitionStateManager.getPartitionImpl(migrationInfo.getPartitionId());
      partition.setReplicaAddress(migrationInfo.getReplicaIndex(),migrationInfo.getDestination());
      if (migrationInfo.getKeepReplicaIndex() > -1) {
        partition.setReplicaAddress(migrationInfo.getKeepReplicaIndex(),migrationInfo.getSource());
      }
    }
 else {
      internalMigrationListener.onMigrationRollback(MigrationParticipant.MASTER,migrationInfo);
    }
    scheduleActiveMigrationFinalization(migrationInfo);
    partitionService.syncPartitionRuntimeState();
  }
  finally {
    partitionServiceLock.unlock();
  }
  partitionService.getPartitionEventManager().sendMigrationEvent(migrationInfo,MigrationEvent.MigrationStatus.COMPLETED);
}
