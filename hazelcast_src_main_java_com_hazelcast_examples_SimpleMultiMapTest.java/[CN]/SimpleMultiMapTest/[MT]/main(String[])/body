{
  boolean load=init(args);
  ExecutorService es=Executors.newFixedThreadPool(THREAD_COUNT);
  final MultiMap<String,byte[]> map=instance.getMultiMap("default");
  final AtomicInteger gets=new AtomicInteger(0);
  final AtomicInteger puts=new AtomicInteger(0);
  final AtomicInteger removes=new AtomicInteger(0);
  load(load,es,map);
  for (int i=0; i < THREAD_COUNT; i++) {
    es.execute(new Runnable(){
      public void run(){
        while (true) {
          int key=(int)(Math.random() * ENTRY_COUNT);
          int operation=((int)(Math.random() * 100));
          if (operation < GET_PERCENTAGE) {
            map.get(String.valueOf(key));
            gets.incrementAndGet();
          }
 else           if (operation < GET_PERCENTAGE + PUT_PERCENTAGE) {
            map.put(String.valueOf(key),new byte[VALUE_SIZE]);
            puts.incrementAndGet();
          }
 else {
            map.remove(String.valueOf(key));
            removes.incrementAndGet();
          }
        }
      }
    }
);
  }
  Executors.newSingleThreadExecutor().execute(new Runnable(){
    public void run(){
      while (true) {
        try {
          Thread.sleep(STATS_SECONDS * 1000);
          logger.info("cluster size:" + instance.getCluster().getMembers().size());
          int putCount=puts.getAndSet(0);
          int getCount=gets.getAndSet(0);
          int removeCount=removes.getAndSet(0);
          logger.info("TOTAL:" + (removeCount + putCount + getCount) / STATS_SECONDS);
          logger.info("PUTS:" + putCount / STATS_SECONDS);
          logger.info("GEtS:" + getCount / STATS_SECONDS);
          logger.info("REMOVES:" + removeCount / STATS_SECONDS);
        }
 catch (        InterruptedException ignored) {
          return;
        }
      }
    }
  }
);
}
