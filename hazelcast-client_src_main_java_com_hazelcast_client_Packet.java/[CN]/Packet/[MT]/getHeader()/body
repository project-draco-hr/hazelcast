{
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(bos);
  dos.writeByte(operation.getValue());
  dos.writeInt(blockId);
  dos.writeInt(threadId);
  byte booleans=0;
  if (lockCount != 0) {
    booleans=ByteUtil.setTrue(booleans,0);
  }
  if (timeout != -1) {
    booleans=ByteUtil.setTrue(booleans,1);
  }
  if (ttl != -1) {
    booleans=ByteUtil.setTrue(booleans,2);
  }
  if (txnId != -1) {
    booleans=ByteUtil.setTrue(booleans,3);
  }
  if (longValue != Long.MIN_VALUE) {
    booleans=ByteUtil.setTrue(booleans,4);
  }
  if (version != -1) {
    booleans=ByteUtil.setTrue(booleans,5);
  }
  booleans=ByteUtil.setTrue(booleans,6);
  booleans=ByteUtil.setTrue(booleans,7);
  dos.writeByte(booleans);
  if (lockCount != 0) {
    dos.writeInt(lockCount);
  }
  if (timeout != -1) {
    dos.writeLong(timeout);
  }
  if (ttl != -1) {
    dos.writeLong(ttl);
  }
  if (txnId != -1) {
    dos.writeLong(txnId);
  }
  if (longValue != Long.MIN_VALUE) {
    dos.writeLong(longValue);
  }
  if (version != -1) {
    dos.writeLong(version);
  }
  dos.writeLong(callId);
  dos.writeByte(responseType);
  int nameLen=0;
  byte[] nameInBytes=null;
  if (name != null) {
    nameInBytes=name.getBytes();
    nameLen=nameInBytes.length;
  }
  dos.writeInt(nameLen);
  if (nameLen > 0) {
    dos.write(nameInBytes);
  }
  dos.writeByte(indexCount);
  for (int i=0; i < indexCount; i++) {
    dos.writeLong(indexes[i]);
    dos.writeByte(indexTypes[i]);
  }
  return bos.toByteArray();
}
