{
  writeHeaderBuffer.clear();
  writeHeaderBuffer.put(operation.getValue());
  writeHeaderBuffer.putInt(blockId);
  writeHeaderBuffer.putInt(threadId);
  byte booleans=0;
  if (lockCount != 0) {
    booleans=ByteUtil.setTrue(booleans,0);
  }
  if (timeout != -1) {
    booleans=ByteUtil.setTrue(booleans,1);
  }
  if (ttl != -1) {
    booleans=ByteUtil.setTrue(booleans,2);
  }
  if (txnId != -1) {
    booleans=ByteUtil.setTrue(booleans,3);
  }
  if (longValue != Long.MIN_VALUE) {
    booleans=ByteUtil.setTrue(booleans,4);
  }
  if (version != -1) {
    booleans=ByteUtil.setTrue(booleans,5);
  }
  booleans=ByteUtil.setTrue(booleans,6);
  booleans=ByteUtil.setTrue(booleans,7);
  writeHeaderBuffer.put(booleans);
  if (lockCount != 0) {
    writeHeaderBuffer.putInt(lockCount);
  }
  if (timeout != -1) {
    writeHeaderBuffer.putLong(timeout);
  }
  if (ttl != -1) {
    writeHeaderBuffer.putLong(ttl);
  }
  if (txnId != -1) {
    writeHeaderBuffer.putLong(txnId);
  }
  if (longValue != Long.MIN_VALUE) {
    writeHeaderBuffer.putLong(longValue);
  }
  if (version != -1) {
    writeHeaderBuffer.putLong(version);
  }
  writeHeaderBuffer.putLong(callId);
  writeHeaderBuffer.put(responseType);
  int nameLen=0;
  byte[] nameInBytes=null;
  if (name != null) {
    nameInBytes=name.getBytes();
    nameLen=nameInBytes.length;
  }
  writeHeaderBuffer.putInt(nameLen);
  if (nameLen > 0) {
    writeHeaderBuffer.put(nameInBytes);
  }
  writeHeaderBuffer.put(indexCount);
  for (int i=0; i < indexCount; i++) {
    writeHeaderBuffer.putLong(indexes[i]);
    writeHeaderBuffer.put(indexTypes[i]);
  }
  return writeHeaderBuffer;
}
