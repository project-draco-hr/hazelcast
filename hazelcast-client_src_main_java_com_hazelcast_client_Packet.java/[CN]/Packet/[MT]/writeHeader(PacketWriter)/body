{
  final ByteBuffer writeHeaderBuffer=packetWriter.writeHeaderBuffer;
  final Map<String,byte[]> nameCache=packetWriter.nameCache;
  writeHeaderBuffer.putShort(operation.getValue());
  writeHeaderBuffer.putInt(-1);
  writeHeaderBuffer.putInt(threadId);
  byte booleans=0;
  if (timeout != -1) {
    booleans=ByteUtil.setTrue(booleans,1);
  }
  if (ttl != -1) {
    booleans=ByteUtil.setTrue(booleans,2);
  }
  if (longValue != Long.MIN_VALUE) {
    booleans=ByteUtil.setTrue(booleans,4);
  }
  booleans=ByteUtil.setTrue(booleans,6);
  booleans=ByteUtil.setTrue(booleans,7);
  writeHeaderBuffer.put(booleans);
  if (timeout != -1) {
    writeHeaderBuffer.putLong(timeout);
  }
  if (ttl != -1) {
    writeHeaderBuffer.putLong(ttl);
  }
  if (longValue != Long.MIN_VALUE) {
    writeHeaderBuffer.putLong(longValue);
  }
  writeHeaderBuffer.putLong(callId);
  writeHeaderBuffer.put(responseType);
  int nameLen=0;
  byte[] nameInBytes=null;
  if (name != null) {
    nameInBytes=nameCache.get(name);
    if (nameInBytes == null) {
      nameInBytes=name.getBytes();
      if (nameCache.size() > 10000) {
        nameCache.clear();
      }
      nameCache.put(name,nameInBytes);
    }
    nameLen=nameInBytes.length;
  }
  writeHeaderBuffer.putInt(nameLen);
  if (nameLen > 0) {
    writeHeaderBuffer.put(nameInBytes);
  }
  writeHeaderBuffer.put((byte)0);
  writeHeaderBuffer.putInt(keyHash);
  writeHeaderBuffer.putInt(valueHash);
  writeHeaderBuffer.put((byte)0);
}
