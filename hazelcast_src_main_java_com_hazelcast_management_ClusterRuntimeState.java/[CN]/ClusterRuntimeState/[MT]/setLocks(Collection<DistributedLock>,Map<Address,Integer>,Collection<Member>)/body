{
  Map<String,Address> uuidToAddress=new HashMap<String,Address>(members.size());
  for (  Member member : members) {
    uuidToAddress.put(member.getUuid(),((MemberImpl)member).getAddress());
  }
  for (  DistributedLock distributedLock : distributedLocks) {
    if (distributedLock.isLocked()) {
      Integer index=addressIndexes.get(uuidToAddress.get(distributedLock.getOwner()));
      if (index == null) {
        index=-1;
      }
      lockInfos.add(new LockInfo(distributedLock.getOwner(),String.valueOf(distributedLock.getKey()),distributedLock.getAcquireTime(),index,distributedLock.getLockCount()));
    }
  }
  lockTotalNum=lockInfos.size();
  Collections.sort(lockInfos,new Comparator<LockInfo>(){
    public int compare(    LockInfo o1,    LockInfo o2){
      int comp1=Integer.valueOf(o2.getWaitingThreadCount()).compareTo(Integer.valueOf(o1.getWaitingThreadCount()));
      if (comp1 == 0)       return Long.valueOf(o1.getAcquireTime()).compareTo(Long.valueOf(o2.getAcquireTime()));
 else       return comp1;
    }
  }
);
  lockInfos=lockInfos.subList(0,Math.min(LOCK_MAX_SIZE,lockInfos.size()));
}
