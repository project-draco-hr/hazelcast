{
  log("starting");
  final IMap map=getInstance(0).getMap("testMapSize");
  final int putSize=10 * 1000;
  final CountDownLatch latch=new CountDownLatch(2);
  new Thread(){
    public void run(){
      for (int i=0; i < putSize; i++) {
        map.put("key" + i,"value" + i);
      }
      latch.countDown();
    }
  }
.start();
  final AtomicInteger removed=new AtomicInteger();
  new Thread(){
    public void run(){
      for (int i=0; i < putSize * 100; i++) {
        Random ran=new Random(System.currentTimeMillis());
        Object o=map.remove("key" + ran.nextInt(putSize));
        if (o != null) {
          removed.incrementAndGet();
        }
      }
      latch.countDown();
    }
  }
.start();
  Thread.sleep(500);
  for (int i=0; i < 4; i++) {
    log("remove instance");
    removeInstance(2);
    Thread.sleep(2000);
    log("new instance");
    newInstance();
    Thread.sleep(2000);
    boolean done=latch.await(100,TimeUnit.MILLISECONDS);
    if (done) {
      log("done i: " + i);
    }
  }
  assertTrue(latch.await(200,TimeUnit.SECONDS));
  assertEquals(putSize - removed.get(),map.size());
  log("size: " + (putSize - removed.get()));
}
