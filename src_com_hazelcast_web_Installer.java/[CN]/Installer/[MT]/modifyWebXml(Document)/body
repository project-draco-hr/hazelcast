{
  final Element docElement=doc.getDocumentElement();
  final NodeList nodelist=docElement.getChildNodes();
  final List<String> lsListeners=new ArrayList<String>();
  Node firstFilter=null;
  Node displayElement=null;
  Node afterDisplayElement=null;
  final int sessionTimeoutDefault=-23490375;
  int sessionTimeout=sessionTimeoutDefault;
  for (int i=0; i < nodelist.getLength(); i++) {
    final Node node=nodelist.item(i);
    final String name=node.getNodeName();
    if ("display-name".equals(name)) {
      displayElement=node;
    }
 else {
      if ("listener".equals(name)) {
        String className=null;
        final NodeList nl=node.getChildNodes();
        for (int a=0; a < nl.getLength(); a++) {
          final Node n=nl.item(a);
          if (n.getNodeName().equals("listener-class")) {
            className=n.getTextContent();
          }
        }
        lsListeners.add(className);
        docElement.removeChild(node);
      }
 else       if ("filter".equals(name)) {
        if (firstFilter == null) {
          firstFilter=node;
        }
      }
 else       if ("servlet".equals(name)) {
        final NodeList nl=node.getChildNodes();
        for (int a=0; a < nl.getLength(); a++) {
          final Node n=nl.item(a);
          if (n.getNodeName().equals("servlet-class")) {
            final String className=n.getTextContent();
            final String wrapperClass="com.hazelcast.web.ServletWrapper";
            final String hazelParam="*hazelcast-base-servlet-class";
            n.setTextContent(wrapperClass);
            Node initParam=null;
            initParam=append(doc,node,"init-param",null);
            append(doc,initParam,"param-name",hazelParam);
            append(doc,initParam,"param-value",className);
            node.appendChild(initParam);
          }
        }
      }
 else       if ("session-config".equals(name)) {
        final NodeList nl=node.getChildNodes();
        for (int a=0; a < nl.getLength(); a++) {
          final Node n=nl.item(a);
          if (n.getNodeName().equals("session-timeout")) {
            try {
              sessionTimeout=Integer.parseInt(n.getTextContent().trim());
            }
 catch (            final Exception e) {
              e.printStackTrace();
            }
          }
        }
      }
      if (displayElement != null && afterDisplayElement == null) {
        afterDisplayElement=node;
      }
    }
  }
  final Element filter=doc.createElement("filter");
  append(doc,filter,"filter-name","hazel-filter");
  append(doc,filter,"filter-class","com.hazelcast.web.WebFilter");
  Node initParam=append(doc,filter,"init-param",null);
  append(doc,initParam,"param-name","listener-count");
  append(doc,initParam,"param-value",String.valueOf(lsListeners.size()));
  initParam=append(doc,filter,"init-param",null);
  append(doc,initParam,"param-name","apps-sharing-sessions");
  append(doc,initParam,"param-value",String.valueOf(appsSharingSessions));
  if (sessionTimeout != sessionTimeoutDefault) {
    initParam=append(doc,filter,"init-param",null);
    append(doc,initParam,"param-name","session-timeout");
    append(doc,initParam,"param-value","" + sessionTimeout);
  }
  int counter=0;
  for (  final String listener : lsListeners) {
    initParam=append(doc,filter,"init-param",null);
    append(doc,initParam,"param-name","listener" + counter++);
    append(doc,initParam,"param-value",listener);
  }
  Node first=firstFilter;
  if (first == null) {
    if (afterDisplayElement != null) {
      first=afterDisplayElement;
    }
  }
  if (first == null) {
    first=docElement.getFirstChild();
  }
  docElement.insertBefore(filter,first);
  final Element filterMapping=doc.createElement("filter-mapping");
  append(doc,filterMapping,"filter-name","hazel-filter");
  append(doc,filterMapping,"url-pattern","/*");
  final Element contextListener=doc.createElement("listener");
  append(doc,contextListener,"listener-class","com.hazelcast.web.WebFilter$ContextListener");
  docElement.insertBefore(filterMapping,after(docElement,"filter"));
  docElement.insertBefore(contextListener,after(docElement,"filter-mapping"));
  return doc;
}
