{
  updateMemberGroupsSize();
  final Address deadAddress=member.getAddress();
  final Address thisAddress=node.getThisAddress();
  if (deadAddress == null || deadAddress.equals(thisAddress)) {
    return;
  }
  lock.lock();
  try {
    clearMigrationQueue();
    if (!activeMigrations.isEmpty()) {
      if (node.isMaster()) {
        rollbackActiveMigrationsFromPreviousMaster(node.getLocalMember().getUuid());
      }
      for (      MigrationInfo migrationInfo : activeMigrations.values()) {
        if (deadAddress.equals(migrationInfo.getSource()) || deadAddress.equals(migrationInfo.getDestination())) {
          migrationInfo.invalidate();
        }
      }
    }
    pauseMigration();
    for (    PartitionImpl partition : partitions) {
      while (partition.onDeadAddress(deadAddress))       ;
    }
    if (node.isMaster()) {
      migrationQueue.offer(new RepartitioningTask());
    }
    long migrationActivationDelay=node.groupProperties.CONNECTION_MONITOR_INTERVAL.getLong() * node.groupProperties.CONNECTION_MONITOR_MAX_FAULTS.getInteger() * 5;
    long callTimeout=node.groupProperties.OPERATION_CALL_TIMEOUT_MILLIS.getLong();
    migrationActivationDelay=Math.min(migrationActivationDelay,callTimeout / 2);
    migrationActivationDelay=Math.max(migrationActivationDelay,1000L);
    nodeEngine.getExecutionService().schedule(new Runnable(){
      public void run(){
        resumeMigration();
      }
    }
,migrationActivationDelay,TimeUnit.MILLISECONDS);
  }
  finally {
    lock.unlock();
  }
}
