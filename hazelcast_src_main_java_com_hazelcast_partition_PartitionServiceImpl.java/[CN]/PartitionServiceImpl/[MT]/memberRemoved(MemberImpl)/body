{
  final Address deadAddress=member.getAddress();
  final Address thisAddress=node.getThisAddress();
  if (deadAddress == null || deadAddress.equals(thisAddress)) {
    return;
  }
  clearMigrationQueue();
  lock.lock();
  try {
    if (!activeMigrations.isEmpty()) {
      if (node.isMaster()) {
        rollbackActiveMigrationsFromPreviousMaster(node.getLocalMember().getUuid());
      }
      for (      MigrationInfo migrationInfo : activeMigrations.values()) {
        if (deadAddress.equals(migrationInfo.getSource()) || deadAddress.equals(migrationInfo.getDestination())) {
          migrationInfo.invalidate();
        }
      }
    }
    final boolean migrationStatus=migrationActive.getAndSet(false);
    for (    PartitionInfo partition : partitions) {
      while (partition.onDeadAddress(deadAddress))       ;
    }
    migrationQueue.offer(new PrepareRepartitioningTask());
    final long waitBeforeMigrationActivate=node.groupProperties.CONNECTION_MONITOR_INTERVAL.getLong() * node.groupProperties.CONNECTION_MONITOR_MAX_FAULTS.getInteger() * 10;
    nodeEngine.getExecutionService().schedule(new Runnable(){
      public void run(){
        migrationActive.compareAndSet(false,migrationStatus);
      }
    }
,waitBeforeMigrationActivate,TimeUnit.MILLISECONDS);
  }
  finally {
    lock.unlock();
  }
}
