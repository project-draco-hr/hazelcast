{
  if (activeMigrations.containsKey(migrationInfo.getPartitionId())) {
    lock.lock();
    try {
      if (activeMigrations.containsValue(migrationInfo)) {
        if (migrationInfo.startProcessing()) {
          try {
            final Address thisAddress=node.getThisAddress();
            final boolean source=thisAddress.equals(migrationInfo.getSource());
            final boolean destination=thisAddress.equals(migrationInfo.getDestination());
            if (source || destination) {
              final int partitionId=migrationInfo.getPartitionId();
              final PartitionImpl migratingPartition=getPartitionImpl(partitionId);
              final Address ownerAddress=migratingPartition.getOwner();
              final boolean success=migrationInfo.getDestination().equals(ownerAddress);
              final MigrationEndpoint endpoint=source ? MigrationEndpoint.SOURCE : MigrationEndpoint.DESTINATION;
              final FinalizeMigrationOperation op=new FinalizeMigrationOperation(endpoint,success);
              op.setPartitionId(partitionId).setNodeEngine(nodeEngine).setValidateTarget(false).setService(this);
              nodeEngine.getOperationService().executeOperation(op);
            }
          }
 catch (          Exception e) {
            logger.warning(e);
          }
 finally {
            migrationInfo.doneProcessing();
          }
        }
 else {
          logger.info("Scheduling finalization of " + migrationInfo + ", because migration process is currently running.");
          nodeEngine.getExecutionService().schedule(new Runnable(){
            public void run(){
              finalizeActiveMigration(migrationInfo);
            }
          }
,3,TimeUnit.SECONDS);
        }
      }
    }
  finally {
      lock.unlock();
    }
  }
}
