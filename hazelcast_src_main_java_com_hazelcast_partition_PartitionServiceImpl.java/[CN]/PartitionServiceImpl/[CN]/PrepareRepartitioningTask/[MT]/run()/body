{
  if (node.isMaster() && node.isActive()) {
    final PartitionStateGenerator psg=partitionStateGenerator;
    final List<MigrationInfo> migrationQ=new ArrayList<MigrationInfo>();
    final Set<Member> members=node.getClusterService().getMembers();
    final Set<Integer> migratingPartitions=new HashSet<Integer>(migrationQ.size());
    final Map<Integer,BackupMigrationTask> backupTasks=new HashMap<Integer,BackupMigrationTask>();
    int lostCount=0;
    lock.lock();
    try {
      if (!initialized) {
        return;
      }
      final PartitionImpl[] newState=psg.reArrange(partitions,memberGroupFactory.createMemberGroups(members),partitionCount,migrationQ);
      for (      MigrationInfo info : migrationQ) {
        migratingPartitions.add(info.getPartitionId());
      }
      for (      final PartitionImpl newPartition : newState) {
        final int partitionId=newPartition.getPartitionId();
        final PartitionImpl currentPartition=partitions[partitionId];
        if (currentPartition.getOwner() == null) {
          lostCount++;
          final Address owner=newPartition.getOwner();
          currentPartition.setOwner(owner);
          MigrationInfo migrationInfo=new MigrationInfo(partitionId,null,owner);
          sendMigrationEvent(migrationInfo,MigrationStatus.STARTED);
          sendMigrationEvent(migrationInfo,MigrationStatus.COMPLETED);
        }
        if (migratingPartitions.contains(partitionId)) {
          backupTasks.put(partitionId,new BackupMigrationTask(partitionId,newPartition));
        }
 else {
          currentPartition.setPartitionInfo(newPartition);
        }
      }
      sendPartitionRuntimeState();
    }
  finally {
      lock.unlock();
    }
    if (lostCount > 0) {
      logger.log(Level.WARNING,"Assigning new owners for " + lostCount + " LOST partitions!");
    }
    lastRepartitionTime.set(Clock.currentTimeMillis());
    if (!migrationQ.isEmpty()) {
      logger.log(Level.INFO,"Re-partitioning cluster data... Migration queue size: " + migrationQ.size());
      for (      MigrationInfo migrationInfo : migrationQ) {
        final Migrator migrator=new Migrator(migrationInfo,backupTasks.get(migrationInfo.getPartitionId()));
        migrationQueue.offer(migrator);
      }
      migrationQ.clear();
    }
 else {
      logger.log(Level.INFO,"Partition balance is ok, no need to re-partition cluster data... ");
    }
  }
}
