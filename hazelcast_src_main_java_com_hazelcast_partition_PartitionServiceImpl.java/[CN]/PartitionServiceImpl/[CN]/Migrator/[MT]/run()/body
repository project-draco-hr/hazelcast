{
  if (!node.isActive() || !node.isMaster()) {
    return;
  }
  final MigrationRequestOperation migrationRequestOp=new MigrationRequestOperation(migrationInfo);
  try {
    MigrationInfo info=migrationInfo;
    PartitionImpl partition=partitions[info.getPartitionId()];
    if (!partition.getOwner().equals(info.getSource())) {
      logger.severe("ERROR: partition owner is not the source of migration! -> " + partition + " -VS- "+ info);
    }
    sendMigrationEvent(migrationInfo,MigrationStatus.STARTED);
    Boolean result=Boolean.FALSE;
    MemberImpl fromMember=getMember(migrationInfo.getSource());
    logger.finest("Started Migration : " + migrationInfo);
    systemLogService.logPartition("Started Migration : " + migrationInfo);
    if (fromMember != null) {
      Invocation inv=nodeEngine.getOperationService().createInvocationBuilder(SERVICE_NAME,migrationRequestOp,migrationInfo.getSource()).setTryPauseMillis(1000).build();
      Future future=inv.invoke();
      try {
        result=(Boolean)nodeEngine.toObject(future.get(partitionMigrationTimeout,TimeUnit.SECONDS));
      }
 catch (      Throwable e) {
        final Level level=node.isActive() && migrationInfo.isValid() ? Level.WARNING : Level.FINEST;
        logger.log(level,"Failed migrating from " + fromMember,e);
      }
    }
 else {
      logger.warning("Partition is lost! Assign new owner and exit...");
      result=Boolean.TRUE;
    }
    if (Boolean.TRUE.equals(result)) {
      logger.finest("Finished Migration: " + migrationInfo);
      systemLogService.logPartition("Finished Migration: " + migrationInfo);
      processMigrationResult();
    }
 else {
      final Level level=migrationInfo.isValid() ? Level.WARNING : Level.FINEST;
      logger.log(level,"Migration failed: " + migrationInfo);
      migrationTaskFailed();
    }
  }
 catch (  Throwable t) {
    final Level level=migrationInfo.isValid() ? Level.WARNING : Level.FINEST;
    logger.log(level,"Error [" + t.getClass() + ": "+ t.getMessage()+ "] while executing "+ migrationRequestOp);
    logger.finest(t);
    migrationTaskFailed();
  }
}
