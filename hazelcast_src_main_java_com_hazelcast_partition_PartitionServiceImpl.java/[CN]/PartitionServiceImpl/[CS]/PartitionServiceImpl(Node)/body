{
  this.partitionCount=node.groupProperties.PARTITION_COUNT.getInteger();
  this.node=node;
  this.nodeEngine=node.nodeEngine;
  this.logger=node.getLogger(PartitionService.class);
  this.systemLogService=node.getSystemLogService();
  this.partitions=new PartitionInfo[partitionCount];
  final PartitionListener partitionListener=new LocalPartitionListener(node.getThisAddress());
  for (int i=0; i < partitionCount; i++) {
    this.partitions[i]=new PartitionInfo(i,partitionListener);
  }
  replicaVersions=new PartitionReplicaVersions[partitionCount];
  for (int i=0; i < replicaVersions.length; i++) {
    replicaVersions[i]=new PartitionReplicaVersions(i);
  }
  memberGroupFactory=PartitionStateGeneratorFactory.newMemberGroupFactory(node.getConfig().getPartitionGroupConfig());
  partitionStateGenerator=PartitionStateGeneratorFactory.newCustomPartitionStateGenerator(memberGroupFactory);
  partitionMigrationInterval=node.groupProperties.PARTITION_MIGRATION_INTERVAL.getInteger() * 1000;
  partitionMigrationTimeout=(long)(node.groupProperties.PARTITION_MIGRATION_TIMEOUT.getLong() * 1.5f);
  migrationThread=new MigrationThread(node);
  proxy=new PartitionServiceProxy(this);
  replicaSyncRequests=new ConcurrentHashMap<Integer,ReplicaSyncInfo>(partitionCount);
  nodeEngine.getExecutionService().scheduleWithFixedDelay(new SyncReplicaVersionTask(),30,30,TimeUnit.SECONDS);
}
