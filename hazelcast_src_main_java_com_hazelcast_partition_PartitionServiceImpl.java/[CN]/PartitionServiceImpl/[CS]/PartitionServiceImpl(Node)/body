{
  this.partitionCount=node.groupProperties.PARTITION_COUNT.getInteger();
  this.node=node;
  this.nodeEngine=node.nodeEngine;
  this.logger=node.getLogger(PartitionService.class);
  this.systemLogService=node.getSystemLogService();
  this.partitions=new PartitionInfo[partitionCount];
  final PartitionListener partitionListener=new LocalPartitionListener(node.getThisAddress());
  for (int i=0; i < partitionCount; i++) {
    this.partitions[i]=new PartitionInfo(i,partitionListener);
  }
  partitionVersions=new PartitionVersion[partitionCount];
  for (int i=0; i < partitionVersions.length; i++) {
    partitionVersions[i]=new PartitionVersion(i);
  }
  partitionMigrationInterval=node.groupProperties.PARTITION_MIGRATION_INTERVAL.getInteger() * 1000;
  partitionMigrationTimeout=(long)(node.groupProperties.PARTITION_MIGRATION_TIMEOUT.getLong() * 1.5f);
  migrationManagerThread=new MigrationManagerThread(node);
  migrationExecutor=Executors.newSingleThreadExecutor(new ExecutorThreadFactory(node.threadGroup,node.getConfig().getClassLoader()){
    protected String newThreadName(){
      return node.getThreadNamePrefix("migration-executor");
    }
  }
);
  proxy=new PartitionServiceProxy(this);
  replicaSyncRequests=new ConcurrentHashMap<Integer,ReplicaSyncInfo>(partitionCount);
}
