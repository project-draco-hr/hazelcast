{
  Thread thread=Thread.currentThread();
  ClassLoader tccl=thread.getContextClassLoader();
  try {
    thread.setContextClassLoader(FILTERING_CLASS_LOADER);
    Class<?> configClazz=FILTERING_CLASS_LOADER.loadClass("com.hazelcast.config.Config");
    Object config=configClazz.newInstance();
    Method setClassLoader=configClazz.getDeclaredMethod("setClassLoader",ClassLoader.class);
    setClassLoader.invoke(config,FILTERING_CLASS_LOADER);
    Class<?> hazelcastClazz=FILTERING_CLASS_LOADER.loadClass("com.hazelcast.core.Hazelcast");
    Method newHazelcastInstance=hazelcastClazz.getDeclaredMethod("newHazelcastInstance",configClazz);
    Object hz=newHazelcastInstance.invoke(hazelcastClazz,config);
    Object impl=ORIGINAL.get(hz);
    Object serializationService=GET_SERIALIZATION_SERVICE.invoke(impl);
    ConcurrentMap<Class,?> typeMap=(ConcurrentMap<Class,?>)TYPE_MAP.get(serializationService);
    boolean cacheKeySerializerFound=false;
    boolean cacheEntrySerializerFound=false;
    for (    Class clazz : typeMap.keySet()) {
      if (clazz == CacheKey.class) {
        cacheKeySerializerFound=true;
      }
 else       if (clazz == CacheEntry.class) {
        cacheEntrySerializerFound=true;
      }
    }
    assertFalse("CacheKey serializer found",cacheKeySerializerFound);
    assertFalse("CacheEntry serializer found",cacheEntrySerializerFound);
  }
  finally {
    thread.setContextClassLoader(tccl);
  }
}
