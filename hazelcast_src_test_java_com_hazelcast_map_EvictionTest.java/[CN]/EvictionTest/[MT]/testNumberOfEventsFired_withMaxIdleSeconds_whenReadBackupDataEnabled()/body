{
  final int maxIdleSeconds=1;
  final int numberOfEntriesToBeAdded=1000;
  final AtomicInteger count=new AtomicInteger(0);
  final CountDownLatch evictedEntryLatch=new CountDownLatch(numberOfEntriesToBeAdded);
  IMap<Integer,Integer> map=createMapWithReadBackupDataEnabled(maxIdleSeconds);
  map.addEntryListener(new EntryAdapter<Integer,Integer>(){
    @Override public void entryEvicted(    EntryEvent<Integer,Integer> event){
      evictedEntryLatch.countDown();
      count.incrementAndGet();
    }
  }
,false);
  for (int i=0; i < numberOfEntriesToBeAdded; i++) {
    map.put(i,i);
  }
  sleepSeconds(2);
  for (int i=0; i < numberOfEntriesToBeAdded; i++) {
    map.get(i);
  }
  assertOpenEventually(evictedEntryLatch,600);
  sleepSeconds(10);
  assertEquals(numberOfEntriesToBeAdded,count.get());
}
