{
  final int k=2;
  final int size=100;
  final CountDownLatch latch=new CountDownLatch(k);
  final String mapName="testEvictionSpeedTestPerPartition";
  Config cfg=new Config();
  final MapConfig mc=cfg.getMapConfig(mapName);
  mc.setEvictionPolicy(MapConfig.EvictionPolicy.LRU);
  mc.setEvictionPercentage(25);
  final MaxSizeConfig msc=new MaxSizeConfig();
  msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.PER_PARTITION);
  msc.setSize(size);
  mc.setMaxSizeConfig(msc);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k);
  final HazelcastInstance[] instances=factory.newInstances(cfg);
  final int pnum=instances[0].getPartitionService().getPartitions().size();
  new Thread(){
    final IMap map=instances[0].getMap(mapName);
    public void run(){
      try {
        Thread.sleep(1000);
        while (latch.getCount() != 0) {
          try {
            int msize=map.size();
            assertTrue(msize <= (size * pnum + size * pnum * 10 / 100));
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
.start();
  for (int i=0; i < k; i++) {
    final IMap map=instances[i].getMap(mapName);
    new Thread(){
      public void run(){
        for (int j=0; j < 100000; j++) {
          map.put(k + "-" + j,j);
        }
        latch.countDown();
      }
    }
.start();
  }
  try {
    Assert.assertEquals(latch.await(10,TimeUnit.MINUTES),true);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
