{
  final int k=2;
  final int size=100;
  final CountDownLatch latch=new CountDownLatch(k);
  final String mapName="testEvictionSpeedTestPerPartition";
  Config config=getConfig();
  MapConfig mapConfig=config.getMapConfig(mapName);
  mapConfig.setEvictionPolicy(EvictionPolicy.LRU);
  mapConfig.setEvictionPercentage(25);
  MaxSizeConfig maxSizeConfig=new MaxSizeConfig();
  maxSizeConfig.setMaxSizePolicy(PER_PARTITION);
  maxSizeConfig.setSize(size);
  mapConfig.setMaxSizeConfig(maxSizeConfig);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k);
  final HazelcastInstance[] instances=factory.newInstances(config);
  final int pnum=instances[0].getPartitionService().getPartitions().size();
  final AtomicBoolean error=new AtomicBoolean(false);
  new Thread(){
    final IMap map=instances[0].getMap(mapName);
    public void run(){
      try {
        Thread.sleep(1000);
        while (latch.getCount() != 0) {
          try {
            int msize=map.size();
            if (msize > (size * pnum * 1.2)) {
              error.set(true);
            }
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
.start();
  for (int i=0; i < k; i++) {
    final IMap map=instances[i].getMap(mapName);
    new Thread(){
      public void run(){
        for (int j=0; j < 10000; j++) {
          map.put(k + "-" + j,j);
        }
        latch.countDown();
      }
    }
.start();
  }
  assertOpenEventually(latch);
  assertFalse("map was not evicted properly!",error.get());
}
