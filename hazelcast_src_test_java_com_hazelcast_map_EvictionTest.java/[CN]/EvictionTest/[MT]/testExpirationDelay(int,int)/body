{
  final int nodeCount=2;
  final int maxIdleSeconds=1;
  final String mapName=randomMapName();
  final Config config=newConfigWithExpiration(mapName,maxIdleSeconds);
  config.setProperty(GroupProperties.PROP_MAP_EXPIRY_DELAY_SECONDS,String.valueOf(TimeUnit.HOURS.toSeconds(1)));
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(nodeCount);
  final HazelcastInstance[] instances=factory.newInstances(config);
  final IMap<Integer,Integer> map1=instances[0].getMap(mapName);
  final IMap<Integer,Integer> map2=instances[1].getMap(mapName);
  for (int i=0; i < numberOfItemsToBeAdded; i++) {
    map1.put(i,i);
  }
  sleepSeconds(2);
  for (int i=0; i < numberOfItemsToBeAdded; i++) {
    map1.get(i);
  }
  final long now=Clock.currentTimeMillis();
  waitClusterForSafeState(instances[0]);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      final int nodeEntryCount1=getNodeEntryCount(map1,now);
      final int nodeEntryCount2=getNodeEntryCount(map2,now);
      assertEquals(expectedEntryCountAfterExpiration,nodeEntryCount1 + nodeEntryCount2);
    }
  }
);
}
