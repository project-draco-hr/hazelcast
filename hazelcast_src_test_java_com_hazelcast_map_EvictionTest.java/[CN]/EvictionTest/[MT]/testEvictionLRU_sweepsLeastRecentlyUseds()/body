{
  final int nodeCount=2;
  final int perNodeMaxSize=1000;
  final String mapName=randomMapName();
  Config cfg=new Config();
  cfg.setProperty(GroupProperty.PARTITION_COUNT,"1");
  MapConfig mc=cfg.getMapConfig(mapName);
  mc.setEvictionPolicy(EvictionPolicy.LRU);
  mc.setEvictionPercentage(20);
  mc.setMinEvictionCheckMillis(0L);
  MaxSizeConfig msc=new MaxSizeConfig();
  msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.PER_NODE);
  msc.setSize(perNodeMaxSize);
  mc.setMaxSizeConfig(msc);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(nodeCount);
  final HazelcastInstance[] instances=factory.newInstances(cfg);
  IMap<Object,Object> map=instances[0].getMap(mapName);
  int recentlyUsedEvicted=0;
  for (int i=0; i < perNodeMaxSize / 2; i++) {
    map.put(i,i);
    map.get(i);
  }
  for (int i=perNodeMaxSize / 2; i < 5 * perNodeMaxSize; i++) {
    map.put(i,i);
  }
  for (int i=0; i < perNodeMaxSize / 2; i++) {
    if (map.get(i) == null) {
      recentlyUsedEvicted++;
    }
  }
  assertEquals(0,recentlyUsedEvicted);
}
