{
  try {
    final int k=1;
    final int size=10000;
    final String mapName="testEvictionLFU";
    Config cfg=new Config();
    MapConfig mc=cfg.getMapConfig(mapName);
    mc.setEvictionPolicy(MapConfig.EvictionPolicy.LFU);
    mc.setEvictionPercentage(20);
    MaxSizeConfig msc=new MaxSizeConfig();
    msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.PER_NODE);
    msc.setSize(size);
    mc.setMaxSizeConfig(msc);
    final HazelcastInstance[] instances=StaticNodeFactory.newInstances(cfg,k);
    IMap<Object,Object> map=instances[0].getMap(mapName);
    for (int i=0; i < size / 2; i++) {
      map.put(i,i);
      map.get(i);
    }
    Thread.sleep(1000);
    for (int i=size / 2; i < size; i++) {
      map.put(i,i);
    }
    Thread.sleep(3000);
    System.out.println("size:" + map.size());
    Assert.assertFalse("No eviction!?!?!?",map.size() == size);
    boolean isFrequentlyUsedEvicted=false;
    for (int i=0; i < size / 2; i++) {
      if (map.get(i) == null) {
        isFrequentlyUsedEvicted=true;
        break;
      }
    }
    Assert.assertFalse(isFrequentlyUsedEvicted);
    instances[0].getLifecycleService().shutdown();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}
