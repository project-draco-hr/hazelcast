{
  final String mapName="testEvictionLFU_" + randomString();
  final int instanceCount=1;
  final int size=10000;
  Config cfg=new Config();
  cfg.setProperty(GroupProperties.PROP_PARTITION_COUNT,"1");
  MapConfig mc=cfg.getMapConfig(mapName);
  mc.setEvictionPolicy(EvictionPolicy.LFU);
  mc.setEvictionPercentage(20);
  MaxSizeConfig msc=new MaxSizeConfig();
  msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.PER_NODE);
  msc.setSize(size);
  mc.setMaxSizeConfig(msc);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(instanceCount);
  final HazelcastInstance[] instances=factory.newInstances(cfg);
  final int atLeastShouldEvict=size / 40;
  final CountDownLatch latch=new CountDownLatch(atLeastShouldEvict);
  IMap<Object,Object> map=instances[0].getMap(mapName);
  map.addLocalEntryListener(new EntryAdapter<Object,Object>(){
    @Override public void entryEvicted(    EntryEvent<Object,Object> event){
      latch.countDown();
    }
  }
);
  for (int i=0; i < size / 2; i++) {
    map.put(i,i);
    map.get(i);
  }
  for (int i=size / 2; i < size + 1; i++) {
    map.put(i,i);
  }
  assertOpenEventually(latch,120);
  assertFalse("No eviction!?!?!?",map.size() == size);
  for (int i=0; i < size / 2; i++) {
    assertNotNull(map.get(i));
  }
}
