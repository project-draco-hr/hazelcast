{
  Config cfg=new Config();
  final HazelcastInstance[] instances=createHazelcastInstanceFactory(2).newInstances(cfg);
  warmUpPartitions(instances);
  final int k=10;
  final int putCount=1000;
  final CountDownLatch latch=new CountDownLatch(k * putCount);
  final IMap map=instances[0].getMap("testMapPutTTLWithListener");
  final AtomicBoolean error=new AtomicBoolean(false);
  final Set<Long> times=Collections.newSetFromMap(new ConcurrentHashMap<Long,Boolean>());
  map.addEntryListener(new EntryAdapter(){
    public void entryEvicted(    final EntryEvent event){
      final Long expectedEvictionTime=(Long)(event.getOldValue());
      long timeDifference=System.currentTimeMillis() - expectedEvictionTime;
      if (timeDifference > 5000) {
        error.set(true);
        times.add(timeDifference);
      }
      latch.countDown();
    }
  }
,true);
  for (int i=0; i < k; i++) {
    final int threadId=i;
    int ttl=(int)(Math.random() * 5000 + 3000);
    for (int j=0; j < putCount; j++) {
      final long expectedEvictionTime=ttl + System.currentTimeMillis();
      map.put(j + putCount * threadId,expectedEvictionTime,ttl,TimeUnit.MILLISECONDS);
    }
  }
  assertOpenEventually(latch);
  assertFalse("Some evictions took more than 5 seconds! -> late eviction count:" + times.size(),error.get());
}
