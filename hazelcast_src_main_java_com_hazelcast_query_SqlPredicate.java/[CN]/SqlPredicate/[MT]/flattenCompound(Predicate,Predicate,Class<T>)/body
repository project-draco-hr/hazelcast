{
  Predicate[] subpredicatesLeft;
  Predicate[] subpredicatesRight;
  Predicate[] predicates;
  if (klass.isInstance(predicateLeft)) {
    subpredicatesLeft=((CompoundPredicate)predicateLeft).getPredicates();
    if (predicateRight instanceof CompoundPredicate) {
      subpredicatesRight=((CompoundPredicate)predicateRight).getPredicates();
    }
 else {
      subpredicatesRight=new Predicate[]{predicateRight};
    }
    predicates=new Predicate[subpredicatesLeft.length + subpredicatesRight.length];
    ArrayUtils.concat(subpredicatesLeft,subpredicatesRight,predicates);
  }
 else   if (klass.isInstance(predicateRight)) {
    subpredicatesRight=((CompoundPredicate)predicateRight).getPredicates();
    predicates=new Predicate[subpredicatesRight.length + 1];
    ArrayUtils.concat(new Predicate[]{predicateLeft},subpredicatesRight,predicates);
  }
 else {
    predicates=new Predicate[]{predicateLeft,predicateRight};
  }
  try {
    CompoundPredicate compoundPredicate=klass.newInstance();
    compoundPredicate.setPredicates(predicates);
    return (T)compoundPredicate;
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(String.format("%s should have a public default constructor",klass.getName()));
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(String.format("%s should have a public default constructor",klass.getName()));
  }
}
