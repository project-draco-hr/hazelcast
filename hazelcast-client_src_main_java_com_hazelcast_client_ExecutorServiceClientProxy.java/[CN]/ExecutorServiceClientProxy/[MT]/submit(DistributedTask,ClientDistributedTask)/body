{
  final Packet request=proxyHelper.prepareRequest(ClusterOperation.EXECUTE,cdt,null);
  final InnerFutureTask inner=(InnerFutureTask)dt.getInner();
  final Call call=new Call(ProxyHelper.newCallId(),request){
    public void onDisconnect(    final Member member){
      setResponse(new MemberLeftException(member));
    }
    public void setResponse(    Object response){
      super.setResponse(response);
      if (dt.getExecutionCallback() != null) {
        callBackExecutors.execute(new Runnable(){
          public void run(){
            dt.getExecutionCallback().done(dt);
          }
        }
);
      }
    }
  }
;
  inner.setExecutionManagerCallback(new ExecutionManagerCallback(){
    private volatile boolean cancelled=false;
    public boolean cancel(    boolean mayInterruptIfRunning){
      cancelled=(Boolean)proxyHelper.doOp(ClusterOperation.CANCEL_EXECUTION,call.getId(),mayInterruptIfRunning);
      return cancelled;
    }
    public void get() throws InterruptedException, ExecutionException {
      if (cancelled)       throw new CancellationException();
      try {
        Object response=call.getResponse();
        handle(response);
      }
 catch (      Throwable e) {
        handle(e);
      }
    }
    public void get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException {
      if (cancelled)       throw new CancellationException();
      try {
        Object response=call.getResponse(timeout,unit);
        handle(response);
      }
 catch (      Throwable e) {
        handle(e);
      }
    }
    private void handle(    Object response){
      Object result=response;
      if (response == null) {
        inner.innerSetException(new TimeoutException(),false);
      }
 else {
        if (response instanceof Packet) {
          Packet responsePacket=(Packet)response;
          result=toObject(responsePacket.getValue());
        }
        if (result instanceof MemberLeftException) {
          MemberLeftException memberLeftException=(MemberLeftException)result;
          inner.innerSetMemberLeft(memberLeftException.getMember());
        }
 else         if (result instanceof Throwable) {
          inner.innerSetException((Throwable)result,true);
        }
 else {
          if (dt instanceof MultiTask) {
            if (result != null) {
              Collection colResults=(Collection)result;
              for (              Object obj : colResults) {
                inner.innerSet(obj);
              }
            }
 else {
              inner.innerSet(result);
            }
          }
 else {
            inner.innerSet(result);
          }
        }
      }
      inner.innerDone();
    }
  }
);
  proxyHelper.sendCall(call);
  return dt;
}
