{
  ArrayList<Runnable> operations=new ArrayList<Runnable>();
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.evict(random.nextInt(SIZE));
    }
  }
,5);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      try {
        map.getAsync(random.nextInt(SIZE)).get();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(e);
      }
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.containsKey(random.nextInt(SIZE));
    }
  }
,2);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.containsValue(new Customer(random.nextInt(100),String.valueOf(random.nextInt(100000))));
    }
  }
,2);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      int key=random.nextInt(SIZE);
      map.lock(key);
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
 finally {
        map.unlock(key);
      }
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      int key=random.nextInt(SIZE);
      boolean locked=map.tryLock(key);
      if (locked) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
 finally {
          map.unlock(key);
        }
      }
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      int key=random.nextInt(SIZE);
      boolean locked=false;
      try {
        locked=map.tryLock(key,10,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      if (locked) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
 finally {
          map.unlock(key);
        }
      }
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      Iterator it=map.entrySet().iterator();
      for (int i=0; i < 10 && it.hasNext(); i++) {
        it.next();
      }
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.getEntryView(random.nextInt(SIZE));
    }
  }
,2);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.isEmpty();
    }
  }
,3);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.put(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))));
    }
  }
,50);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.tryPut(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))),10,TimeUnit.MILLISECONDS);
    }
  }
,5);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      try {
        map.putAsync(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000)))).get();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(e);
      }
    }
  }
,5);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.put(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))),10,TimeUnit.MILLISECONDS);
    }
  }
,5);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.putIfAbsent(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))),10,TimeUnit.MILLISECONDS);
    }
  }
,5);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.putIfAbsent(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))));
    }
  }
,5);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      Map localMap=new HashMap();
      for (int i=0; i < 10; i++) {
        localMap.put(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))));
      }
      map.putAll(localMap);
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.get(random.nextInt(SIZE));
    }
  }
,100);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.remove(random.nextInt(SIZE));
    }
  }
,10);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.tryRemove(random.nextInt(SIZE),10,TimeUnit.MILLISECONDS);
    }
  }
,10);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.removeAsync(random.nextInt(SIZE));
    }
  }
,10);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.remove(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))));
    }
  }
,10);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.replace(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))));
    }
  }
,4);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.replace(random.nextInt(SIZE),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))),new Customer(random.nextInt(100),String.valueOf(random.nextInt(10000))));
    }
  }
,5);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.size();
    }
  }
,4);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      Iterator it=map.entrySet(new SqlPredicate("year=" + random.nextInt(100))).iterator();
      while (it.hasNext()) {
        it.next();
      }
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      Iterator it=map.entrySet(new SqlPredicate("name=" + random.nextInt(10000))).iterator();
      while (it.hasNext()) {
        it.next();
      }
    }
  }
,10);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      Iterator it=map.keySet(new SqlPredicate("name=" + random.nextInt(10000))).iterator();
      while (it.hasNext()) {
        it.next();
      }
    }
  }
,10);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      Iterator it=map.localKeySet().iterator();
      while (it.hasNext()) {
        it.next();
      }
    }
  }
,10);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      Iterator it=map.localKeySet(new SqlPredicate("name=" + random.nextInt(10000))).iterator();
      while (it.hasNext()) {
        it.next();
      }
    }
  }
,10);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      final CountDownLatch latch=new CountDownLatch(1);
      EntryListener listener=new EntryListener(){
        public void entryAdded(        EntryEvent entryEvent){
          latch.countDown();
        }
        public void entryRemoved(        EntryEvent entryEvent){
          latch.countDown();
        }
        public void entryUpdated(        EntryEvent entryEvent){
          latch.countDown();
        }
        public void entryEvicted(        EntryEvent entryEvent){
          latch.countDown();
        }
      }
;
      String id=map.addEntryListener(listener,true);
      try {
        latch.await();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      map.removeEntryListener(id);
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      map.addIndex("year",true);
    }
  }
,1);
  addOperation(operations,new Runnable(){
    public void run(){
      IMap map=hazelcast.getMap("myMap");
      final CountDownLatch latch=new CountDownLatch(1);
      EntryListener listener=new EntryListener(){
        public void entryAdded(        EntryEvent entryEvent){
          latch.countDown();
        }
        public void entryRemoved(        EntryEvent entryEvent){
          latch.countDown();
        }
        public void entryUpdated(        EntryEvent entryEvent){
          latch.countDown();
        }
        public void entryEvicted(        EntryEvent entryEvent){
          latch.countDown();
        }
      }
;
      String id=map.addLocalEntryListener(listener);
      try {
        latch.await();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      map.removeEntryListener(id);
    }
  }
,1);
  return operations;
}
