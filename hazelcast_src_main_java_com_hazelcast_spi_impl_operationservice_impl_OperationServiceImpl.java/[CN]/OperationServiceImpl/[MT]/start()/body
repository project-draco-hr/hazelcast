{
  logger.finest("Starting OperationService");
  InvocationContext invocationContext=new InvocationContext();
  invocationContext.asyncExecutor=nodeEngine.getExecutionService().register(ExecutionService.ASYNC_EXECUTOR,Runtime.getRuntime().availableProcessors(),ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  invocationContext.clusterService=nodeEngine.getClusterService();
  invocationContext.clusterClock=nodeEngine.getClusterService().getClusterClock();
  invocationContext.defaultCallTimeoutMillis=nodeEngine.getProperties().getMillis(OPERATION_CALL_TIMEOUT_MILLIS);
  invocationContext.connectionManager=node.connectionManager;
  invocationContext.executionService=node.nodeEngine.getExecutionService();
  invocationContext.invocationRegistry=invocationRegistry;
  invocationContext.invocationMonitor=invocationMonitor;
  invocationContext.localMemberUuid=nodeEngine.getLocalMember().getUuid();
  invocationContext.logger=nodeEngine.getLogger(Invocation.class);
  invocationContext.node=node;
  invocationContext.nodeEngine=nodeEngine;
  invocationContext.operationService=this;
  invocationContext.operationExecutor=operationExecutor;
  invocationContext.retryCount=retryCount;
  invocationContext.partitionService=nodeEngine.getPartitionService();
  invocationContext.serializationService=serializationService;
  invocationContext.thisAddress=nodeEngine.getThisAddress();
  this.invocationContext=invocationContext;
  invocationMonitor.start();
  operationExecutor.start();
  asyncResponseHandler.start();
  slowOperationDetector.start();
}
