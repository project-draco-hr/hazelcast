{
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.serializationService=(InternalSerializationService)nodeEngine.getSerializationService();
  this.invocationLogger=nodeEngine.getLogger(Invocation.class);
  HazelcastProperties hazelcastProperties=node.getProperties();
  this.defaultCallTimeoutMillis=hazelcastProperties.getMillis(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS);
  this.backpressureRegulator=new BackpressureRegulator(hazelcastProperties,logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.invocationRegistry=new InvocationRegistry(logger,backpressureRegulator.newCallIdSequence(),concurrencyLevel);
  this.invocationMonitor=new InvocationMonitor(nodeEngine,node.getThisAddress(),node.getHazelcastThreadGroup(),node.getProperties(),invocationRegistry,logger,(InternalSerializationService)nodeEngine.getSerializationService(),nodeEngine.getServiceManager());
  this.operationBackupHandler=new OperationBackupHandler(this);
  this.responseHandler=new ResponseHandler(logger,node.getSerializationService(),invocationRegistry,nodeEngine);
  this.asyncResponseHandler=new AsyncResponseHandler(node.getHazelcastThreadGroup(),logger,responseHandler);
  this.operationExecutor=new OperationExecutorImpl(hazelcastProperties,node.loggingService,node.getThisAddress(),new OperationRunnerFactoryImpl(this),node.getHazelcastThreadGroup(),node.getNodeExtension());
  ExecutionService executionService=nodeEngine.getExecutionService();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.slowOperationDetector=initSlowOperationDetector();
}
