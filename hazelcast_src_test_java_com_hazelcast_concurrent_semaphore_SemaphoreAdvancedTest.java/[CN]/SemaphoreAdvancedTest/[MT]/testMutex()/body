{
  final String semaphoreName=randomString();
  final int threadCount=2;
  final HazelcastInstance[] instances=createHazelcastInstanceFactory(threadCount).newInstances();
  final CountDownLatch latch=new CountDownLatch(threadCount);
  final int loopCount=1000;
class Counter {
    int count=0;
    void inc(){
      count++;
    }
    int get(){
      return count;
    }
  }
  final Counter counter=new Counter();
  assertTrue(instances[0].getSemaphore(semaphoreName).init(1));
  for (int i=0; i < threadCount; i++) {
    final ISemaphore semaphore=instances[i].getSemaphore(semaphoreName);
    new Thread(){
      public void run(){
        for (int j=0; j < loopCount; j++) {
          try {
            semaphore.acquire();
            sleepMillis((int)(Math.random() * 3));
            counter.inc();
          }
 catch (          InterruptedException e) {
            return;
          }
 finally {
            semaphore.release();
          }
        }
        latch.countDown();
      }
    }
.start();
  }
  assertOpenEventually(latch);
  assertEquals(loopCount * threadCount,counter.get());
}
