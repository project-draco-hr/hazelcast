{
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  final HazelcastInstance node1=nodeFactory.newHazelcastInstance();
  final HazelcastInstance node2=nodeFactory.newHazelcastInstance();
  final String MAP_A="MAP_A";
  final IMap map1=node1.getMap(MAP_A);
  final IMap map2=node2.getMap(MAP_A);
  final String KEY="KEY", VAL_2="VAL_2";
  map1.lock(KEY);
  final CountDownLatch startedLatch=new CountDownLatch(1);
  final CountDownLatch putlatch=new CountDownLatch(1);
  Thread t=new Thread(new Runnable(){
    public void run(){
      startedLatch.countDown();
      map2.put(KEY,VAL_2);
      putlatch.countDown();
    }
  }
);
  t.start();
  assertTrue(startedLatch.await(5,TimeUnit.SECONDS));
  assertTrueEventually(new AssertTask(){
    public void run(){
      Assert.assertEquals("the key should be absent ",null,map1.get(KEY));
      Assert.assertEquals("the key should be absent ",null,map2.get(KEY));
    }
  }
);
  map1.unlock(KEY);
  assertTrue(putlatch.await(10,TimeUnit.SECONDS));
  assertTrueEventually(new AssertTask(){
    public void run(){
      Assert.assertEquals(VAL_2,map1.get(KEY));
      Assert.assertEquals(VAL_2,map2.get(KEY));
    }
  }
);
}
