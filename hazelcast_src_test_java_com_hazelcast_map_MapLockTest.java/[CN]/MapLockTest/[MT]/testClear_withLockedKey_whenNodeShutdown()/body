{
  Config config=getConfig();
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  final HazelcastInstance node1=nodeFactory.newHazelcastInstance(config);
  final HazelcastInstance node2=nodeFactory.newHazelcastInstance(config);
  final String mapName=randomString();
  final IMap map=node2.getMap(mapName);
  for (int i=0; i < 1000; i++) {
    map.put(i,i);
  }
  Object key=generateKeyOwnedBy(node2);
  map.put(key,"value");
  map.lock(key);
  final CountDownLatch cleared=new CountDownLatch(1);
  new Thread(){
    public void run(){
      map.clear();
      cleared.countDown();
    }
  }
.start();
  assertOpenEventually(cleared);
  node1.getLifecycleService().shutdown();
  assertTrue("a key present in a map, should be locked after map clear",map.isLocked(key));
  assertEquals("unlocked keys not removed",1,map.size());
}
