{
switch (maxSizePolicy) {
case ENTRY_COUNT:
    return CacheMaxSizePolicy.ENTRY_COUNT;
case USED_NATIVE_MEMORY_SIZE:
  return CacheMaxSizePolicy.USED_NATIVE_MEMORY_SIZE;
case USED_NATIVE_MEMORY_PERCENTAGE:
return CacheMaxSizePolicy.USED_NATIVE_MEMORY_PERCENTAGE;
case FREE_NATIVE_MEMORY_SIZE:
return CacheMaxSizePolicy.FREE_NATIVE_MEMORY_SIZE;
case FREE_NATIVE_MEMORY_PERCENTAGE:
return CacheMaxSizePolicy.FREE_NATIVE_MEMORY_PERCENTAGE;
default :
throw new IllegalArgumentException("Invalid Max-Size policy for converting to CacheMaxSizePolicy");
}
}
