{
  final PortableFactory portableFactory=new PortableFactory(){
    public Portable create(    int classId){
switch (classId) {
case 1:
        return new PortablePerson();
case 2:
      return new PortableAddress();
  }
  throw new IllegalArgumentException();
}
}
;
final SerializationService ss=new SerializationServiceImpl(0,portableFactory);
final int k=10;
final AtomicBoolean error=new AtomicBoolean(false);
final CountDownLatch latch=new CountDownLatch(k);
ExecutorService ex=Executors.newCachedThreadPool();
for (int i=0; i < k; i++) {
ex.execute(new Runnable(){
  final Random rand=new Random();
  public void run(){
    try {
      for (int j=0; j < 10000; j++) {
        String key="key" + rnd();
        Data dataKey=ss.toData(key);
        Assert.assertEquals(key,ss.toObject(dataKey));
        Long value=123L + rnd();
        Data dataValue=ss.toData(value);
        Assert.assertEquals(value,ss.toObject(dataValue));
        Address address=new Address("here here" + rnd(),13131 + rnd());
        Data dataAddress=ss.toData(address);
        Assert.assertEquals(address,ss.toObject(dataAddress));
        Person person=new Person(13 + rnd(),199L + rnd(),56.89d,"mehmet",address);
        Data dataPerson=ss.toData(person);
        Assert.assertEquals(person,ss.toObject(dataPerson));
        PortableAddress portableAddress=new PortableAddress("there there " + rnd(),90909 + rnd());
        Data dataPortableAddress=ss.toData(portableAddress);
        Assert.assertEquals(portableAddress,ss.toObject(dataPortableAddress));
        PortablePerson portablePerson=new PortablePerson(63 + rnd(),167L + rnd(),"ahmet",portableAddress);
        Data dataPortablePerson=ss.toData(portablePerson);
        Assert.assertEquals(portablePerson,ss.toObject(dataPortablePerson));
      }
    }
 catch (    Exception e) {
      error.set(true);
      e.printStackTrace();
    }
 finally {
      latch.countDown();
    }
  }
  int rnd(){
    return rand.nextInt();
  }
}
);
}
latch.await();
ex.shutdown();
if (error.get()) {
throw new AssertionError();
}
}
