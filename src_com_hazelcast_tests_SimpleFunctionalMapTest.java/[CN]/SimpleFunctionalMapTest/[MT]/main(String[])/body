{
  int threadCount=40;
  final Stats stats=new Stats();
  ExecutorService es=Executors.newFixedThreadPool(threadCount);
  for (int i=0; i < threadCount; i++) {
    es.submit(new Runnable(){
      public void run(){
        IMap map=Hazelcast.getMap("default");
        while (true) {
          int keyInt=(int)(Math.random() * ENTRY_COUNT);
          int operation=((int)(Math.random() * 1000)) % 20;
          Object key=String.valueOf(keyInt);
          Object value=new String(String.valueOf(key));
          if (operation < 1) {
            map.size();
            stats.increment("size");
          }
 else           if (operation < 2) {
            Collection col=map.values();
            for (            Object o : col) {
            }
            stats.increment("values");
          }
 else           if (operation < 3) {
            map.get(key);
            stats.increment("get");
          }
 else           if (operation < 4) {
            map.remove(key);
            stats.increment("remove");
          }
 else           if (operation < 5) {
            map.containsKey(key);
            stats.increment("containsKey");
          }
 else           if (operation < 6) {
            map.containsValue(value);
            stats.increment("containsValue");
          }
 else           if (operation < 7) {
            map.putIfAbsent(key,value);
            stats.increment("putIfAbsent");
          }
 else           if (operation < 8) {
            Collection col=map.keySet();
            for (            Object o : col) {
            }
            stats.increment("keySet");
          }
 else           if (operation < 9) {
            Collection col=map.entrySet();
            for (            Object o : col) {
            }
            stats.increment("entrySet");
          }
 else {
            map.put(key,value);
            stats.increment("put");
          }
        }
      }
    }
);
  }
  Executors.newSingleThreadExecutor().submit(new Runnable(){
    public void run(){
      while (true) {
        try {
          Thread.sleep(STATS_SECONDS * 1000);
          System.out.println("cluster size:" + Hazelcast.getCluster().getMembers().size());
          Stats currentStats=stats.getAndReset();
          System.out.println(currentStats);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
}
