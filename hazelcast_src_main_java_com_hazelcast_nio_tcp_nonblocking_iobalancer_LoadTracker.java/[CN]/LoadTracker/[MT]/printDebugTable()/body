{
  if (!logger.isFinestEnabled()) {
    return;
  }
  NonBlockingIOThread minThread=imbalance.destinationSelector;
  NonBlockingIOThread maxThread=imbalance.sourceSelector;
  if (minThread == null || maxThread == null) {
    return;
  }
  StringBuilder sb=new StringBuilder(getLineSeperator()).append("------------").append(getLineSeperator());
  Long eventCountPerSelector=selectorEvents.get(minThread);
  sb.append("Min Selector ").append(minThread).append(" received ").append(eventCountPerSelector).append(" events. ");
  sb.append("It contains following handlers: ").append(getLineSeperator());
  appendSelectorInfo(minThread,selectorToHandlers,sb);
  eventCountPerSelector=selectorEvents.get(maxThread);
  sb.append("Max Selector ").append(maxThread).append(" received ").append(eventCountPerSelector).append(" events. ");
  sb.append("It contains following handlers: ").append(getLineSeperator());
  appendSelectorInfo(maxThread,selectorToHandlers,sb);
  sb.append("Other Selectors: ").append(getLineSeperator());
  for (  NonBlockingIOThread selector : ioThreads) {
    if (!selector.equals(minThread) && !selector.equals(maxThread)) {
      eventCountPerSelector=selectorEvents.get(selector);
      sb.append("Selector ").append(selector).append(" contains ").append(eventCountPerSelector).append(" and has these handlers: ").append(getLineSeperator());
      appendSelectorInfo(selector,selectorToHandlers,sb);
    }
  }
  sb.append("------------").append(getLineSeperator());
  logger.finest(sb.toString());
}
