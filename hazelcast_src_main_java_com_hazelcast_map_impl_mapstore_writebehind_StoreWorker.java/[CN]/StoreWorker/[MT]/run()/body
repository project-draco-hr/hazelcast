{
  final long now=Clock.currentTimeMillis();
  final long ownerHighestStoreTime=calculateHighestStoreTime(lastHighestStoreTime,now);
  final long backupHighestStoreTime=ownerHighestStoreTime - backupDelayMillis;
  lastHighestStoreTime=ownerHighestStoreTime;
  List<DelayedEntry> ownersList=null;
  List<DelayedEntry> backupsList=null;
  for (int partitionId=0; partitionId < partitionCount; partitionId++) {
    if (currentThread().isInterrupted()) {
      break;
    }
    RecordStore recordStore=getRecordStoreOrNull(mapName,partitionId);
    if (!hasEntryInWriteBehindQueue(recordStore)) {
      continue;
    }
    boolean localPartition=isPartitionLocal(partitionId);
    if (!localPartition) {
      backupsList=initListIfNull(backupsList,partitionCount);
      selectEntriesToStore(recordStore,backupsList,backupHighestStoreTime);
    }
 else {
      ownersList=initListIfNull(ownersList,partitionCount);
      selectEntriesToStore(recordStore,ownersList,ownerHighestStoreTime);
    }
  }
  if (!isEmpty(ownersList)) {
    Map<Integer,List<DelayedEntry>> failuresPerPartition=writeBehindProcessor.process(ownersList);
    removeFinishedStoreOperationsFromQueues(mapName,ownersList);
    reAddFailedStoreOperationsToQueues(mapName,failuresPerPartition);
  }
  if (!isEmpty(backupsList)) {
    doInBackup(backupsList);
  }
  notifyFlush();
}
