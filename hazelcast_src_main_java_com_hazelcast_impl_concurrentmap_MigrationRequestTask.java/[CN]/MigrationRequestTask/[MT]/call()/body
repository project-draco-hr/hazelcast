{
  Node node=((FactoryImpl)hazelcast).node;
  ClusterPartitionManager pm=node.concurrentMapManager.getClusterPartitionManager();
  MigrationRequestTask existing=pm.addActiveMigration(this);
  if (existing != null)   return Boolean.FALSE;
  try {
    Member target=pm.getMember(to);
    if (target == null)     return Boolean.FALSE;
    List<Record> lsRecordsToMigrate=pm.getActivePartitionRecords(partitionId);
    RecordSet recordSet=new RecordSet();
    for (    Record record : lsRecordsToMigrate) {
      recordSet.addDataRecordEntry(new DataRecordEntry(record));
    }
    DistributedTask task=new DistributedTask(new MigrationTask(partitionId,toData(recordSet)),target);
    Future future=node.factory.getExecutorService().submit(task);
    return (Boolean)future.get(400,TimeUnit.SECONDS);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    return Boolean.FALSE;
  }
}
