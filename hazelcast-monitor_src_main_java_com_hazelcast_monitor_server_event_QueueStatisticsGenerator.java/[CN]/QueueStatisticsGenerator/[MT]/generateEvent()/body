{
  ExecutorService esService=client.getExecutorService();
  Set<Member> members=client.getCluster().getMembers();
  final List<Member> lsMembers=new ArrayList<Member>(members);
  MultiTask<DistributedQueueStatsCallable.MemberQueueStats> task=new MultiTask<DistributedQueueStatsCallable.MemberQueueStats>(new DistributedQueueStatsCallable(name),members);
  esService.execute(task);
  Collection<DistributedQueueStatsCallable.MemberQueueStats> queueStats;
  try {
    queueStats=task.get();
  }
 catch (  InterruptedException e) {
    return null;
  }
catch (  ExecutionException e) {
    return null;
  }
  if (queueStats == null) {
    return null;
  }
  if (members.size() != queueStats.size()) {
    return null;
  }
  List<DistributedQueueStatsCallable.MemberQueueStats> lsQueueStats=new ArrayList(queueStats);
  Collections.sort(lsQueueStats,new Comparator<DistributedQueueStatsCallable.MemberQueueStats>(){
    public int compare(    DistributedQueueStatsCallable.MemberQueueStats o1,    DistributedQueueStatsCallable.MemberQueueStats o2){
      int i1=lsMembers.indexOf(o1.getMember());
      int i2=lsMembers.indexOf(o2.getMember());
      return i1 - i2;
    }
  }
);
  List<QueueStatistics.LocalQueueStatistics> listOfStats=new ArrayList<QueueStatistics.LocalQueueStatistics>();
  for (  DistributedQueueStatsCallable.MemberQueueStats memberQStat : lsQueueStats) {
    QueueStatistics.LocalQueueStatistics stat=new QueueStatistics.LocalQueueStatistics();
    stat.ownedItemCount=memberQStat.getLocalQueueStats().getOwnedItemCount();
    stat.backupItemCount=memberQStat.getLocalQueueStats().getBackupItemCount();
    stat.maxAge=memberQStat.getLocalQueueStats().getMaxAge();
    stat.minAge=memberQStat.getLocalQueueStats().getMinAge();
    stat.aveAge=memberQStat.getLocalQueueStats().getAveAge();
    stat.periodEnd=memberQStat.getLocalQueueStats().getQueueOperationStats().getPeriodEnd();
    stat.periodStart=memberQStat.getLocalQueueStats().getQueueOperationStats().getPeriodStart();
    stat.memberName=memberQStat.getMember().getInetSocketAddress().getHostName() + ":" + memberQStat.getMember().getInetSocketAddress().getPort();
    long periodInSec=(stat.periodEnd - stat.periodStart) / 1000;
    LocalQueueOperationStats localQueueOperationStats=memberQStat.getLocalQueueStats().getQueueOperationStats();
    stat.numberOfEmptyPollsInSec=localQueueOperationStats.getNumberOfEmptyPolls() / periodInSec;
    stat.numberOfOffersInSec=localQueueOperationStats.getNumberOfOffers() / periodInSec;
    stat.numberOfPollsInSec=localQueueOperationStats.getNumberOfPolls() / periodInSec;
    stat.numberOfRejectedOffersInSec=localQueueOperationStats.getNumberOfRejectedOffers() / periodInSec;
    listOfStats.add(stat);
  }
  QueueStatistics event=new QueueStatistics(this.clusterId);
  event.setName(name);
  event.setList(listOfStats);
  storeEvent(event);
  return event;
}
