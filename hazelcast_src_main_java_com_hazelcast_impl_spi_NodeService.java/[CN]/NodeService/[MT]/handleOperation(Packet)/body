{
  final int partitionId=packet.blockId;
  final boolean nonBlocking=packet.longValue == 1;
  final Data data=packet.getValueData();
  final long callId=packet.callId;
  final Address caller=packet.conn.getEndPoint();
  final String serviceName=packet.name;
  final Executor executor=getExecutor(partitionId,nonBlocking);
  executor.execute(new Runnable(){
    public void run(){
      try {
        final Operation op=(Operation)toObject(data);
        setOperationContext(op,serviceName,caller,callId,partitionId);
        final boolean noReply=(op instanceof NoReply);
        if (!noReply) {
          ResponseHandler responseHandler=new ResponseHandler(){
            public void sendResponse(            Object response){
              if (!(response instanceof Operation)) {
                response=new Response(response);
              }
              packet.clearForResponse();
              packet.blockId=partitionId;
              packet.callId=callId;
              packet.longValue=(response instanceof NonBlockingOperation) ? 1 : 0;
              packet.setValue(toData(response));
              packet.name=serviceName;
              node.concurrentMapManager.sendOrReleasePacket(packet,packet.conn);
            }
          }
;
          op.getOperationContext().setResponseHandler(responseHandler);
        }
        try {
          if (partitionId != -1) {
            PartitionInfo partitionInfo=getPartitionInfo(partitionId);
            Address owner=partitionInfo.getOwner();
            if (!(op instanceof NonBlockingOperation) && !getThisAddress().equals(owner)) {
              throw new WrongTargetException(getThisAddress(),owner);
            }
          }
          op.run();
        }
 catch (        Exception e) {
          e.printStackTrace();
          if (!noReply) {
            op.getOperationContext().getResponseHandler().sendResponse(e);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        packet.clearForResponse();
        packet.blockId=partitionId;
        packet.callId=callId;
        packet.longValue=1;
        packet.setValue(toData(e));
        packet.name=serviceName;
        node.concurrentMapManager.sendOrReleasePacket(packet,packet.conn);
      }
    }
  }
);
}
