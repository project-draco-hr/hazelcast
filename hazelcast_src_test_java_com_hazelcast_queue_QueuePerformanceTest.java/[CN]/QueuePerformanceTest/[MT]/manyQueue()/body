{
  Config config=new Config();
  final HazelcastInstance ins=Hazelcast.newHazelcastInstance(config);
  final int threadCount=10;
  final int queueCount=1000;
  final IQueue[] queues=new IQueue[queueCount];
  for (int i=0; i < queueCount; i++) {
    queues[i]=ins.getQueue("queue" + i);
  }
  System.err.println("starting threads");
  for (int i=0; i < threadCount; i++) {
    new Thread(){
      public void run(){
        while (true) {
          IQueue q=queues[rnd.nextInt(queueCount)];
          int random=rnd.nextInt(100);
          if (random > 65) {
            q.poll();
            totalPoll.incrementAndGet();
          }
 else           if (random > 30) {
            q.offer("item");
            totalOffer.incrementAndGet();
          }
 else {
            q.peek();
            totalPeek.incrementAndGet();
          }
        }
      }
    }
.start();
  }
  System.err.println("finished starting threads");
  while (true) {
    long sleepTime=10;
    Thread.sleep(sleepTime * 1000);
    long totalOfferVal=totalOffer.getAndSet(0);
    long totalPollVal=totalPoll.getAndSet(0);
    long totalPeekVal=totalPeek.getAndSet(0);
    System.err.println("_______________________________________________________________________________________");
    System.err.println(" offer: " + totalOfferVal + ",\t poll: "+ totalPollVal+ ",\t peek: "+ totalPeekVal);
    System.err.println(" speed: " + ((totalOfferVal + totalPollVal + totalPeekVal) / sleepTime));
    System.err.println("---------------------------------------------------------------------------------------");
    System.err.println("");
  }
}
