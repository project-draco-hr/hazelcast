{
  Class<?>[] parameterTypes=method.getParameterTypes();
  Object[] parameters=new Object[parameterTypes.length];
  for (int i=0; i < parameterTypes.length; i++) {
    Class<?> parameterType=parameterTypes[i];
    if (parameterType.isAssignableFrom(String.class)) {
      parameters[i]="test";
    }
 else     if (parameterType.isAssignableFrom(Long.class) || parameterType.equals(long.class)) {
      parameters[i]=Long.MAX_VALUE;
    }
 else     if (parameterType.isAssignableFrom(Integer.class) || parameterType.equals(int.class)) {
      parameters[i]=Integer.MAX_VALUE;
    }
 else     if (parameterType.isAssignableFrom(Short.class) || parameterType.equals(short.class)) {
      parameters[i]=Short.MAX_VALUE;
    }
 else     if (parameterType.isAssignableFrom(Byte.class) || parameterType.equals(byte.class)) {
      parameters[i]=Byte.MAX_VALUE;
    }
 else     if (parameterType.isAssignableFrom(Boolean.class) || parameterType.equals(boolean.class)) {
      parameters[i]=true;
    }
 else     if (parameterType.equals(long[].class)) {
      parameters[i]=new long[0];
    }
 else     if (parameterType.equals(int[].class)) {
      parameters[i]=new int[0];
    }
 else     if (parameterType.equals(short[].class)) {
      parameters[i]=new short[0];
    }
 else     if (parameterType.equals(byte[].class)) {
      parameters[i]=new byte[0];
    }
 else     if (parameterType.equals(boolean[].class)) {
      parameters[i]=new boolean[0];
    }
 else     if (parameterType.isAssignableFrom(MapEntries.class)) {
      parameters[i]=new MapEntries();
    }
 else     if (parameterType.equals(MapEntries[].class)) {
      parameters[i]=new MapEntries[0];
    }
 else {
      try {
        parameters[i]=mock(parameterType);
      }
 catch (      Exception e) {
        throw new IllegalStateException(format("Cannot mock parameter of type %s of MapOperationProviderDelegator.%s() at position %d: %s",parameterType.getSimpleName(),method.getName(),i,e.getMessage()));
      }
    }
  }
  return parameters;
}
