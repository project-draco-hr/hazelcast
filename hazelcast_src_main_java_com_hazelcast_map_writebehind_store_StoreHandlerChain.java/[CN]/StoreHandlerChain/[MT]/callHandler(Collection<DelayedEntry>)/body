{
  final int size=delayedEntries.size();
  if (size == 0) {
    return Collections.emptyList();
  }
  if (size == 1) {
    final Iterator<DelayedEntry> iterator=delayedEntries.iterator();
    final DelayedEntry delayedEntry=iterator.next();
    return callSingleStoreWithListeners(delayedEntry);
  }
  final DelayedEntry[] delayeds=delayedEntries.toArray(new DelayedEntry[delayedEntries.size()]);
  final Map<Object,DelayedEntry> batchMap=prepareBatchMap(delayeds);
  if (batchMap.size() == 1) {
    final DelayedEntry delayedEntry=delayeds[delayeds.length - 1];
    return callSingleStoreWithListeners(delayedEntry);
  }
  return callBatchStoreWithListeners(batchMap);
}
