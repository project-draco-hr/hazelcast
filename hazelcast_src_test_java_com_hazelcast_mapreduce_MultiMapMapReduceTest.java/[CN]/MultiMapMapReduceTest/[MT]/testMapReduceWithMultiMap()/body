{
  int keyCount=50;
  int perKeyValueCount=100;
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  final HazelcastInstance h1=nodeFactory.newHazelcastInstance();
  final HazelcastInstance h2=nodeFactory.newHazelcastInstance();
  final HazelcastInstance h3=nodeFactory.newHazelcastInstance();
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  MultiMap<Integer,Integer> multiMap=h1.getMultiMap("default");
  for (int i=0; i < keyCount; i++) {
    for (int o=0; o < perKeyValueCount; o++) {
      multiMap.put(i,o);
    }
  }
  int expectedResult=0;
  for (int o=0; o < perKeyValueCount; o++) {
    expectedResult+=o;
  }
  JobTracker jobTracker=h1.getJobTracker("default");
  Job<Integer,Integer> job=jobTracker.newJob(KeyValueSource.<Integer,Integer>fromMultiMap(multiMap));
  ICompletableFuture<Map<String,Integer>> ICompletableFuture=job.chunkSize(10).mapper(new MultiMapMapper()).combiner(new MultiMapCombinerFactory()).reducer(new MultiMapReducerFactory()).submit();
  Map<String,Integer> result=ICompletableFuture.get();
  assertEquals(keyCount,result.size());
  List<Map.Entry<String,Integer>> entrySet=new ArrayList(result.entrySet());
  Collections.sort(entrySet,ENTRYSET_COMPARATOR);
  int count=0;
  for (  Map.Entry<String,Integer> entry : entrySet) {
    assertEquals(String.valueOf(count++),entry.getKey());
    assertEquals(expectedResult,(int)entry.getValue());
  }
}
