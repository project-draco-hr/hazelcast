{
  if (cacheEntryListenerConfiguration == null) {
    throw new NullPointerException("CacheEntryListenerConfiguration can't be " + "null");
  }
  final CacheService service=getService();
  final ConcurrentHashMap<CacheEntryListenerConfiguration,String> regs;
  if (cacheEntryListenerConfiguration.isSynchronous()) {
    regs=syncListenerRegistrations;
  }
 else {
    regs=asyncListenerRegistrations;
  }
  final String regId=regs.remove(cacheEntryListenerConfiguration);
  if (regId != null) {
    if (!service.deregisterListener(getDistributedObjectName(),regId)) {
      regs.putIfAbsent(cacheEntryListenerConfiguration,regId);
    }
 else {
      cacheConfig.removeCacheEntryListenerConfiguration(cacheEntryListenerConfiguration);
      deregisterCompletionListener();
      final OperationService operationService=nodeEngine.getOperationService();
      final Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          final Operation op=new CacheListenerRegistrationOperation(getDistributedObjectName(),cacheEntryListenerConfiguration,false);
          final InternalCompletableFuture<Object> f2=operationService.invokeOnTarget(CacheService.SERVICE_NAME,op,member.getAddress());
          f2.getSafely();
        }
      }
    }
  }
}
