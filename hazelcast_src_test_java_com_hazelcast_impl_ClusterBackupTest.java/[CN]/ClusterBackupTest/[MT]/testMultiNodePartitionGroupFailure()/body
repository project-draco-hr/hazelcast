{
  final Config config=new Config();
  config.setProperty("hazelcast.wait.seconds.before.join","0");
  final String name="testMultiNodePartitionGroupFailure";
  config.getMapConfig(name).setBackupCount(1);
  final PartitionGroupConfig pg=config.getPartitionGroupConfig().setEnabled(true).setGroupType(MemberGroupType.CUSTOM);
  final String factoryClassName=CustomMemberGroupFactory.class.getName();
  pg.setMemberGroupFactoryClassname(factoryClassName);
  final NetworkConfig network=config.getNetworkConfig();
class TerminateNode extends Thread {
    HazelcastInstance hz;
    TerminateNode(    HazelcastInstance hz){
      this.hz=hz;
    }
    public void run(){
      final Node node=TestUtil.getNode(hz);
      node.getConnectionManager().shutdown();
      node.doShutdown(true);
    }
  }
  network.setPort(5001);
  final HazelcastInstance hz1=Hazelcast.newHazelcastInstance(config);
  network.setPort(5002);
  final HazelcastInstance hz2=Hazelcast.newHazelcastInstance(config);
  network.setPort(5003);
  final HazelcastInstance hz3=Hazelcast.newHazelcastInstance(config);
  network.setPort(5004);
  final HazelcastInstance hz4=Hazelcast.newHazelcastInstance(config);
  network.setPort(5005);
  final HazelcastInstance hz5=Hazelcast.newHazelcastInstance(config);
  network.setPort(5006);
  final HazelcastInstance hz6=Hazelcast.newHazelcastInstance(config);
  final IMap<Object,Object> map1=hz1.getMap(name);
  final IMap<Object,Object> map2=hz2.getMap(name);
  final IMap<Object,Object> map3=hz3.getMap(name);
  final IMap<Object,Object> map4=hz4.getMap(name);
  final IMap<Object,Object> map5=hz5.getMap(name);
  final IMap<Object,Object> map6=hz6.getMap(name);
  final int total=10000;
  for (int i=0; i < total; i++) {
    map6.put(i,i);
  }
  assertEquals(total,getTotalOwnedEntryCount(map1,map2,map3,map4,map5,map6));
  assertEquals(total,getTotalBackupEntryCount(map1,map2,map3,map4,map5,map6));
  final TerminateNode term1=new TerminateNode(hz2);
  final TerminateNode term2=new TerminateNode(hz1);
  term1.start();
  term2.start();
  term1.join();
  term2.join();
  Thread.sleep(5000);
  assertEquals(total,getTotalOwnedEntryCount(map3,map4,map5,map6));
  assertEquals(total,getTotalBackupEntryCount(map3,map4,map5,map6));
  final TerminateNode term3=new TerminateNode(hz3);
  final TerminateNode term4=new TerminateNode(hz4);
  term3.start();
  term4.start();
  term3.join();
  term4.join();
  Thread.sleep(5000);
  assertEquals(total,getTotalOwnedEntryCount(map5,map6));
  assertEquals(0,getTotalBackupEntryCount(map5,map6));
}
