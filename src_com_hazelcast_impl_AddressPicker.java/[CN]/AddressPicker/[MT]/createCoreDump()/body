{
  final StringBuilder sb=new StringBuilder();
  addLine(sb,"== Config ==");
  addLine(sb,"config url: " + Config.get().getConfigurationUrl());
  addLine(sb,Config.get().getXmlConfig());
  final Set<Object> propKeys=System.getProperties().keySet();
  addLine(sb,"== System Properies ==");
  for (  final Object key : propKeys) {
    addLine(sb,key + " : " + System.getProperty((String)key));
  }
  try {
    final Enumeration<NetworkInterface> enums=NetworkInterface.getNetworkInterfaces();
    while (enums.hasMoreElements()) {
      final NetworkInterface ni=enums.nextElement();
      sb.append("\n");
      addLine(sb,"== Interface [" + ni.getName() + "] ==");
      final boolean isUp=invoke(true,1.6,ni,"isUp");
      final boolean supportsMulticast=invoke(true,1.6,ni,"supportsMulticast");
      addLine(sb,"displayName : " + ni.getDisplayName());
      addLine(sb,"isUp : " + isUp);
      addLine(sb,"supportsMulticast : " + supportsMulticast);
      final Enumeration<InetAddress> e=ni.getInetAddresses();
      while (e.hasMoreElements()) {
        try {
          final InetAddress inetAddress=e.nextElement();
          addLine(1,sb,"-----IP-----");
          final boolean ipv4=(inetAddress instanceof Inet4Address);
          final String address=inetAddress.getHostAddress();
          addLine(1,sb,"InetAddress : " + inetAddress);
          addLine(1,sb,"IP : " + address);
          addLine(1,sb,"IPv4 : " + ipv4);
          if (ipv4) {
            addLine(1,sb,"Address : " + new Address(address,-1,true));
          }
          addLine(1,sb,"multicast : " + inetAddress.isMulticastAddress());
          addLine(1,sb,"loopback : " + inetAddress.isLoopbackAddress());
          if (Config.get().getInterfaces().isEnabled()) {
            addLine(1,sb,"has match : " + matchAddress(address));
          }
        }
 catch (        final Exception ex) {
          addLine(1,sb,"Got Exception: " + ex.getMessage());
        }
      }
    }
  }
 catch (  final Exception e1) {
    e1.printStackTrace();
  }
  return sb.toString();
}
