{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  HazelcastInstance h1=nodeFactory.newHazelcastInstance();
  HazelcastInstance h2=nodeFactory.newHazelcastInstance();
  HazelcastInstance h3=nodeFactory.newHazelcastInstance();
  IMap<Integer,Integer> m1=h1.getMap(MAP_NAME);
  for (int i=0; i < 100; i++) {
    m1.put(i,i);
  }
  final Map<String,List<Integer>> listenerResults=new HashMap<String,List<Integer>>();
  final Semaphore semaphore=new Semaphore(1);
  semaphore.acquire();
  JobTracker tracker=h1.getJobTracker("default");
  Job<Integer,Integer> job=tracker.newJob(KeyValueSource.fromMap(m1));
  CompletableFuture<Map<String,List<Integer>>> future=job.mapper(new TestMapper()).submit();
  future.andThen(new ExecutionCallback<Map<String,List<Integer>>>(){
    @Override public void onResponse(    Map<String,List<Integer>> response){
      try {
        listenerResults.putAll(response);
      }
  finally {
        semaphore.release();
      }
    }
    @Override public void onFailure(    Throwable t){
      semaphore.release();
    }
  }
);
  semaphore.acquire();
  assertEquals(100,listenerResults.size());
  for (  List<Integer> value : listenerResults.values()) {
    assertEquals(1,value.size());
  }
}
