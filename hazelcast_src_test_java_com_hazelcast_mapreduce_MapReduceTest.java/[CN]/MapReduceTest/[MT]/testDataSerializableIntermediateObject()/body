{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  HazelcastInstance h1=nodeFactory.newHazelcastInstance();
  HazelcastInstance h2=nodeFactory.newHazelcastInstance();
  HazelcastInstance h3=nodeFactory.newHazelcastInstance();
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  IMap<Integer,Integer> m1=h1.getMap(MAP_NAME);
  for (int i=0; i < 100; i++) {
    m1.put(i,i);
  }
  JobTracker jobTracker=h1.getJobTracker("default");
  Job<Integer,Integer> job=jobTracker.newJob(KeyValueSource.fromMap(m1));
  ICompletableFuture<Integer> future=job.mapper(new TestMapper()).combiner(new DataSerializableIntermediateCombinerFactory()).reducer(new DataSerializableIntermediateReducerFactory()).submit(new DataSerializableIntermediateCollator());
  int expectedResult=0;
  for (int i=0; i < 100; i++) {
    expectedResult+=i;
  }
  expectedResult=(int)((double)expectedResult / 100);
  assertEquals(expectedResult,(int)future.get());
}
