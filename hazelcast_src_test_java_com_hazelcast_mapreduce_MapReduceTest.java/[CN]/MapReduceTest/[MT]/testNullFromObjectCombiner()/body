{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(3);
  HazelcastInstance h1=nodeFactory.newHazelcastInstance();
  HazelcastInstance h2=nodeFactory.newHazelcastInstance();
  HazelcastInstance h3=nodeFactory.newHazelcastInstance();
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  IMap<Integer,Integer> m1=h1.getMap(MAP_NAME);
  for (int i=0; i < 100; i++) {
    m1.put(i,i);
  }
  JobTracker jobTracker=h1.getJobTracker("default");
  Job<Integer,Integer> job=jobTracker.newJob(KeyValueSource.fromMap(m1));
  JobCompletableFuture<Map<String,BigInteger>> future=job.chunkSize(10).mapper(new GroupingTestMapper()).combiner(new ObjectCombinerFactory()).reducer(new ObjectReducerFactory()).submit();
  int[] expectedResults=new int[4];
  for (int i=0; i < 100; i++) {
    int index=i % 4;
    expectedResults[index]+=i;
  }
  Map<String,BigInteger> map=future.get();
  for (int i=0; i < 4; i++) {
    assertEquals(BigInteger.valueOf(expectedResults[i]),map.get(String.valueOf(i)));
  }
}
