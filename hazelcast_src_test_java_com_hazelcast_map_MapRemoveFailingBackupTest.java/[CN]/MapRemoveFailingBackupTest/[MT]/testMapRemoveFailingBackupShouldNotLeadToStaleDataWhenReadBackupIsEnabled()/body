{
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  final String mapName=randomMapName();
  final String key="2";
  final String value="value2";
  Config config=new Config();
  config.setProperty(GroupProperty.PARTITION_BACKUP_SYNC_INTERVAL,"5");
  config.getMapConfig(mapName).setReadBackupData(true);
  HazelcastInstance hz1=factory.newHazelcastInstance(config);
  HazelcastInstance hz2=factory.newHazelcastInstance(config);
  final HazelcastInstanceImpl hz1Impl=TestUtil.getHazelcastInstanceImpl(hz1);
  final IMap<Object,Object> map1=hz1.getMap(mapName);
  final IMap<Object,Object> map2=hz2.getMap(mapName);
  MapProxyImpl<Object,Object> mock1=(MapProxyImpl<Object,Object>)spy(map1);
  when(mock1.remove(anyString())).then(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      NodeEngineImpl nodeEngine=hz1Impl.node.nodeEngine;
      Object object=invocation.getArguments()[0];
      final Data key=nodeEngine.toData(object);
      RemoveOperation operation=new RemoveOperation(mapName,key);
      int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
      operation.setThreadId(ThreadUtil.getThreadId());
      OperationService operationService=nodeEngine.getOperationService();
      InternalCompletableFuture<Data> f=operationService.createInvocationBuilder(SERVICE_NAME,operation,partitionId).setResultDeserialized(false).invoke();
      Data result=f.get();
      return nodeEngine.toObject(result);
    }
  }
);
  mock1.put(key,value);
  mock1.remove(key);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertNull(map1.get(key));
      assertNull(map2.get(key));
    }
  }
,30);
}
