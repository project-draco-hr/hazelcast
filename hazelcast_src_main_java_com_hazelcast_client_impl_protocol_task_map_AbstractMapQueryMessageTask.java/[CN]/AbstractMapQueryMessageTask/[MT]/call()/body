{
  Collection<QueryResultEntry> result=new LinkedList<QueryResultEntry>();
  Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
  List<Future> futures=new ArrayList<Future>();
  Predicate predicate=getPredicate();
  createInvocations(members,futures,predicate);
  int partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  Set<Integer> finishedPartitions=new HashSet<Integer>(partitionCount);
  collectResults(result,futures,finishedPartitions);
  if (hasMissingPartitions(finishedPartitions,partitionCount)) {
    List<Integer> missingList=findMissingPartitions(finishedPartitions,partitionCount);
    List<Future> missingFutures=new ArrayList<Future>(missingList.size());
    createInvocationsForMissingPartitions(missingList,missingFutures,predicate);
    collectResultsFromMissingPartitions(result,missingFutures);
  }
  return reduce(result);
}
