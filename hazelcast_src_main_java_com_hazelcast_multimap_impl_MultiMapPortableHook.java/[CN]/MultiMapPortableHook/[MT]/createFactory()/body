{
  return new PortableFactory(){
    @Override public Portable create(    int classId){
switch (classId) {
case CLEAR:
        return new ClearRequest();
case CONTAINS_ENTRY:
      return new ContainsRequest();
case COUNT:
    return new CountRequest();
case ENTRY_SET:
  return new EntrySetRequest();
case GET_ALL:
return new GetAllRequest();
case KEY_SET:
return new KeySetRequest();
case PUT:
return new PutRequest();
case REMOVE_ALL:
return new RemoveAllRequest();
case REMOVE:
return new RemoveRequest();
case SIZE:
return new SizeRequest();
case VALUES:
return new ValuesRequest();
case ADD_ENTRY_LISTENER:
return new AddEntryListenerRequest();
case ENTRY_SET_RESPONSE:
return new PortableEntrySetResponse();
case LOCK:
return new MultiMapLockRequest();
case UNLOCK:
return new MultiMapUnlockRequest();
case IS_LOCKED:
return new MultiMapIsLockedRequest();
case TXN_MM_PUT:
return new TxnMultiMapPutRequest();
case TXN_MM_GET:
return new TxnMultiMapGetRequest();
case TXN_MM_REMOVE:
return new TxnMultiMapRemoveRequest();
case TXN_MM_VALUE_COUNT:
return new TxnMultiMapValueCountRequest();
case TXN_MM_SIZE:
return new TxnMultiMapSizeRequest();
case REMOVE_ENTRY_LISTENER:
return new RemoveEntryListenerRequest();
case TXN_MM_REMOVEALL:
return new TxnMultiMapRemoveAllRequest();
case KEY_BASED_CONTAINS:
return new KeyBasedContainsRequest();
default :
return null;
}
}
}
;
}
