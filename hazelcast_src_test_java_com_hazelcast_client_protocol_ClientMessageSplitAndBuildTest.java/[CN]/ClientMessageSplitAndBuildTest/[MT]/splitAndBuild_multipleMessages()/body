{
  int FRAME_SIZE=50;
  int NUMBER_OF_MESSAGES=5;
  List<List<ClientMessage>> framedClientMessages=new ArrayList<List<ClientMessage>>(NUMBER_OF_MESSAGES);
  final List<ClientMessage> expectedClientMessages=new ArrayList<ClientMessage>();
  for (int id=0; id < NUMBER_OF_MESSAGES; id++) {
    String s=UUID.randomUUID().toString();
    ClientMessage expectedClientMessage=ClientAuthenticationCodec.encodeRequest(s,s,s,s,true,s,(byte)1);
    expectedClientMessage.addFlag(ClientMessage.BEGIN_AND_END_FLAGS);
    expectedClientMessage.setCorrelationId(id);
    expectedClientMessages.add(expectedClientMessage);
    framedClientMessages.add(ClientMessageSplitter.getSubFrames(FRAME_SIZE,expectedClientMessage));
  }
  ClientMessageReadHandler clientMessageReadHandler=new ClientMessageReadHandler(readCounter,new ClientMessageReadHandler.MessageHandler(){
    @Override public void handleMessage(    ClientMessage message){
      int correlationId=(int)message.getCorrelationId();
      message.addFlag(ClientMessage.BEGIN_AND_END_FLAGS);
      assertEquals(expectedClientMessages.get(correlationId),message);
    }
  }
);
  int currentFrameIndex[]=new int[NUMBER_OF_MESSAGES];
  for (int nFinishedMessages=0; nFinishedMessages < NUMBER_OF_MESSAGES; ) {
    for (int i=0; i < NUMBER_OF_MESSAGES; i++) {
      List<ClientMessage> clientMessageFrames=framedClientMessages.get(i);
      if (currentFrameIndex[i] >= clientMessageFrames.size()) {
        nFinishedMessages++;
        break;
      }
      ClientMessage subFrame=clientMessageFrames.get(currentFrameIndex[i]);
      clientMessageReadHandler.onRead(ByteBuffer.wrap(subFrame.buffer().byteArray(),0,subFrame.getFrameLength()));
      currentFrameIndex[i]++;
    }
  }
}
