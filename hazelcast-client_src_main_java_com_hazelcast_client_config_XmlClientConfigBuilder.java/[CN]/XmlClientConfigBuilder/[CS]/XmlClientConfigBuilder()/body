{
  String configFile=System.getProperty("hazelcast.client.config");
  try {
    if (configFile != null) {
      configurationFile=new File(configFile);
      logger.log(Level.INFO,"Using configuration file at " + configurationFile.getAbsolutePath());
      if (!configurationFile.exists()) {
        String msg="Config file at '" + configurationFile.getAbsolutePath() + "' doesn't exist.";
        msg+="\nHazelcast will try to use the hazelcast-client.xml config file in the working directory.";
        logger.log(Level.WARNING,msg);
        configurationFile=null;
      }
    }
    if (configurationFile == null) {
      configFile="hazelcast-client.xml";
      configurationFile=new File("hazelcast-client.xml");
      if (!configurationFile.exists()) {
        configurationFile=null;
      }
    }
    if (configurationFile != null) {
      logger.log(Level.INFO,"Using configuration file at " + configurationFile.getAbsolutePath());
      try {
        in=new FileInputStream(configurationFile);
        configurationUrl=configurationFile.toURI().toURL();
      }
 catch (      final Exception e) {
        String msg="Having problem reading config file at '" + configFile + "'.";
        msg+="\nException message: " + e.getMessage();
        msg+="\nHazelcast will try to use the hazelcast-client.xml config file in classpath.";
        logger.log(Level.WARNING,msg);
        in=null;
      }
    }
    if (in == null) {
      logger.log(Level.INFO,"Looking for hazelcast-client.xml config file in classpath.");
      configurationUrl=Config.class.getClassLoader().getResource("hazelcast-client.xml");
      if (configurationUrl == null) {
        throw new IllegalStateException("Cannot find hazelcast-client.xml in classpath, giving up.");
      }
      logger.log(Level.INFO,"Using configuration file " + configurationUrl.getFile() + " in the classpath.");
      in=configurationUrl.openStream();
      if (in == null) {
        throw new IllegalStateException("Cannot read configuration file, giving up.");
      }
    }
  }
 catch (  final Throwable e) {
    logger.log(Level.SEVERE,"Error while creating configuration:" + e.getMessage(),e);
  }
}
