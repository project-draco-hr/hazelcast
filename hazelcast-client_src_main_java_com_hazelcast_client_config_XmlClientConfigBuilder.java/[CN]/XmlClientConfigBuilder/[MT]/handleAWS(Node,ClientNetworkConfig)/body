{
  final ClientAwsConfig clientAwsConfig=handleAwsAttributes(node);
  for (  Node n : new IterableNodeList(node.getChildNodes())) {
    final String value=getTextContent(n).trim();
    if ("secret-key".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setSecretKey(value);
    }
 else     if ("access-key".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setAccessKey(value);
    }
 else     if ("region".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setRegion(value);
    }
 else     if ("host-header".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setHostHeader(value);
    }
 else     if ("security-group-name".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setSecurityGroupName(value);
    }
 else     if ("tag-key".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setTagKey(value);
    }
 else     if ("tag-value".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setTagValue(value);
    }
 else     if ("inside-aws".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setInsideAws(checkTrue(value));
    }
 else     if ("iam-role".equals(cleanNodeName(n.getNodeName()))) {
      clientAwsConfig.setIamRole(value);
    }
    if (!clientAwsConfig.isInsideAws() && clientAwsConfig.getIamRole() != null) {
      throw new InvalidConfigurationException("You cannot set IAM Role from outside EC2");
    }
  }
  clientNetworkConfig.setAwsConfig(clientAwsConfig);
}
