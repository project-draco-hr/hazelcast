{
  HazelcastClient hClient=getHazelcastClient();
  final MultiMap<Integer,String> map=hClient.getMultiMap("testLotsOfRemove");
  map.put(1,"adam");
  final AtomicBoolean running=new AtomicBoolean(true);
  final AtomicInteger p=new AtomicInteger(0);
  final AtomicInteger r=new AtomicInteger(0);
  Thread.sleep(1000);
  new Thread(new Runnable(){
    public void run(){
      while (running.get()) {
        map.put(1,"" + Math.random());
        p.incrementAndGet();
      }
    }
  }
).start();
  new Thread(new Runnable(){
    public void run(){
      while (running.get()) {
        map.remove(1);
        r.incrementAndGet();
      }
    }
  }
).start();
  final CountDownLatch latch=new CountDownLatch(1);
  new Thread(new Runnable(){
    public void run(){
      int ip=p.get();
      int ir=r.get();
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      if (p.get() == ip || r.get() == ir) {
        System.out.println("STUCK p= " + p.get() + "::: r"+ r.get());
      }
 else {
        latch.countDown();
      }
    }
  }
).start();
  assertTrue(latch.await(5,TimeUnit.SECONDS));
  running.set(false);
}
