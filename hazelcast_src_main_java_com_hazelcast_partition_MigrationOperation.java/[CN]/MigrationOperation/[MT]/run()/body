{
  NodeEngine nodeEngine=getNodeEngine();
  SerializationService serializationService=nodeEngine.getSerializationService();
  ObjectDataInput in=null;
  try {
    final byte[] taskData=IOUtil.decompress(zippedTaskData);
    in=serializationService.createObjectDataInput(taskData);
    int size=in.readInt();
    tasks=new ArrayList<Operation>(size);
    for (int i=0; i < size; i++) {
      Object o=serializationService.readObject(in);
      if (!(o instanceof Operation)) {
        LockNamespace ln=(LockNamespace)o;
      }
      Operation task=(Operation)o;
      tasks.add(task);
    }
    if (taskCount != tasks.size()) {
      getLogger().log(Level.SEVERE,"Migration task count mismatch! => " + "expected-count: " + size + ", actual-count: "+ tasks.size()+ "\nfrom: "+ migrationInfo.getFromAddress()+ ", partition: "+ getPartitionId()+ ", replica: "+ getReplicaIndex());
    }
    success=runMigrationTasks();
  }
 catch (  Throwable e) {
    Level level=Level.WARNING;
    if (e instanceof IllegalStateException) {
      level=Level.FINEST;
    }
    getLogger().log(level,e.getMessage(),e);
    success=false;
  }
 finally {
    IOUtil.closeResource(in);
  }
}
