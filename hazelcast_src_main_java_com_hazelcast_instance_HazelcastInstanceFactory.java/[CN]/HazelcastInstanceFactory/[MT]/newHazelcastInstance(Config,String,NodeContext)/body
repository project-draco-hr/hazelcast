{
  final ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  if (instanceName == null || instanceName.trim().length() == 0) {
    instanceName=createInstanceName(config);
  }
  HazelcastInstanceProxy proxy;
  try {
    Thread.currentThread().setContextClassLoader(HazelcastInstanceFactory.class.getClassLoader());
    final HazelcastInstanceImpl hazelcastInstance=new HazelcastInstanceImpl(instanceName,config,nodeContext);
    OutOfMemoryErrorDispatcher.register(hazelcastInstance);
    proxy=new HazelcastInstanceProxy(hazelcastInstance);
    final Node node=hazelcastInstance.node;
    final Iterator<Member> iter=node.getClusterService().getMembers().iterator();
    final boolean firstMember=(iter.hasNext() && iter.next().localMember());
    final int initialWaitSeconds=node.groupProperties.INITIAL_WAIT_SECONDS.getInteger();
    if (initialWaitSeconds > 0) {
      try {
        Thread.sleep(initialWaitSeconds * 1000);
        if (firstMember) {
          node.partitionService.firstArrangement();
        }
 else {
          Thread.sleep(4 * 1000);
        }
      }
 catch (      InterruptedException ignored) {
      }
    }
    final int initialMinClusterSize=node.groupProperties.INITIAL_MIN_CLUSTER_SIZE.getInteger();
    while (node.getClusterService().getSize() < initialMinClusterSize) {
      try {
        hazelcastInstance.logger.info("HazelcastInstance waiting for cluster size of " + initialMinClusterSize);
        Thread.sleep(1000);
      }
 catch (      InterruptedException ignored) {
      }
    }
    if (initialMinClusterSize > 1) {
      if (firstMember) {
        node.partitionService.firstArrangement();
      }
 else {
        Thread.sleep(3 * 1000);
      }
      hazelcastInstance.logger.info("HazelcastInstance starting after waiting for cluster size of " + initialMinClusterSize);
    }
    INSTANCE_MAP.put(instanceName,proxy);
    hazelcastInstance.lifecycleService.fireLifecycleEvent(STARTED);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
 finally {
    Thread.currentThread().setContextClassLoader(tccl);
  }
  return proxy;
}
