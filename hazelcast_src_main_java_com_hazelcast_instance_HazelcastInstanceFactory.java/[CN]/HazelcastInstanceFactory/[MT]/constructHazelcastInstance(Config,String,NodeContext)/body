{
  final ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  HazelcastInstanceProxy proxy;
  try {
    if (classLoader == null) {
      Thread.currentThread().setContextClassLoader(HazelcastInstanceFactory.class.getClassLoader());
    }
    HazelcastInstanceImpl hazelcastInstance=new HazelcastInstanceImpl(instanceName,config,nodeContext);
    OutOfMemoryErrorDispatcher.register(hazelcastInstance);
    proxy=new HazelcastInstanceProxy(hazelcastInstance);
    final Node node=hazelcastInstance.node;
    final boolean firstMember=isFirstMember(node);
    final int initialWaitSeconds=node.groupProperties.INITIAL_WAIT_SECONDS.getInteger();
    if (initialWaitSeconds > 0) {
      hazelcastInstance.logger.info("Waiting " + initialWaitSeconds + " seconds before completing HazelcastInstance startup...");
      try {
        Thread.sleep(TimeUnit.SECONDS.toMillis(initialWaitSeconds));
        if (firstMember) {
          node.partitionService.firstArrangement();
        }
 else {
          Thread.sleep(TimeUnit.SECONDS.toMillis(4));
        }
      }
 catch (      InterruptedException ignored) {
      }
    }
    awaitMinimalClusterSize(hazelcastInstance,node,firstMember);
    hazelcastInstance.lifecycleService.fireLifecycleEvent(STARTED);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
 finally {
    Thread.currentThread().setContextClassLoader(classLoader);
  }
  return proxy;
}
