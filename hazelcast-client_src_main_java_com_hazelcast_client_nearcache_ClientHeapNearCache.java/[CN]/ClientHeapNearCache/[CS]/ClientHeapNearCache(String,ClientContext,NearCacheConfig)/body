{
  this.mapName=mapName;
  this.context=context;
  maxSize=nearCacheConfig.getMaxSize();
  maxIdleMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getMaxIdleSeconds());
  inMemoryFormat=nearCacheConfig.getInMemoryFormat();
  if (inMemoryFormat != InMemoryFormat.BINARY && inMemoryFormat != InMemoryFormat.OBJECT) {
    throw new IllegalArgumentException("Illegal in-memory-format: " + inMemoryFormat);
  }
  timeToLiveMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getTimeToLiveSeconds());
  invalidateOnChange=nearCacheConfig.isInvalidateOnChange();
  evictionPolicy=EvictionPolicy.valueOf(nearCacheConfig.getEvictionPolicy());
  if (EvictionPolicy.LRU.equals(evictionPolicy)) {
    selectedComparator=lruComparator;
  }
 else   if (EvictionPolicy.LFU.equals(evictionPolicy)) {
    selectedComparator=lfuComparator;
  }
 else {
    selectedComparator=defaultComparator;
  }
  cache=new ConcurrentHashMap<K,CacheRecord<K>>();
  canCleanUp=new AtomicBoolean(true);
  canEvict=new AtomicBoolean(true);
  lastCleanup=Clock.currentTimeMillis();
  stats=new NearCacheStatsImpl();
}
