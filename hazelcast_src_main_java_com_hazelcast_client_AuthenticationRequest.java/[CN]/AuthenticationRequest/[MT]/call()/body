{
  ClientEngineImpl clientEngine=getService();
  Connection connection=endpoint.getConn();
  ILogger logger=clientEngine.getILogger(getClass());
  boolean authenticated;
  if (credentials == null) {
    authenticated=false;
    logger.log(Level.SEVERE,"Could not retrieve Credentials object!");
  }
 else   if (clientEngine.getSecurityContext() != null) {
    credentials.setEndpoint(connection.getInetAddress().getHostAddress());
    try {
      SecurityContext securityContext=clientEngine.getSecurityContext();
      LoginContext lc=securityContext.createClientLoginContext(credentials);
      lc.login();
      clientEngine.getEndpoint(connection).setLoginContext(lc);
      authenticated=true;
    }
 catch (    LoginException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      authenticated=false;
    }
  }
 else {
    if (credentials instanceof UsernamePasswordCredentials) {
      final UsernamePasswordCredentials usernamePasswordCredentials=(UsernamePasswordCredentials)credentials;
      GroupConfig groupConfig=clientEngine.getConfig().getGroupConfig();
      final String nodeGroupName=groupConfig.getName();
      final String nodeGroupPassword=groupConfig.getPassword();
      authenticated=(nodeGroupName.equals(usernamePasswordCredentials.getUsername()) && nodeGroupPassword.equals(usernamePasswordCredentials.getPassword()));
    }
 else {
      authenticated=false;
      logger.log(Level.SEVERE,"Hazelcast security is disabled.\nUsernamePasswordCredentials or cluster " + "group-name and group-password should be used for authentication!\n" + "Current credentials type is: "+ credentials.getClass().getName());
    }
  }
  logger.log((authenticated ? Level.INFO : Level.WARNING),"Received auth from " + connection + ", "+ (authenticated ? "successfully authenticated" : "authentication failed"));
  if (authenticated) {
    if (principal != null) {
      final ClusterService clusterService=clientEngine.getClusterService();
      if (reAuth) {
        if (clusterService.getMember(principal.getOwnerUuid()) != null) {
          return new GenericError("Owner member is already member of this cluster, cannot re-auth!",0);
        }
 else {
          principal=new ClientPrincipal(principal.getUuid(),clientEngine.getLocalMember().getUuid());
          final Collection<MemberImpl> members=clientEngine.getClusterService().getMemberList();
          for (          MemberImpl member : members) {
            if (!member.localMember()) {
              clientEngine.sendOperation(new ClientReAuthOperation(principal.getUuid()),member.getAddress());
            }
          }
        }
      }
 else       if (clusterService.getMember(principal.getOwnerUuid()) == null) {
        clientEngine.removeEndpoint(connection);
        return new GenericError("Owner member is not member of this cluster!",0);
      }
    }
    ClientEndpoint clientEndpoint=clientEngine.getEndpoint(connection);
    if (principal == null) {
      principal=new ClientPrincipal(clientEndpoint.getUuid(),clientEngine.getLocalMember().getUuid());
    }
    clientEndpoint.authenticated(principal);
    clientEngine.bind(connection);
    return principal;
  }
 else {
    clientEngine.removeEndpoint(connection);
    return new GenericError("Invalid credentials!",0);
  }
}
