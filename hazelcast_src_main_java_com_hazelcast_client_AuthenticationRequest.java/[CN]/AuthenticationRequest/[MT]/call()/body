{
  ClientEngineImpl clientEngine=getService();
  Connection connection=endpoint.getConnection();
  ILogger logger=clientEngine.getLogger(getClass());
  boolean authenticated;
  if (credentials == null) {
    authenticated=false;
    logger.severe("Could not retrieve Credentials object!");
  }
 else   if (clientEngine.getSecurityContext() != null) {
    credentials.setEndpoint(connection.getInetAddress().getHostAddress());
    try {
      SecurityContext securityContext=clientEngine.getSecurityContext();
      LoginContext lc=securityContext.createClientLoginContext(credentials);
      lc.login();
      endpoint.setLoginContext(lc);
      authenticated=true;
    }
 catch (    LoginException e) {
      logger.warning(e);
      authenticated=false;
    }
  }
 else {
    if (credentials instanceof UsernamePasswordCredentials) {
      final UsernamePasswordCredentials usernamePasswordCredentials=(UsernamePasswordCredentials)credentials;
      GroupConfig groupConfig=clientEngine.getConfig().getGroupConfig();
      final String nodeGroupName=groupConfig.getName();
      final String nodeGroupPassword=groupConfig.getPassword();
      authenticated=(nodeGroupName.equals(usernamePasswordCredentials.getUsername()) && nodeGroupPassword.equals(usernamePasswordCredentials.getPassword()));
    }
 else {
      authenticated=false;
      logger.severe("Hazelcast security is disabled.\nUsernamePasswordCredentials or cluster " + "group-name and group-password should be used for authentication!\n" + "Current credentials type is: "+ credentials.getClass().getName());
    }
  }
  logger.log((authenticated ? Level.INFO : Level.WARNING),"Received auth from " + connection + ", "+ (authenticated ? "successfully authenticated" : "authentication failed"));
  if (authenticated) {
    if (principal != null) {
      final ClusterService clusterService=clientEngine.getClusterService();
      if (reAuth) {
        principal=new ClientPrincipal(principal.getUuid(),clientEngine.getLocalMember().getUuid());
        final Collection<MemberImpl> members=clientEngine.getClusterService().getMemberList();
        for (        MemberImpl member : members) {
          if (!member.localMember()) {
            clientEngine.sendOperation(new ClientReAuthOperation(principal.getUuid(),firstConnection),member.getAddress());
          }
        }
      }
    }
    if (principal == null) {
      principal=new ClientPrincipal(endpoint.getUuid(),clientEngine.getLocalMember().getUuid());
    }
    endpoint.authenticated(principal,firstConnection);
    clientEngine.bind(endpoint);
    return new SerializableCollection(clientEngine.toData(clientEngine.getThisAddress()),clientEngine.toData(principal));
  }
 else {
    clientEngine.removeEndpoint(connection);
    return new AuthenticationException("Invalid credentials!");
  }
}
