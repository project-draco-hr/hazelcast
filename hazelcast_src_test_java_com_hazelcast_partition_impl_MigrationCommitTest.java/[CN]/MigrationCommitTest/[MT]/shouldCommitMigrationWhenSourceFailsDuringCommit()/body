{
  final CountDownLatch migrationStartLatch=new CountDownLatch(1);
  final Config config1=createConfig();
  config1.setLiteMember(true);
  final CrashOtherMemberWhenMigrationCompleteOnMaster masterListener=new CrashOtherMemberWhenMigrationCompleteOnMaster(migrationStartLatch);
  config1.addListenerConfig(new ListenerConfig(masterListener));
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  final HazelcastInstance hz1=factory.newHazelcastInstance(config1);
  final HazelcastInstance hz2=factory.newHazelcastInstance(createConfig());
  warmUpPartitions(hz1,hz2);
  waitAllForSafeState(hz1,hz2);
  final Config config3=createConfig();
  final InternalMigrationListenerImpl targetListener=new InternalMigrationListenerImpl();
  config3.addListenerConfig(new ListenerConfig(targetListener));
  final HazelcastInstance hz3=factory.newHazelcastInstance(config3);
  masterListener.other=hz2;
  migrationStartLatch.countDown();
  waitAllForSafeState(hz1,hz3);
  final InternalPartition partition0=getPartitionService(hz3).getPartition(0);
  final InternalPartition partition1=getPartitionService(hz3).getPartition(1);
  assertEquals(getAddress(hz3),partition0.getOwnerOrNull());
  assertEquals(getAddress(hz3),partition1.getOwnerOrNull());
  assertFalse(partition0.isMigrating());
  assertFalse(partition1.isMigrating());
  assertFalse(masterListener.rollback.get());
  final List<MigrationProgressNotification> notifications=targetListener.getNotifications();
  assertFalse(notifications.isEmpty());
  assertEquals(COMMIT,notifications.get(notifications.size() - 1).event);
}
