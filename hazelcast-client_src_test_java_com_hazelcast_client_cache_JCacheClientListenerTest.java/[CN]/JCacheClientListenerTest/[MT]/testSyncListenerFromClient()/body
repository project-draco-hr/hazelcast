{
  try {
    HazelcastInstance hz1=Hazelcast.newHazelcastInstance();
    HazelcastInstance hz2=Hazelcast.newHazelcastInstance();
    ClientConfig clientConfig=new ClientConfig();
    clientConfig.getNetworkConfig().addAddress("127.0.0.1");
    HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
    HazelcastClientCachingProvider cachingProvider=HazelcastClientCachingProvider.createCachingProvider(client);
    CacheManager cacheManager=cachingProvider.getCacheManager();
    AtomicInteger counter=new AtomicInteger();
    CompleteConfiguration<String,String> config=new MutableConfiguration<String,String>().setTypes(String.class,String.class).addCacheEntryListenerConfiguration(new MutableCacheEntryListenerConfiguration<String,String>(FactoryBuilder.factoryOf(new TestListener(counter)),null,true,true));
    final Cache<String,String> cache=cacheManager.createCache("test",config);
    final CountDownLatch[] latches=new CountDownLatch[10];
    for (int o=0; o < latches.length; o++) {
      final int index=o;
      latches[o]=new CountDownLatch(1);
      new Thread(){
        public void run(){
          for (int i=0; i < 100000; i++) {
            String key=String.valueOf(i % 10);
            String value=UUID.randomUUID().toString();
            System.out.println("key=" + key + ", value="+ value);
            cache.put(key,value);
          }
          latches[index].countDown();
        }
      }
.start();
    }
    for (int o=0; o < latches.length; o++) {
      latches[o].await();
    }
    System.out.println("Listener invoked locally: " + counter.get());
  }
  finally {
    HazelcastClient.shutdownAll();
    Hazelcast.shutdownAll();
  }
}
