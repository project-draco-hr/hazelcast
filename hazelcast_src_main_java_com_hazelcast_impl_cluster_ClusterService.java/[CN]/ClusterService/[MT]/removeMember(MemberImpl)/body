{
  logger.log(Level.FINEST,"Removing  " + deadMember);
  lock.lock();
  try {
    final Map<Address,MemberImpl> members=membersRef.get();
    if (members != null && members.containsKey(deadMember.getAddress())) {
      Map<Address,MemberImpl> newMembers=new LinkedHashMap<Address,MemberImpl>(members);
      newMembers.remove(deadMember.getAddress());
      if (!deadMember.isLiteMember()) {
        dataMemberCount.decrementAndGet();
      }
      setMembers(newMembers);
      Collection<MembershipAwareService> services=getMembershipAwareServices();
      for (      MembershipAwareService service : services) {
        service.memberRemoved(deadMember);
      }
      if (node.isMaster()) {
        logger.log(Level.FINEST,deadMember + " is dead. Sending remove to all other members.");
        invokeMemberRemoveOperation(deadMember);
      }
      sendMembershipEventNotifications(deadMember,false);
    }
  }
  finally {
    lock.unlock();
  }
}
