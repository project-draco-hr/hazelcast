{
  if (invocationRegistry.size() == 0) {
    return;
  }
  long now=Clock.currentTimeMillis();
  int backupTimeouts=0;
  int invocationTimeouts=0;
  int invocationCount=0;
  Set<Map.Entry<Long,Invocation>> invocations=invocationRegistry.entrySet();
  Iterator<Map.Entry<Long,Invocation>> iterator=invocations.iterator();
  while (iterator.hasNext()) {
    invocationCount++;
    if (shutdown) {
      return;
    }
    Map.Entry<Long,Invocation> entry=iterator.next();
    Long callId=entry.getKey();
    Invocation invocation=entry.getValue();
    if (!callIdMatches(callId,invocation) && isDone(invocation)) {
      iterator.remove();
      continue;
    }
    if (checkInvocationTimeout(invocation)) {
      invocationTimeouts++;
    }
    if (checkBackupTimeout(invocation)) {
      backupTimeouts++;
    }
  }
  backupTimeoutsCount.inc(backupTimeouts);
  normalTimeoutsCount.inc(invocationTimeouts);
  log(invocationCount,backupTimeouts,invocationTimeouts);
}
