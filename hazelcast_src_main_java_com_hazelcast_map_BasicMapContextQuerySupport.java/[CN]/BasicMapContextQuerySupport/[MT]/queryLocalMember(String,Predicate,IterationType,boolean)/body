{
  checkNotPagingPredicate(predicate);
  final NodeEngine nodeEngine=this.nodeEngine;
  final List<Integer> partitionIds=getLocalPartitionIds(nodeEngine);
  final SerializationService serializationService=nodeEngine.getSerializationService();
  final Set result=new QueryResultSet(serializationService,iterationType,dataResult);
  try {
    final Future future=queryOnLocalMember(mapName,predicate,nodeEngine);
    final List<Future> futures=Collections.singletonList(future);
    addResultsOfPredicate(futures,result,partitionIds);
    if (partitionIds.isEmpty()) {
      return result;
    }
  }
 catch (  Throwable t) {
    nodeEngine.getLogger(getClass()).warning("Could not get results",t);
  }
  try {
    List<Future> futures=queryOnPartitions(mapName,predicate,partitionIds,nodeEngine);
    addResultsOfPredicate(futures,result,partitionIds);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
  return result;
}
