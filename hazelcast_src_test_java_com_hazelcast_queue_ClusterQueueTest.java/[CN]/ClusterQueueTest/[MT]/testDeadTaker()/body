{
  Config config=new Config();
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  config.addListenerConfig(new ListenerConfig().setImplementation(new MembershipListener(){
    public void memberAdded(    MembershipEvent membershipEvent){
    }
    public void memberRemoved(    MembershipEvent membershipEvent){
      shutdownLatch.countDown();
    }
    public void memberAttributeChanged(    MemberAttributeEvent memberAttributeEvent){
    }
  }
));
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  final HazelcastInstance[] instances=factory.newInstances(config);
  final HazelcastInstance h1=instances[0];
  final HazelcastInstance h2=instances[1];
  warmUpPartitions(h1,h2);
  final IQueue q1=h1.getQueue("default");
  final IQueue q2=h2.getQueue("default");
  final CountDownLatch startLatch=new CountDownLatch(1);
  new Thread(new Runnable(){
    public void run(){
      try {
        assertTrue(startLatch.await(10,TimeUnit.SECONDS));
        Thread.sleep(5000);
        h2.getLifecycleService().terminate();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
  new Thread(new Runnable(){
    public void run(){
      try {
        startLatch.countDown();
        final Object o=q2.take();
        fail("Should not be able to take: " + o);
      }
 catch (      HazelcastInstanceNotActiveException ignored) {
      }
catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
  assertTrue(shutdownLatch.await(1,TimeUnit.MINUTES));
  q1.offer("item");
  assertEquals(1,q1.size());
  assertEquals("item",q1.poll());
}
