{
  NodeEngine nodeEngine=getNodeEngine();
  XAService xaService=getService();
  OperationService operationService=nodeEngine.getOperationService();
  ClusterService clusterService=nodeEngine.getClusterService();
  Collection<Member> memberList=clusterService.getMembers();
  List<Future<SerializableList>> futureList=new ArrayList<Future<SerializableList>>();
  for (  Member member : memberList) {
    if (member.localMember()) {
      continue;
    }
    CollectRemoteTransactionsOperation op=new CollectRemoteTransactionsOperation();
    Address address=member.getAddress();
    InternalCompletableFuture<SerializableList> future=operationService.invokeOnTarget(SERVICE_NAME,op,address);
    futureList.add(future);
  }
  HashSet<SerializableXID> xids=new HashSet<SerializableXID>();
  xids.addAll(xaService.getPreparedXids());
  for (  Future<SerializableList> future : futureList) {
    try {
      SerializableList xidSet=future.get();
      for (      Data xidData : xidSet) {
        SerializableXID xid=nodeEngine.toObject(xidData);
        xids.add(xid);
      }
    }
 catch (    InterruptedException e) {
      throw new XAException(XAException.XAER_RMERR);
    }
catch (    MemberLeftException e) {
      logger.warning("Member left while recovering",e);
    }
catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      if (cause instanceof HazelcastInstanceNotActiveException || cause instanceof TargetNotMemberException) {
        logger.warning("Member left while recovering",e);
      }
 else {
        throw new XAException(XAException.XAER_RMERR);
      }
    }
  }
  return xids.toArray(new SerializableXID[xids.size()]);
}
