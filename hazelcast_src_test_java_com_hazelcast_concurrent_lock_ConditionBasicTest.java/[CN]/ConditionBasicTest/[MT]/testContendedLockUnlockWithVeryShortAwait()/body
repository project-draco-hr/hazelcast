{
  String lockName=newName();
  String conditionName=newName();
  final ILock lock=instance.getLock(lockName);
  final ICondition condition=lock.newCondition(conditionName);
  final AtomicBoolean running=new AtomicBoolean(true);
  final AtomicReference<Exception> errorRef=new AtomicReference<Exception>();
  final int numberOfThreads=8;
  final CountDownLatch finalLatch=new CountDownLatch(numberOfThreads);
  ExecutorService ex=Executors.newCachedThreadPool();
  for (int i=0; i < numberOfThreads; i++) {
    ex.execute(new Runnable(){
      @Override public void run(){
        try {
          while (running.get()) {
            lock.lock();
            try {
              condition.await(1,TimeUnit.MILLISECONDS);
            }
 catch (            InterruptedException ignored) {
            }
catch (            IllegalStateException e) {
              errorRef.set(e);
              running.set(false);
            }
 finally {
              lock.unlock();
            }
          }
        }
  finally {
          finalLatch.countDown();
        }
      }
    }
);
  }
  ex.execute(new Runnable(){
    @Override public void run(){
      LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(10));
      running.set(false);
    }
  }
);
  try {
    finalLatch.await(30,TimeUnit.SECONDS);
    assertNull("await() on condition threw IllegalStateException!",errorRef.get());
  }
  finally {
    ex.shutdownNow();
  }
}
