{
  String lockName=newName();
  String conditionName=newName();
  final ILock lock=callerInstance.getLock(lockName);
  final ICondition condition=lock.newCondition(conditionName);
  final AtomicInteger count=new AtomicInteger(0);
  final CountDownLatch threadLockedTheLock=new CountDownLatch(1);
  Thread t=new Thread(new Runnable(){
    public void run(){
      try {
        lock.lock();
        if (lock.isLockedByCurrentThread()) {
          count.incrementAndGet();
        }
        threadLockedTheLock.countDown();
        condition.await();
        if (lock.isLockedByCurrentThread()) {
          count.incrementAndGet();
        }
      }
 catch (      InterruptedException ignored) {
      }
 finally {
        lock.unlock();
      }
    }
  }
);
  t.start();
  threadLockedTheLock.await();
  assertUnlockedEventually(lock,THIRTY_SECONDS);
  signal(lock,condition);
  assertAtomicEventually("Locks was not always locked by the expected thread",2,count,THIRTY_SECONDS);
}
