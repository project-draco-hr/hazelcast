{
  address.writeData(out);
  memberHealthStats.writeData(out);
  out.writeInt(mapStats.size());
  for (  Map.Entry<String,LocalMapStatsImpl> entry : mapStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(multiMapStats.size());
  for (  Map.Entry<String,LocalMapStatsImpl> entry : multiMapStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(queueStats.size());
  for (  Map.Entry<String,LocalQueueStatsImpl> entry : queueStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(topicStats.size());
  for (  Map.Entry<String,LocalTopicStatsImpl> entry : topicStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(atomicNumberStats.size());
  for (  Map.Entry<String,LocalAtomicLongStatsImpl> entry : atomicNumberStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(countDownLatchStats.size());
  for (  Map.Entry<String,LocalCountDownLatchStatsImpl> entry : countDownLatchStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(semaphoreStats.size());
  for (  Map.Entry<String,LocalSemaphoreStatsImpl> entry : semaphoreStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(runtimeProps.size());
  for (  Map.Entry<String,Long> entry : runtimeProps.entrySet()) {
    out.writeUTF(entry.getKey());
    out.writeLong(entry.getValue());
  }
  out.writeInt(internalThroughputStats.size());
  for (  Map.Entry<String,LocalExecutorStatsImpl> entry : internalThroughputStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(throughputStats.size());
  for (  Map.Entry<String,LocalExecutorStatsImpl> entry : throughputStats.entrySet()) {
    out.writeUTF(entry.getKey());
    entry.getValue().writeData(out);
  }
  out.writeInt(lsPartitions.size());
  for (  Integer lsPartition : lsPartitions) {
    out.writeInt(lsPartition);
  }
}
