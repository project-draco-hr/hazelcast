{
  address=getString(json,"address");
  for (  JsonObject.Member next : getObject(json,"mapStats")) {
    LocalMapStatsImpl stats=new LocalMapStatsImpl();
    stats.fromJson(next.getValue().asObject());
    mapStats.put(next.getName(),stats);
  }
  for (  JsonObject.Member next : getObject(json,"multiMapStats")) {
    LocalMultiMapStatsImpl stats=new LocalMultiMapStatsImpl();
    stats.fromJson(next.getValue().asObject());
    multiMapStats.put(next.getName(),stats);
  }
  for (  JsonObject.Member next : getObject(json,"replicatedMapStats",new JsonObject())) {
    LocalReplicatedMapStats stats=new LocalReplicatedMapStatsImpl();
    stats.fromJson(next.getValue().asObject());
    replicatedMapStats.put(next.getName(),stats);
  }
  for (  JsonObject.Member next : getObject(json,"queueStats")) {
    LocalQueueStatsImpl stats=new LocalQueueStatsImpl();
    stats.fromJson(next.getValue().asObject());
    queueStats.put(next.getName(),stats);
  }
  for (  JsonObject.Member next : getObject(json,"topicStats")) {
    LocalTopicStatsImpl stats=new LocalTopicStatsImpl();
    stats.fromJson(next.getValue().asObject());
    topicStats.put(next.getName(),stats);
  }
  for (  JsonObject.Member next : getObject(json,"executorStats")) {
    LocalExecutorStatsImpl stats=new LocalExecutorStatsImpl();
    stats.fromJson(next.getValue().asObject());
    executorStats.put(next.getName(),stats);
  }
  for (  JsonObject.Member next : getObject(json,"cacheStats",new JsonObject())) {
    LocalCacheStats stats=new LocalCacheStatsImpl();
    stats.fromJson(next.getValue().asObject());
    cacheStats.put(next.getName(),stats);
  }
  for (  JsonObject.Member next : getObject(json,"wanStats",new JsonObject())) {
    LocalWanStats stats=new LocalWanStatsImpl();
    stats.fromJson(next.getValue().asObject());
    wanStats.put(next.getName(),stats);
  }
  for (  JsonObject.Member next : getObject(json,"runtimeProps")) {
    runtimeProps.put(next.getName(),next.getValue().asLong());
  }
  final JsonArray jsonClients=getArray(json,"clients");
  for (  JsonValue jsonClient : jsonClients) {
    final ClientEndPointDTO client=new ClientEndPointDTO();
    client.fromJson(jsonClient.asObject());
    clients.add(client);
  }
  beans=new MXBeansDTO();
  beans.fromJson(getObject(json,"beans"));
  JsonObject jsonMemoryStats=getObject(json,"memoryStats",null);
  if (jsonMemoryStats != null) {
    memoryStats.fromJson(jsonMemoryStats);
  }
  JsonObject jsonOperationStats=getObject(json,"operationStats",null);
  if (jsonOperationStats != null) {
    operationStats.fromJson(jsonOperationStats);
  }
  JsonObject jsonMemberPartitionState=getObject(json,"memberPartitionState",null);
  if (jsonMemberPartitionState != null) {
    memberPartitionState=new MemberPartitionStateImpl();
    memberPartitionState.fromJson(jsonMemberPartitionState);
  }
}
