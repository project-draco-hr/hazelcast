{
  address=getString(json,"address");
  final Iterator<JsonObject.Member> mapStatsIterator=getObject(json,"mapStats").iterator();
  while (mapStatsIterator.hasNext()) {
    final JsonObject.Member next=mapStatsIterator.next();
    LocalMapStatsImpl stats=new LocalMapStatsImpl();
    stats.fromJson(next.getValue().asObject());
    mapStats.put(next.getName(),stats);
  }
  final Iterator<JsonObject.Member> multiMapStatsIterator=getObject(json,"multiMapStats").iterator();
  while (multiMapStatsIterator.hasNext()) {
    final JsonObject.Member next=multiMapStatsIterator.next();
    LocalMultiMapStatsImpl stats=new LocalMultiMapStatsImpl();
    stats.fromJson(next.getValue().asObject());
    multiMapStats.put(next.getName(),stats);
  }
  final Iterator<JsonObject.Member> queueStatsIterator=getObject(json,"queueStats").iterator();
  while (queueStatsIterator.hasNext()) {
    final JsonObject.Member next=queueStatsIterator.next();
    LocalQueueStatsImpl stats=new LocalQueueStatsImpl();
    stats.fromJson(next.getValue().asObject());
    queueStats.put(next.getName(),stats);
  }
  final Iterator<JsonObject.Member> topicStatsIterator=getObject(json,"topicStats").iterator();
  while (topicStatsIterator.hasNext()) {
    final JsonObject.Member next=topicStatsIterator.next();
    LocalTopicStatsImpl stats=new LocalTopicStatsImpl();
    stats.fromJson(next.getValue().asObject());
    topicStats.put(next.getName(),stats);
  }
  final Iterator<JsonObject.Member> executorStatsIterator=getObject(json,"executorStats").iterator();
  while (executorStatsIterator.hasNext()) {
    final JsonObject.Member next=executorStatsIterator.next();
    LocalExecutorStatsImpl stats=new LocalExecutorStatsImpl();
    stats.fromJson(next.getValue().asObject());
    executorStats.put(next.getName(),stats);
  }
  final Iterator<JsonObject.Member> propsIterator=getObject(json,"runtimeProps").iterator();
  while (propsIterator.hasNext()) {
    final JsonObject.Member next=propsIterator.next();
    runtimeProps.put(next.getName(),next.getValue().asLong());
  }
  final JsonArray jsonPartitions=getArray(json,"partitions");
  for (  JsonValue jsonPartition : jsonPartitions) {
    partitions.add(jsonPartition.asInt());
  }
  final JsonArray jsonClients=getArray(json,"clients");
  for (  JsonValue jsonClient : jsonClients) {
    final SerializableClientEndPoint client=new SerializableClientEndPoint();
    client.fromJson(jsonClient.asObject());
    clients.add(client);
  }
  beans=new SerializableMXBeans();
  beans.fromJson(getObject(json,"beans"));
}
