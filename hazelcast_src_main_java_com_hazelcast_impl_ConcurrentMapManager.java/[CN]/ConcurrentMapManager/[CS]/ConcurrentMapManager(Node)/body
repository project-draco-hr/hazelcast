{
  super(node);
  recordFactory=node.initializer.getRecordFactory();
  storeExecutor=node.executorManager.newParallelExecutor(node.groupProperties.EXECUTOR_STORE_THREAD_COUNT.getInteger());
  evictionExecutor=node.executorManager.newParallelExecutor(node.groupProperties.EXECUTOR_STORE_THREAD_COUNT.getInteger());
  PARTITION_COUNT=node.groupProperties.CONCURRENT_MAP_PARTITION_COUNT.getInteger();
  MAX_BACKUP_COUNT=MapConfig.MAX_BACKUP_COUNT;
  int removeDelaySeconds=node.groupProperties.REMOVE_DELAY_SECONDS.getInteger();
  if (removeDelaySeconds <= 0) {
    logger.log(Level.WARNING,GroupProperties.PROP_REMOVE_DELAY_SECONDS + " must be greater than zero. Setting to 1.");
    removeDelaySeconds=1;
  }
  GLOBAL_REMOVE_DELAY_MILLIS=removeDelaySeconds * 1000L;
  LOG_STATE=node.groupProperties.LOG_STATE.getBoolean();
  maps=new ConcurrentHashMap<String,CMap>(10,0.75f,1);
  mapCaches=new ConcurrentHashMap<String,NearCache>(10,0.75f,1);
  partitionManager=new PartitionManager(this);
  partitionServiceImpl=new PartitionServiceImpl(this);
  node.executorManager.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){
    public void run(){
      startCleanup(true,false);
    }
  }
,1,1,TimeUnit.SECONDS);
  registerPacketProcessor(CONCURRENT_MAP_GET_MAP_ENTRY,new GetMapEntryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_GET_DATA_RECORD_ENTRY,new GetDataRecordEntryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_GET,new GetOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ASYNC_MERGE,new AsyncMergePacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_WAN_MERGE,new WanMergePacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_MERGE,new MergeOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_TRY_PUT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_SET,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_AND_UNLOCK,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_IF_ABSENT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REPLACE_IF_NOT_NULL,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_TRANSIENT,new PutTransientOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REPLACE_IF_SAME,new ReplaceOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_MULTI,new PutMultiOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE,new RemoveOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_EVICT,new EvictOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_IF_SAME,new RemoveIfSameOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_ITEM,new RemoveItemOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_PUT,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_ADD,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_REMOVE_MULTI,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_REMOVE,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_LOCK,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_LOCK,new LockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_TRY_LOCK_AND_GET,new LockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_UNLOCK,new UnlockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_FORCE_UNLOCK,new ForceUnlockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_LOCK_MAP,new LockMapOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_UNLOCK_MAP,new LockMapOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_MULTI,new RemoveMultiOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ADD_TO_LIST,new AddOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ADD_TO_SET,new AddOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS_KEY,new ContainsKeyOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS_ENTRY,new ContainsEntryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS_VALUE,new ContainsValueOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_VALUE_COUNT,new ValueCountOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_INVALIDATE,new InvalidateOperationHandler());
  registerPacketProcessor(ATOMIC_NUMBER_ADD_AND_GET,new AtomicNumberAddAndGetOperationHandler());
  registerPacketProcessor(ATOMIC_NUMBER_COMPARE_AND_SET,new AtomicNumberCompareAndSetOperationHandler());
  registerPacketProcessor(ATOMIC_NUMBER_GET_AND_ADD,new AtomicNumberGetAndAddOperationHandler());
  registerPacketProcessor(ATOMIC_NUMBER_GET_AND_SET,new AtomicNumberGetAndSetOperationHandler());
  registerPacketProcessor(COUNT_DOWN_LATCH_AWAIT,new CountDownLatchAwaitOperationHandler());
  registerPacketProcessor(COUNT_DOWN_LATCH_COUNT_DOWN,new CountDownLatchCountDownOperationHandler());
  registerPacketProcessor(COUNT_DOWN_LATCH_DESTROY,new CountDownLatchDestroyOperationHandler());
  registerPacketProcessor(COUNT_DOWN_LATCH_GET_COUNT,new CountDownLatchGetCountOperationHandler());
  registerPacketProcessor(COUNT_DOWN_LATCH_GET_OWNER,new CountDownLatchGetOwnerOperationHandler());
  registerPacketProcessor(COUNT_DOWN_LATCH_SET_COUNT,new CountDownLatchSetCountOperationHandler());
  registerPacketProcessor(SEMAPHORE_ATTACH_DETACH_PERMITS,new SemaphoreAttachDetachOperationHandler());
  registerPacketProcessor(SEMAPHORE_CANCEL_ACQUIRE,new SemaphoreCancelAcquireOperationHandler());
  registerPacketProcessor(SEMAPHORE_DESTROY,new SemaphoreDestroyOperationHandler());
  registerPacketProcessor(SEMAPHORE_DRAIN_PERMITS,new SemaphoreDrainOperationHandler());
  registerPacketProcessor(SEMAPHORE_GET_ATTACHED_PERMITS,new SemaphoreGetAttachedOperationHandler());
  registerPacketProcessor(SEMAPHORE_GET_AVAILABLE_PERMITS,new SemaphoreGetAvailableOperationHandler());
  registerPacketProcessor(SEMAPHORE_REDUCE_PERMITS,new SemaphoreReduceOperationHandler());
  registerPacketProcessor(SEMAPHORE_RELEASE,new SemaphoreReleaseOperationHandler());
  registerPacketProcessor(SEMAPHORE_TRY_ACQUIRE,new SemaphoreTryAcquireOperationHandler());
}
