{
  super(node);
  PARTITION_COUNT=node.groupProperties.CONCURRENT_MAP_PARTITION_COUNT.getInteger();
  GLOBAL_REMOVE_DELAY_MILLIS=node.groupProperties.REMOVE_DELAY_SECONDS.getLong() * 1000L;
  CLEANUP_DELAY_MILLIS=node.groupProperties.CLEANUP_DELAY_SECONDS.getLong() * 1000L;
  LOG_STATE=node.groupProperties.LOG_STATE.getBoolean();
  blocks=new Block[PARTITION_COUNT];
  maps=new ConcurrentHashMap<String,CMap>(10);
  mapLocallyOwnedMaps=new ConcurrentHashMap<String,LocallyOwnedMap>(10);
  mapCaches=new ConcurrentHashMap<String,MapNearCache>(10);
  orderedExecutionTasks=new OrderedExecutionTask[PARTITION_COUNT];
  partitionManager=new PartitionManager(this);
  for (int i=0; i < PARTITION_COUNT; i++) {
    orderedExecutionTasks[i]=new OrderedExecutionTask();
  }
  node.clusterService.registerPeriodicRunnable(new FallThroughRunnable(){
    public void doRun(){
      logState();
      long now=System.currentTimeMillis();
      if (now > nextCleanup) {
        nextCleanup=Long.MAX_VALUE;
        executeLocally(new FallThroughRunnable(){
          public void doRun(){
            Collection<CMap> cmaps=maps.values();
            for (            CMap cmap : cmaps) {
              cmap.startCleanup();
            }
            nextCleanup=System.currentTimeMillis() + CLEANUP_DELAY_MILLIS;
          }
        }
);
      }
    }
  }
);
  node.clusterService.registerPeriodicRunnable(partitionManager);
  registerPacketProcessor(CONCURRENT_MAP_GET_MAP_ENTRY,new GetMapEnryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_GET,new GetOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_TRY_PUT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_IF_ABSENT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REPLACE_IF_NOT_NULL,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REPLACE_IF_SAME,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_MULTI,new PutMultiOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE,new RemoveOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_EVICT,new EvictOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_IF_SAME,new RemoveOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_ITEM,new RemoveItemOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_PUT,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_ADD,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_REMOVE_MULTI,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_REMOVE,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_LOCK,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_LOCK,new LockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_LOCK_AND_GET_VALUE,new LockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_UNLOCK,new UnlockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_LOCK_MAP,new LockMapOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_UNLOCK_MAP,new LockMapOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_ENTRIES,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_VALUES,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_KEYS,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_KEYS_ALL,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_MIGRATE_RECORD,new MigrationOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_MULTI,new RemoveMultiOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ADD_TO_LIST,new AddOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ADD_TO_SET,new AddOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_SIZE,new SizeOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS,new ContainsOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS_VALUE,new ContainsValueOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BLOCK_INFO,new BlockInfoOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BLOCKS,new BlocksOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BLOCK_MIGRATION_CHECK,new BlockMigrationCheckHandler());
  registerPacketProcessor(CONCURRENT_MAP_VALUE_COUNT,new ValueCountOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_INVALIDATE,new InvalidateOperationHandler());
}
