{
  super(node);
  blocks=new Block[BLOCK_COUNT];
  maps=new ConcurrentHashMap<String,CMap>(10);
  mapLocallyOwnedMaps=new ConcurrentHashMap<String,LocallyOwnedMap>(10);
  orderedExecutionTasks=new OrderedExecutionTask[BLOCK_COUNT];
  for (int i=0; i < BLOCK_COUNT; i++) {
    orderedExecutionTasks[i]=new OrderedExecutionTask();
  }
  node.clusterService.registerPeriodicRunnable(new Runnable(){
    public void run(){
      Collection<CMap> cmaps=maps.values();
      for (      CMap cmap : cmaps) {
        cmap.startRemove();
        if (cmap.ttl != 0) {
          cmap.startEviction();
        }
        if (cmap.writeDelaySeconds > 0) {
          cmap.startAsyncStoreWrite();
        }
      }
    }
  }
);
  registerPacketProcessor(CONCURRENT_MAP_GET_MAP_ENTRY,new GetMapEnryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_GET,new GetOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_IF_ABSENT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REPLACE_IF_NOT_NULL,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_MULTI,new PutMultiOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE,new RemoveOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_IF_SAME,new RemoveOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_ITEM,new RemoveItemOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_PUT,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_ADD,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_REMOVE_MULTI,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_REMOVE,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_LOCK,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_LOCK,new LockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_LOCK_RETURN_OLD,new LockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_UNLOCK,new UnlockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_ENTRIES,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_VALUES,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_KEYS,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_KEYS_ALL,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_MIGRATE_RECORD,new MigrationOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_MULTI,new RemoveMultiOperationHander());
  registerPacketProcessor(CONCURRENT_MAP_ADD_TO_LIST,new AddOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ADD_TO_SET,new AddOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_SIZE,new SizeOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS,new ContainsOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS_VALUE,new ContainsValueOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BLOCK_INFO,new BlockInfoOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BLOCKS,new BlocksOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_MIGRATION_COMPLETE,new MigrationCompleteOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_VALUE_COUNT,new ValueCountOperationHandler());
}
