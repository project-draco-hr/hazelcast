{
  super(node);
  storeExecutor=node.executorManager.newParallelExecutor(node.groupProperties.EXECUTOR_STORE_THREAD_COUNT.getInteger());
  evictionExecutor=node.executorManager.newParallelExecutor(node.groupProperties.EXECUTOR_STORE_THREAD_COUNT.getInteger());
  PARTITION_COUNT=node.groupProperties.CONCURRENT_MAP_PARTITION_COUNT.getInteger();
  GLOBAL_REMOVE_DELAY_MILLIS=node.groupProperties.REMOVE_DELAY_SECONDS.getLong() * 1000L;
  CLEANUP_DELAY_MILLIS=node.groupProperties.CLEANUP_DELAY_SECONDS.getLong() * 1000L;
  LOG_STATE=node.groupProperties.LOG_STATE.getBoolean();
  blocks=new Block[PARTITION_COUNT];
  maps=new ConcurrentHashMap<String,CMap>(10,0.75f,1);
  mapCaches=new ConcurrentHashMap<String,NearCache>(10,0.75f,1);
  orderedExecutionTasks=new OrderedExecutionTask[PARTITION_COUNT];
  partitionManager=new PartitionManager(this);
  for (int i=0; i < PARTITION_COUNT; i++) {
    orderedExecutionTasks[i]=new OrderedExecutionTask();
  }
  node.clusterService.registerPeriodicRunnable(new FallThroughRunnable(){
    public void doRun(){
      logState();
      long now=System.currentTimeMillis();
      Collection<CMap> cmaps=maps.values();
      for (      final CMap cmap : cmaps) {
        if (cmap.cleanupState == CMap.CleanupState.SHOULD_CLEAN) {
          executeCleanup(cmap,true);
        }
      }
      if (now > nextCleanup) {
        for (        final CMap cmap : cmaps) {
          if (cmap.cleanupState == CMap.CleanupState.NONE) {
            executeCleanup(cmap,false);
          }
        }
        nextCleanup=now + CLEANUP_DELAY_MILLIS;
      }
    }
  }
);
  node.clusterService.registerPeriodicRunnable(partitionManager);
  registerPacketProcessor(CONCURRENT_MAP_GET_MAP_ENTRY,new GetMapEntryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_GET_DATA_RECORD_ENTRY,new GetDataRecordEntryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_GET,new GetOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ASYNC_MERGE,new AsyncMergePacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_WAN_MERGE,new WanMergePacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_MERGE,new MergeOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_TRY_PUT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_SET,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_AND_UNLOCK,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_TRANSIENT,new PutTransientOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_IF_ABSENT,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REPLACE_IF_NOT_NULL,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REPLACE_IF_SAME,new PutOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_PUT_MULTI,new PutMultiOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE,new RemoveOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_EVICT,new EvictOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_IF_SAME,new RemoveOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_ITEM,new RemoveItemOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_PUT,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_ADD,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_REMOVE_MULTI,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_REMOVE,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_BACKUP_LOCK,new BackupPacketProcessor());
  registerPacketProcessor(CONCURRENT_MAP_LOCK,new LockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_TRY_LOCK_AND_GET,new LockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_UNLOCK,new UnlockOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_LOCK_MAP,new LockMapOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_UNLOCK_MAP,new LockMapOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_ENTRIES,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_VALUES,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_KEYS,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ITERATE_KEYS_ALL,new QueryOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_MIGRATE_RECORD,new MigrationOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_REMOVE_MULTI,new RemoveMultiOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ADD_TO_LIST,new AddOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_ADD_TO_SET,new AddOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_SIZE,new SizeOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS,new ContainsOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_CONTAINS_VALUE,new ContainsValueOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BLOCK_INFO,new BlockInfoOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BLOCKS,new BlocksOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_BLOCK_MIGRATION_CHECK,new BlockMigrationCheckHandler());
  registerPacketProcessor(CONCURRENT_MAP_VALUE_COUNT,new ValueCountOperationHandler());
  registerPacketProcessor(CONCURRENT_MAP_INVALIDATE,new InvalidateOperationHandler());
  registerPacketProcessor(ATOMIC_NUMBER_GET_AND_SET,new AtomicOperationHandler());
  registerPacketProcessor(ATOMIC_NUMBER_GET_AND_ADD,new AtomicOperationHandler());
  registerPacketProcessor(ATOMIC_NUMBER_COMPARE_AND_SET,new AtomicOperationHandler());
  registerPacketProcessor(ATOMIC_NUMBER_ADD_AND_GET,new AtomicOperationHandler());
  registerPacketProcessor(SEMAPHORE_ACQUIRE,new SemaphoreOperationHandler());
  registerPacketProcessor(SEMAPHORE_RELEASE,new SemaphoreOperationHandler());
  registerPacketProcessor(SEMAPHORE_AVAILABLE_PERMITS,new SemaphoreOperationHandler());
  registerPacketProcessor(SEMAPHORE_DRAIN_PERMITS,new SemaphoreOperationHandler());
  registerPacketProcessor(SEMAPHORE_REDUCE_PERMITS,new SemaphoreOperationHandler());
}
