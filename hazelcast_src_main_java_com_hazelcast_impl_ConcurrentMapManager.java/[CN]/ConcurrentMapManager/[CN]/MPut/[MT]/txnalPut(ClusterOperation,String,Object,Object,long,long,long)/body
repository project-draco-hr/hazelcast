{
  ThreadContext threadContext=ThreadContext.get();
  TransactionImpl txn=threadContext.getTransaction();
  SystemLogService css=node.getSystemLogService();
  if (css.shouldLog(CS_INFO)) {
    css.logObject(MPut.this,CS_INFO,operation);
  }
  if (txn != null && txn.getStatus() == Transaction.TXN_STATUS_ACTIVE) {
    if (!txn.has(name,key)) {
      MLock mlock=new MLock();
      boolean locked=mlock.lockAndGetValue(name,key,DEFAULT_TXN_TIMEOUT);
      if (!locked)       throwCME(key);
      Object oldObject=null;
      Data oldValue=mlock.oldValue;
      if (oldValue != null) {
        oldObject=threadContext.isClient() ? oldValue : threadContext.toObject(oldValue);
      }
      if (operation == CONCURRENT_MAP_PUT_IF_ABSENT && oldObject != null) {
        txn.attachPutOp(name,key,oldValue,0,ttl,false);
      }
 else {
        txn.attachPutOp(name,key,toData(value),0,ttl,(oldObject == null));
      }
      if (operation == CONCURRENT_MAP_TRY_PUT) {
        return Boolean.TRUE;
      }
      return oldObject;
    }
 else {
      if (operation == CONCURRENT_MAP_PUT_IF_ABSENT) {
        Data existingValue=txn.get(name,key);
        if (existingValue != null) {
          return threadContext.isClient() ? existingValue : threadContext.toObject(existingValue);
        }
      }
      Data resultData=txn.attachPutOp(name,key,toData(value),false);
      if (operation == CONCURRENT_MAP_TRY_PUT) {
        return Boolean.TRUE;
      }
      return threadContext.isClient() ? resultData : threadContext.toObject(resultData);
    }
  }
 else {
    setLocal(operation,name,key,value,timeout,ttl);
    request.txnId=txnId;
    setIndexValues(request,value);
    if (operation == CONCURRENT_MAP_TRY_PUT || operation == CONCURRENT_MAP_SET || operation == CONCURRENT_MAP_PUT_AND_UNLOCK || operation == CONCURRENT_MAP_PUT_TRANSIENT) {
      request.setBooleanRequest();
      Data valueData=request.value;
      doOp();
      Boolean successful=getResultAsBoolean();
      if (successful) {
        request.value=valueData;
        if (operation == CONCURRENT_MAP_PUT_AND_UNLOCK) {
          backup(CONCURRENT_MAP_BACKUP_PUT_AND_UNLOCK);
        }
 else {
          backup(CONCURRENT_MAP_BACKUP_PUT);
        }
      }
      return successful;
    }
 else {
      request.setObjectRequest();
      if (css.shouldLog(CS_TRACE)) {
        css.logObject(MPut.this,CS_TRACE,"Calling doOp");
      }
      doOp();
      if (css.shouldLog(CS_TRACE)) {
        css.logObject(MPut.this,CS_TRACE,"Done doOp");
      }
      Object returnObject=getResultAsObject();
      if (css.shouldLog(CS_INFO)) {
        css.logObject(MPut.this,CS_INFO,returnObject);
      }
      if (operation == CONCURRENT_MAP_REPLACE_IF_NOT_NULL && returnObject == null) {
        return null;
      }
      if (returnObject instanceof AddressAwareException) {
        rethrowException(operation,(AddressAwareException)returnObject);
      }
      request.longValue=Long.MIN_VALUE;
      backup(CONCURRENT_MAP_BACKUP_PUT);
      if (css.shouldLog(CS_TRACE)) {
        css.logObject(MPut.this,CS_TRACE,"Backups completed returning result");
      }
      return returnObject;
    }
  }
}
