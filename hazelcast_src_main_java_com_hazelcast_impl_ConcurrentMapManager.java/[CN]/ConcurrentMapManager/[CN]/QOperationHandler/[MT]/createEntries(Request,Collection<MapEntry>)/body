{
  CMap cmap=getMap(request.name);
  Pairs pairs=new Pairs();
  long now=System.currentTimeMillis();
  for (  MapEntry mapEntry : colRecords) {
    Record record=(Record)mapEntry;
    if (record.isActive() && record.isValid(now)) {
      if (record.getKey() == null || record.getKey().size() == 0) {
        throw new RuntimeException("Key cannot be null or zero-size: " + record.getKey());
      }
      Block block=blocks[record.getBlockId()];
      if (thisAddress.equals(block.getOwner())) {
        if (record.getValue() != null || request.operation == CONCURRENT_MAP_ITERATE_KEYS_ALL) {
          pairs.addKeyValue(new KeyValue(record.getKey(),null));
        }
 else         if (record.getCopyCount() > 0) {
          for (int i=0; i < record.getCopyCount(); i++) {
            pairs.addKeyValue(new KeyValue(record.getKey(),null));
          }
        }
 else         if (record.getLsValues() != null) {
          int size=record.getLsValues().size();
          if (size > 0) {
            if (request.operation == CONCURRENT_MAP_ITERATE_KEYS) {
              pairs.addKeyValue(new KeyValue(record.getKey(),null));
            }
 else {
              for (int i=0; i < size; i++) {
                Data value=record.getLsValues().get(i);
                pairs.addKeyValue(new KeyValue(record.getKey(),value));
              }
            }
          }
        }
      }
    }
 else {
      if (!record.isEvictable()) {
        cmap.scheduleForEviction(record);
      }
    }
  }
  Data dataEntries=toData(pairs);
  request.longValue=pairs.size();
  request.response=dataEntries;
}
