{
  ClusterService cs=nodeEngine.getClusterService();
  OperationService os=nodeEngine.getOperationService();
  Collection<Member> members=cs.getMembers();
  List<V> results=returnsResponse ? new ArrayList<V>() : null;
  List<Exception> exceptions=new ArrayList<Exception>(members.size());
  for (  Member member : members) {
    try {
      Operation operation=operationFactory.createOperation();
      if (cs.getThisAddress().equals(member.getAddress())) {
        operation.setNodeEngine(nodeEngine);
        operation.setCallerUuid(nodeEngine.getLocalMember().getUuid());
        operation.setService(mapReduceService);
        operation.run();
        if (returnsResponse) {
          V response=(V)operation.getResponse();
          if (response != null) {
            results.add(response);
          }
        }
      }
 else {
        if (returnsResponse) {
          InvocationBuilder ib=os.createInvocationBuilder(SERVICE_NAME,operation,member.getAddress());
          V response=(V)ib.invoke().getSafely();
          if (response != null) {
            results.add(response);
          }
        }
 else {
          os.send(operation,member.getAddress());
        }
      }
    }
 catch (    Exception e) {
      exceptions.add(e);
    }
  }
  if (exceptions.size() > 0) {
    throw new RemoteMapReduceException("Exception on mapreduce operation",exceptions);
  }
  return results;
}
