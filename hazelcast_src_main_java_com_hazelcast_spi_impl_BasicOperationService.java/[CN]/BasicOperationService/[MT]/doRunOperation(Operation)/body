{
  executedOperationsCount.incrementAndGet();
  RemoteCallKey callKey=null;
  try {
    if (isCallTimedOut(op)) {
      Object response=new CallTimeoutException(op.getClass().getName(),op.getInvocationTime(),op.getCallTimeout());
      op.getResponseHandler().sendResponse(response);
      return;
    }
    callKey=beforeCallExecution(op);
    final int partitionId=op.getPartitionId();
    if (op instanceof PartitionAwareOperation) {
      if (partitionId < 0) {
        throw new IllegalArgumentException("Partition id cannot be negative! -> " + partitionId);
      }
      final InternalPartition internalPartition=nodeEngine.getPartitionService().getPartition(partitionId);
      if (retryDuringMigration(op) && internalPartition.isMigrating()) {
        throw new PartitionMigratingException(node.getThisAddress(),partitionId,op.getClass().getName(),op.getServiceName());
      }
      final Address owner=internalPartition.getReplicaAddress(op.getReplicaIndex());
      if (op.validatesTarget() && !node.getThisAddress().equals(owner)) {
        throw new WrongTargetException(node.getThisAddress(),owner,partitionId,op.getReplicaIndex(),op.getClass().getName(),op.getServiceName());
      }
    }
    OperationAccessor.setStartTime(op,Clock.currentTimeMillis());
    op.beforeRun();
    if (op instanceof WaitSupport) {
      WaitSupport waitSupport=(WaitSupport)op;
      if (waitSupport.shouldWait()) {
        nodeEngine.waitNotifyService.await(waitSupport);
        return;
      }
    }
    op.run();
    final boolean returnsResponse=op.returnsResponse();
    Object response=null;
    if (op instanceof BackupAwareOperation) {
      final BackupAwareOperation backupAwareOp=(BackupAwareOperation)op;
      int syncBackupCount=0;
      if (backupAwareOp.shouldBackup()) {
        syncBackupCount=sendBackups(backupAwareOp);
      }
      if (returnsResponse) {
        response=new NormalResponse(op.getResponse(),op.getCallId(),syncBackupCount,op.isUrgent());
      }
    }
    if (returnsResponse) {
      if (response == null) {
        response=op.getResponse();
      }
      final ResponseHandler responseHandler=op.getResponseHandler();
      if (responseHandler == null) {
        throw new IllegalStateException("ResponseHandler should not be null!");
      }
      responseHandler.sendResponse(response);
    }
    op.afterRun();
    if (op instanceof Notifier) {
      final Notifier notifier=(Notifier)op;
      if (notifier.shouldNotify()) {
        nodeEngine.waitNotifyService.notify(notifier);
      }
    }
  }
 catch (  Throwable e) {
    handleOperationError(op,e);
  }
 finally {
    afterCallExecution(op,callKey);
  }
}
