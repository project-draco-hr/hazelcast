{
  boolean shouldMerge=false;
  if (joinRequest != null) {
    boolean validJoinRequest;
    try {
      try {
        validJoinRequest=node.getClusterService().validateJoinMessage(joinRequest);
      }
 catch (      Exception e) {
        logger.log(Level.FINEST,e.getMessage());
        validJoinRequest=false;
      }
      if (validJoinRequest) {
        for (        Member member : node.getClusterService().getMembers()) {
          MemberImpl memberImpl=(MemberImpl)member;
          if (memberImpl.getAddress().equals(joinRequest.getAddress())) {
            logger.log(Level.FINEST,"Should not merge to " + joinRequest.getAddress() + ", because it is already member of this cluster.");
            return false;
          }
        }
        int currentMemberCount=node.getClusterService().getMembers().size();
        if (joinRequest.getMemberCount() > currentMemberCount) {
          logger.info(node.getThisAddress() + " is merging to " + joinRequest.getAddress()+ ", because : joinRequest.getMemberCount() > currentMemberCount ["+ (joinRequest.getMemberCount() + " > " + currentMemberCount)+ "]");
          logger.log(Level.FINEST,joinRequest.toString());
          shouldMerge=true;
        }
 else         if (joinRequest.getMemberCount() == currentMemberCount) {
          if (node.getThisAddress().hashCode() > joinRequest.getAddress().hashCode()) {
            logger.info(node.getThisAddress() + " is merging to " + joinRequest.getAddress()+ ", because : node.getThisAddress().hashCode() > joinRequest.address.hashCode() "+ ", this node member count: "+ currentMemberCount);
            logger.log(Level.FINEST,joinRequest.toString());
            shouldMerge=true;
          }
 else {
            logger.log(Level.FINEST,joinRequest.getAddress() + " should merge to this node " + ", because : node.getThisAddress().hashCode() < joinRequest.address.hashCode() "+ ", this node member count: "+ currentMemberCount);
          }
        }
      }
    }
 catch (    Throwable e) {
      logger.severe(e);
      return false;
    }
  }
  return shouldMerge;
}
