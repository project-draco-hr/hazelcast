{
  Config config=buildConfig();
  CountingManagedContext context=(CountingManagedContext)config.getManagedContext();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance client=HazelcastClient.newHazelcastClient(null);
  IMap<Integer,Integer> m1=client.getMap(MAP_NAME);
  for (int i=0; i < 100; i++) {
    m1.put(i,i);
  }
  final int[] result=new int[1];
  final Semaphore semaphore=new Semaphore(1);
  semaphore.acquire();
  JobTracker tracker=client.getJobTracker("default");
  Job<Integer,Integer> job=tracker.newJob(KeyValueSource.fromMap(m1));
  CompletableFuture<Integer> future=job.mapper(new GroupingTestMapper()).reducer(new TestReducerFactory(client,context)).submit(new TestCollator());
  future.andThen(new ExecutionCallback<Integer>(){
    @Override public void onResponse(    Integer response){
      try {
        result[0]=response.intValue();
      }
  finally {
        semaphore.release();
      }
    }
    @Override public void onFailure(    Throwable t){
      semaphore.release();
    }
  }
);
  int expectedResult=0;
  for (int i=0; i < 100; i++) {
    expectedResult+=i;
  }
  semaphore.acquire();
  for (int i=0; i < 4; i++) {
    assertEquals(expectedResult,result[0]);
  }
  Set<String> hazelcastNames=context.getHazelcastNames();
  assertEquals(4,hazelcastNames.size());
}
