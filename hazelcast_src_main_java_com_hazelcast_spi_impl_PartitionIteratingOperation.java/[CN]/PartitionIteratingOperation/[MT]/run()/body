{
  final NodeEngine nodeEngine=getNodeEngine();
  results=new HashMap<Integer,Object>(partitions != null ? partitions.size() : 0);
  try {
    Map<Integer,ResponseQueue> responses=new HashMap<Integer,ResponseQueue>(partitions.size());
    for (    final int partitionId : partitions) {
      ResponseQueue responseQueue=new ResponseQueue();
      final Operation op=operationFactory.createOperation();
      op.setNodeEngine(nodeEngine).setPartitionId(partitionId).setReplicaIndex(getReplicaIndex()).setResponseHandler(responseQueue).setService(getService());
      OperationAccessor.setCallerAddress(op,getCallerAddress());
      responses.put(partitionId,responseQueue);
      nodeEngine.getExecutionService().execute(ExecutionService.SYSTEM_EXECUTOR,new Runnable(){
        public void run(){
          nodeEngine.getOperationService().runOperation(op);
        }
      }
);
    }
    for (    Map.Entry<Integer,ResponseQueue> responseQueueEntry : responses.entrySet()) {
      final ResponseQueue queue=responseQueueEntry.getValue();
      final Integer key=responseQueueEntry.getKey();
      final Object result=queue.get();
      if (result instanceof ResponseObj) {
        results.put(key,((ResponseObj)result).response);
      }
 else {
        results.put(key,result);
      }
    }
  }
 catch (  Exception e) {
    getLogger(nodeEngine).log(Level.SEVERE,e.getMessage(),e);
  }
}
