{
  GreaterLessPredicate mostRightGreaterOrEquals=null;
  GreaterLessPredicate mostLeftLessThanOrEquals=null;
  Index index=indexes.getIndex(attributeName);
  TypeConverters.TypeConverter converter=index.getConverter();
  for (  GreaterLessPredicate predicate : predicates) {
    if (predicate.less) {
      if (mostLeftLessThanOrEquals == null || isLessThan(mostLeftLessThanOrEquals,predicate,converter)) {
        mostLeftLessThanOrEquals=predicate;
      }
    }
 else {
      if (mostRightGreaterOrEquals == null || isGreaterThan(mostRightGreaterOrEquals,predicate,converter)) {
        mostRightGreaterOrEquals=predicate;
      }
    }
  }
  if (mostRightGreaterOrEquals == null || mostLeftLessThanOrEquals == null) {
    return null;
  }
  return new Boundaries(mostRightGreaterOrEquals,mostLeftLessThanOrEquals,converter);
}
