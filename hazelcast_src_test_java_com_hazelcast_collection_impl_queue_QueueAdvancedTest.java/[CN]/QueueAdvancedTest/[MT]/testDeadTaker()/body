{
  Config config=new Config();
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  config.addListenerConfig(new ListenerConfig().setImplementation(new MembershipListener(){
    @Override public void memberAdded(    MembershipEvent membershipEvent){
    }
    @Override public void memberRemoved(    MembershipEvent membershipEvent){
      shutdownLatch.countDown();
    }
    @Override public void memberAttributeChanged(    MemberAttributeEvent memberAttributeEvent){
    }
  }
));
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  HazelcastInstance[] instances=factory.newInstances(config);
  final HazelcastInstance h1=instances[0];
  final HazelcastInstance h2=instances[1];
  warmUpPartitions(h1,h2);
  final IQueue<String> q1=h1.getQueue("default");
  final IQueue<String> q2=h2.getQueue("default");
  final CountDownLatch startLatch=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        assertTrue("Expected startLatch.await() to succeed within 10 seconds",startLatch.await(10,SECONDS));
        Thread.sleep(5000);
        h2.getLifecycleService().terminate();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        startLatch.countDown();
        String value=q2.take();
        fail("Should not be able to take value from queue, but got: " + value);
      }
 catch (      HazelcastInstanceNotActiveException e) {
        EmptyStatement.ignore(e);
      }
catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
  assertTrue("Expected shutdownLatch.await() to succeed within 1 minute",shutdownLatch.await(1,MINUTES));
  q1.offer("item");
  assertEquals(1,q1.size());
  assertEquals("item",q1.poll());
}
