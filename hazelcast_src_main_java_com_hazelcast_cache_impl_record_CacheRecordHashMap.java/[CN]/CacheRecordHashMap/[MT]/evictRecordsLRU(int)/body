{
  if (percentage <= 0) {
    return 0;
  }
  final int size=size();
  if (percentage >= ICacheRecordStore.ONE_HUNDRED_PERCENT || size <= MIN_EVICTION_ELEMENT_COUNT) {
    clear();
    return size;
  }
  int sizeLimitForEviction=(int)((double)(size() * percentage) / (double)ICacheRecordStore.ONE_HUNDRED_PERCENT);
  List<Map.Entry<Data,CacheRecord>> entriesWillBeEvicted=new ArrayList<Map.Entry<Data,CacheRecord>>(sizeLimitForEviction);
  long[] sortArray=CacheRecordSortArea.SORT_AREA_THREAD_LOCAL.get().getLongArray(size);
  int i=0;
  for (  Map.Entry<Data,CacheRecord> entry : entrySet()) {
    CacheRecord record=entry.getValue();
    sortArray[i]=record.getAccessTime();
    entriesWillBeEvicted.add(entry);
    if (++i >= size) {
      break;
    }
  }
  Arrays.sort(sortArray,0,size);
  long timeLimitForEviction=sortArray[sizeLimitForEviction];
  int actualEvictedCount=0;
  for (  Map.Entry<Data,CacheRecord> entry : entriesWillBeEvicted) {
    CacheRecord record=entry.getValue();
    long accessTime=record.getAccessTime();
    if (accessTime <= timeLimitForEviction) {
      Object value=record.getValue();
      if (value instanceof Data) {
        callbackEvictionListeners((Data)value);
      }
      if (remove(entry.getKey()) != null) {
        actualEvictedCount++;
      }
    }
  }
  return actualEvictedCount;
}
