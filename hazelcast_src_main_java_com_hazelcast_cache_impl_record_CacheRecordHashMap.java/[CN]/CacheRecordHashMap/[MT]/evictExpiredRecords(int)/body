{
  if (percentage <= 0) {
    return 0;
  }
  percentage=Math.min(percentage,ICacheRecordStore.ONE_HUNDRED_PERCENT);
  final int size=size();
  long now=Clock.currentTimeMillis();
  int sizeLimitForEviction=(int)((double)(size * percentage) / (double)ICacheRecordStore.ONE_HUNDRED_PERCENT);
  List<Map.Entry<Data,CacheRecord>> entriesWillBeEvicted=new ArrayList<Map.Entry<Data,CacheRecord>>(sizeLimitForEviction);
  int i=0;
  for (  Map.Entry<Data,CacheRecord> entry : entrySet()) {
    CacheRecord record=entry.getValue();
    final boolean isExpired=record.isExpiredAt(now);
    if (isExpired) {
      entriesWillBeEvicted.add(entry);
      if (++i >= sizeLimitForEviction) {
        break;
      }
    }
  }
  int actualEvictedCount=0;
  for (  Map.Entry<Data,CacheRecord> entry : entriesWillBeEvicted) {
    CacheRecord record=entry.getValue();
    Object value=record.getValue();
    if (value instanceof Data) {
      callbackEvictionListeners((Data)value);
    }
    if (remove(entry.getKey()) != null) {
      actualEvictedCount++;
    }
  }
  cacheInfo.removeEntryCount(actualEvictedCount);
  return actualEvictedCount;
}
