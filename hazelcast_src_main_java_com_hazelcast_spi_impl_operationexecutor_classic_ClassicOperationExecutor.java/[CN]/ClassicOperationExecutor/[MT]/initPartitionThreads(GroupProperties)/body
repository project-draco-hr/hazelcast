{
  int threadCount=properties.getInteger(GroupProperty.PARTITION_OPERATION_THREAD_COUNT);
  if (threadCount <= 0) {
    int coreSize=Runtime.getRuntime().availableProcessors();
    threadCount=Math.max(2,coreSize);
  }
  PartitionOperationThread[] threads=new PartitionOperationThread[threadCount];
  for (int threadId=0; threadId < threads.length; threadId++) {
    String threadName=threadGroup.getThreadPoolNamePrefix("partition-operation") + threadId;
    ScheduleQueue scheduleQueue=new DefaultScheduleQueue();
    PartitionOperationThread operationThread=new PartitionOperationThread(threadName,threadId,scheduleQueue,logger,threadGroup,nodeExtension,partitionOperationRunners);
    threads[threadId]=operationThread;
    metricsRegistry.scanAndRegister(operationThread,"operation." + operationThread.getName());
  }
  for (int partitionId=0; partitionId < partitionOperationRunners.length; partitionId++) {
    int threadId=partitionId % threadCount;
    Thread thread=threads[threadId];
    OperationRunner runner=partitionOperationRunners[partitionId];
    runner.setCurrentThread(thread);
  }
  return threads;
}
