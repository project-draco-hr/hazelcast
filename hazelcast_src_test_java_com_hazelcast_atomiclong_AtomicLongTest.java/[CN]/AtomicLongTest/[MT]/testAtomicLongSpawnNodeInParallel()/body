{
  int total=20;
  int parallel=4;
  final StaticNodeFactory nodeFactory=new StaticNodeFactory(total + 1);
  final Config config=new Config();
  HazelcastInstance instance=nodeFactory.newInstance(config);
  final String name="testAtomicLongSpawnNodeInParallel";
  IAtomicLong atomicLong=instance.getAtomicLong(name);
  atomicLong.set(100);
  for (int i=0; i < total / parallel; i++) {
    final HazelcastInstance[] instances=new HazelcastInstance[parallel];
    final CountDownLatch countDownLatch=new CountDownLatch(parallel);
    for (int j=0; j < parallel; j++) {
      final int id=j;
      new Thread(){
        public void run(){
          instances[id]=nodeFactory.newInstance(config);
          instances[id].getAtomicLong(name).incrementAndGet();
          countDownLatch.countDown();
        }
      }
.start();
    }
    try {
      countDownLatch.await(1,TimeUnit.MINUTES);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    IAtomicLong newAtomicLong=instance.getAtomicLong(name);
    Assert.assertEquals((long)100 + (i + 1) * parallel,newAtomicLong.get());
    instance.getLifecycleService().shutdown();
    instance=instances[0];
    for (int j=1; j < parallel; j++) {
      instances[j].getLifecycleService().shutdown();
    }
  }
}
