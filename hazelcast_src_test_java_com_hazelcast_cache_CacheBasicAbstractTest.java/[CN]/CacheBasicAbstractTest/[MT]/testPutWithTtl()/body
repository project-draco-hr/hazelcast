{
  final ICache<String,String> cache=createCache();
  final String key="key";
  cache.put(key,"value1",ttlToExpiryPolicy(1,TimeUnit.SECONDS));
  assertTrueEventually(new AssertTask(){
    public void run() throws Exception {
      assertNull(cache.get(key));
    }
  }
);
  assertEquals(0,cache.size());
  cache.putAsync(key,"value1",ttlToExpiryPolicy(1,TimeUnit.SECONDS));
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertNull(cache.get(key));
    }
  }
);
  assertEquals(0,cache.size());
  cache.put(key,"value2");
  String value=cache.getAndPut(key,"value3",ttlToExpiryPolicy(1,TimeUnit.SECONDS));
  assertEquals("value2",value);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertNull(cache.get(key));
    }
  }
);
  assertEquals(0,cache.size());
  cache.put(key,"value4");
  Future future=cache.getAndPutAsync(key,"value5",ttlToExpiryPolicy(1,TimeUnit.SECONDS));
  assertEquals("value4",future.get());
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertNull(cache.get(key));
    }
  }
);
  assertEquals(0,cache.size());
}
