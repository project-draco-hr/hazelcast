{
  final ICache cache=createCache();
  final String key="key";
  cache.put(key,"value1");
  Future f=cache.getAsync(key);
  assertEquals("value1",f.get());
  cache.putAsync(key,"value2");
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals("value2",cache.get(key));
    }
  }
);
  f=cache.getAndPutAsync(key,"value3");
  assertEquals("value2",f.get());
  assertEquals("value3",cache.get(key));
  f=cache.removeAsync("key2");
  assertFalse((Boolean)f.get());
  f=cache.removeAsync(key);
  assertTrue((Boolean)f.get());
  cache.put(key,"value4");
  f=cache.getAndRemoveAsync("key2");
  assertNull(f.get());
  f=cache.getAndRemoveAsync(key);
  assertEquals("value4",f.get());
}
