{
  final ICache<String,String> cache=createCache();
  final String key="key";
  cache.put(key,"value1");
  Future future=cache.getAsync(key);
  assertEquals("value1",future.get());
  cache.putAsync(key,"value2");
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals("value2",cache.get(key));
    }
  }
);
  future=cache.getAndPutAsync(key,"value3");
  assertEquals("value2",future.get());
  assertEquals("value3",cache.get(key));
  future=cache.removeAsync("key2");
  assertFalse((Boolean)future.get());
  future=cache.removeAsync(key);
  assertTrue((Boolean)future.get());
  cache.put(key,"value4");
  future=cache.getAndRemoveAsync("key2");
  assertNull(future.get());
  future=cache.getAndRemoveAsync(key);
  assertEquals("value4",future.get());
}
