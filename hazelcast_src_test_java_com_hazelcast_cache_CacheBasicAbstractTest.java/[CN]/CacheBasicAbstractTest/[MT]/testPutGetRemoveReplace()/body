{
  ICache cache=createCache();
  cache.put("key1","value1");
  assertEquals("value1",cache.get("key1"));
  assertEquals("value1",cache.getAndPut("key1","value2"));
  assertEquals(1,cache.size());
  assertTrue(cache.remove("key1"));
  cache.put("key1","value3");
  assertFalse(cache.remove("key1","xx"));
  assertTrue(cache.remove("key1","value3"));
  assertNull(cache.get("key1"));
  assertTrue(cache.putIfAbsent("key1","value1"));
  assertFalse(cache.putIfAbsent("key1","value1"));
  assertEquals("value1",cache.getAndRemove("key1"));
  assertNull(cache.get("key1"));
  cache.put("key1","value1");
  assertTrue(cache.containsKey("key1"));
  assertFalse(cache.replace("key2","value2"));
  assertTrue(cache.replace("key1","value2"));
  assertEquals("value2",cache.get("key1"));
  assertFalse(cache.replace("key1","xx","value3"));
  assertTrue(cache.replace("key1","value2","value3"));
  assertEquals("value3",cache.get("key1"));
  assertEquals("value3",cache.getAndReplace("key1","value4"));
  assertEquals("value4",cache.get("key1"));
}
