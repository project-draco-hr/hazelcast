{
  CacheConfig<Integer,Integer> config=getCacheConfigWithMaxSize(1000000);
  final ICache<Integer,Integer> cache=createCache(config);
  final int maxSize=getMaxCacheSizeWithoutEviction(config);
  for (int i=0; i < maxSize; i++) {
    cache.put(i,i);
  }
  AbstractCacheWorker worker=new AbstractCacheWorker(){
    @Override void doRun(    Random random){
      int i=random.nextInt(maxSize);
      cache.put(i,-i);
    }
  }
;
  worker.awaitFirstIteration();
  try {
    int i=0;
    Iterator<Cache.Entry<Integer,Integer>> iterator=cache.iterator();
    while (iterator.hasNext()) {
      Cache.Entry<Integer,Integer> e=iterator.next();
      Integer key=e.getKey();
      Integer value=e.getValue();
      assertTrue("key: " + key + ", value: "+ value,key == Math.abs(value));
      i++;
    }
    assertEquals("should have iterated over all " + maxSize + " entries",maxSize,i);
    assertThatNoCacheEvictionHappened(cache);
  }
  finally {
    worker.shutdown();
  }
}
