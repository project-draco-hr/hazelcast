{
  final int MAX_SIZE=withoutEviction ? 1000000 : 1000;
  final CacheConfig<Integer,Integer> config=getCacheConfigWithMaxSize(MAX_SIZE);
  final ICache<Integer,Integer> cache=createCache(config);
  final int maxSize=withoutEviction ? getMaxCacheSizeWithoutEviction(config) : getMaxCacheSizeWithEviction(config);
  for (int i=0; i < maxSize; i++) {
    cache.put(i,i);
  }
  AbstractCacheWorker worker=new AbstractCacheWorker(){
    @Override void doRun(    Random random){
      int i=random.nextInt(maxSize);
      cache.put(i,-i);
    }
  }
;
  worker.awaitFirstIteration();
  try {
    int i=0;
    Iterator<Cache.Entry<Integer,Integer>> iterator=cache.iterator();
    while (iterator.hasNext()) {
      Cache.Entry<Integer,Integer> e=iterator.next();
      Integer key=e.getKey();
      Integer value=e.getValue();
      assertTrue("key: " + key + ", value: "+ value,key == Math.abs(value));
      i++;
    }
    if (withoutEviction) {
      assertEquals("should have iterated over all " + maxSize + " entries",maxSize,i);
      assertThatNoCacheEvictionHappened(cache);
    }
  }
 catch (  NoSuchElementException e) {
    if (withoutEviction) {
      fail("Without eviction, there should not be `NoSuchElementException`: " + e);
    }
  }
 finally {
    worker.shutdown();
  }
}
