{
  if (data == null) {
    data=new Data();
  }
  if (!isStatusSet(ST_TYPE)) {
    if (source.remaining() < 4) {
      return false;
    }
    data.type=source.getInt();
    setStatus(ST_TYPE);
  }
  if (!isStatusSet(ST_CLASS_ID)) {
    if (source.remaining() < 4) {
      return false;
    }
    classId=source.getInt();
    setStatus(ST_CLASS_ID);
    if (classId == Data.NO_CLASS_ID) {
      setStatus(ST_FACTORY_ID);
      setStatus(ST_VERSION);
      setStatus(ST_CLASS_DEF_SIZE);
      setStatus(ST_CLASS_DEF);
    }
  }
  if (!isStatusSet(ST_FACTORY_ID)) {
    if (source.remaining() < 4) {
      return false;
    }
    factoryId=source.getInt();
    setStatus(ST_FACTORY_ID);
  }
  if (!isStatusSet(ST_VERSION)) {
    if (source.remaining() < 4) {
      return false;
    }
    version=source.getInt();
    setStatus(ST_VERSION);
  }
  if (!isStatusSet(ST_CLASS_DEF)) {
    ClassDefinition cd=context.lookup(factoryId,classId,version);
    if (!skipClassDef && cd != null) {
      data.classDefinition=cd;
      skipClassDef=true;
    }
    if (!isStatusSet(ST_CLASS_DEF_SIZE)) {
      if (source.remaining() < 4) {
        return false;
      }
      classDefSize=source.getInt();
      setStatus(ST_CLASS_DEF_SIZE);
    }
    if (!isStatusSet(ST_CLASS_DEF)) {
      if (source.remaining() < classDefSize) {
        return false;
      }
      if (skipClassDef) {
        source.position(classDefSize + source.position());
      }
 else {
        final byte[] binary=new byte[classDefSize];
        source.get(binary);
        data.classDefinition=new BinaryClassDefinitionProxy(factoryId,classId,version,binary);
      }
      setStatus(ST_CLASS_DEF);
    }
  }
  if (!isStatusSet(ST_SIZE)) {
    if (source.remaining() < 4) {
      return false;
    }
    final int size=source.getInt();
    buffer=ByteBuffer.allocate(size);
    setStatus(ST_SIZE);
  }
  if (!isStatusSet(ST_VALUE)) {
    IOUtil.copyToHeapBuffer(source,buffer);
    if (buffer.hasRemaining()) {
      return false;
    }
    buffer.flip();
    data.buffer=buffer.array();
    setStatus(ST_VALUE);
  }
  if (!isStatusSet(ST_HASH)) {
    if (source.remaining() < 4) {
      return false;
    }
    data.partitionHash=source.getInt();
    setStatus(ST_HASH);
  }
  setStatus(ST_ALL);
  return true;
}
