{
  if (!isStatusSet(ST_TYPE)) {
    if (destination.remaining() < 4) {
      return false;
    }
    destination.putInt(data.type);
    setStatus(ST_TYPE);
  }
  if (!isStatusSet(ST_CLASS_ID)) {
    if (destination.remaining() < 4) {
      return false;
    }
    classId=data.classDefinition == null ? Data.NO_CLASS_ID : data.classDefinition.getClassId();
    destination.putInt(classId);
    if (classId == Data.NO_CLASS_ID) {
      setStatus(ST_FACTORY_ID);
      setStatus(ST_VERSION);
      setStatus(ST_CLASS_DEF_SIZE);
      setStatus(ST_CLASS_DEF);
    }
    setStatus(ST_CLASS_ID);
  }
  if (!isStatusSet(ST_FACTORY_ID)) {
    if (destination.remaining() < 4) {
      return false;
    }
    destination.putInt(data.classDefinition.getFactoryId());
    setStatus(ST_FACTORY_ID);
  }
  if (!isStatusSet(ST_VERSION)) {
    if (destination.remaining() < 4) {
      return false;
    }
    final int version=data.classDefinition.getVersion();
    destination.putInt(version);
    setStatus(ST_VERSION);
  }
  if (!isStatusSet(ST_CLASS_DEF_SIZE)) {
    if (destination.remaining() < 4) {
      return false;
    }
    final BinaryClassDefinition cd=(BinaryClassDefinition)data.classDefinition;
    final byte[] binary=cd.getBinary();
    classDefSize=binary == null ? 0 : binary.length;
    destination.putInt(classDefSize);
    setStatus(ST_CLASS_DEF_SIZE);
    if (classDefSize == 0) {
      setStatus(ST_CLASS_DEF);
    }
 else {
      buffer=ByteBuffer.wrap(binary);
    }
  }
  if (!isStatusSet(ST_CLASS_DEF)) {
    IOUtil.copyToHeapBuffer(buffer,destination);
    if (buffer.hasRemaining()) {
      return false;
    }
    setStatus(ST_CLASS_DEF);
  }
  if (!isStatusSet(ST_SIZE)) {
    if (destination.remaining() < 4) {
      return false;
    }
    final int size=data.bufferSize();
    destination.putInt(size);
    setStatus(ST_SIZE);
    if (size <= 0) {
      setStatus(ST_VALUE);
    }
 else {
      buffer=ByteBuffer.wrap(data.buffer);
    }
  }
  if (!isStatusSet(ST_VALUE)) {
    IOUtil.copyToHeapBuffer(buffer,destination);
    if (buffer.hasRemaining()) {
      return false;
    }
    setStatus(ST_VALUE);
  }
  if (!isStatusSet(ST_HASH)) {
    if (destination.remaining() < 4) {
      return false;
    }
    destination.putInt(data.getPartitionHash());
    setStatus(ST_HASH);
  }
  setStatus(ST_ALL);
  return true;
}
