{
  if (nearCacheInvalidationListeners.containsKey(member)) {
    return;
  }
  try {
    ClientMessage request=CacheAddInvalidationListenerCodec.encodeRequest(nameWithPrefix);
    Client client=clientContext.getClusterService().getLocalClient();
    EventHandler handler=new NearCacheInvalidationHandler(client);
    HazelcastClientInstanceImpl clientInstance=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    Address address=((AbstractMember)member).getAddress();
    ClientInvocation invocation=new ClientListenerInvocation(clientInstance,handler,request,address,new ClientMessageDecoder(){
      @Override public <T>T decodeClientMessage(      ClientMessage clientMessage){
        return (T)CacheAddInvalidationListenerCodec.decodeResponse(clientMessage).response;
      }
    }
);
    Future<ClientMessage> future=invocation.invoke();
    String registrationId=CacheAddInvalidationListenerCodec.decodeResponse(future.get()).response;
    clientContext.getListenerService().registerListener(registrationId,request.getCorrelationId());
    nearCacheInvalidationListeners.put(member,registrationId);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}
