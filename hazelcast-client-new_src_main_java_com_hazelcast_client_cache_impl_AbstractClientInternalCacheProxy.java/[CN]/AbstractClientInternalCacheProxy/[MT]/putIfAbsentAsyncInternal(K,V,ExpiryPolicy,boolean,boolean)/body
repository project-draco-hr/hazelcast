{
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  final Data expiryPolicyData=toData(expiryPolicy);
  final int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutIfAbsentCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  ClientDelegatingFuture delegatingFuture=new ClientDelegatingFuture<Boolean>(future,clientContext.getSerializationService(),putIfAbsentResponseDecoder);
  if (nearCache != null || (async && statisticsEnabled)) {
    delegatingFuture.andThen(new ExecutionCallback<Object>(){
      @Override public void onResponse(      Object responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (async && statisticsEnabled) {
          Object response=clientContext.getSerializationService().toObject(responseData);
          handleStatisticsOnPutIfAbsent(start,(Boolean)response);
        }
      }
      @Override public void onFailure(      Throwable t){
      }
    }
);
  }
  return delegatingFuture;
}
