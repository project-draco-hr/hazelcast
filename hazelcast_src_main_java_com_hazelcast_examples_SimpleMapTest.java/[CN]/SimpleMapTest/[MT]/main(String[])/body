{
  System.out.println("Args length:" + args.length);
  if (args.length > 0) {
    ENTRY_COUNT=Integer.valueOf(args[0]);
  }
  if (args.length > 2) {
    GET_PERCENTAGE=Integer.valueOf(args[1]);
    PUT_PERCENTAGE=Integer.valueOf(args[2]);
  }
  int threadCount=40;
  ExecutorService es=Executors.newFixedThreadPool(threadCount);
  for (int i=0; i < threadCount; i++) {
    es.submit(new Runnable(){
      public void run(){
        IMap<String,byte[]> map=Hazelcast.getMap("default");
        while (true) {
          int key=(int)(Math.random() * ENTRY_COUNT);
          int operation=((int)(Math.random() * 100));
          System.out.println("Op" + operation);
          System.out.println(GET_PERCENTAGE);
          System.out.println(PUT_PERCENTAGE);
          if (operation < GET_PERCENTAGE) {
            map.get(String.valueOf(key));
          }
 else           if (operation < GET_PERCENTAGE + PUT_PERCENTAGE) {
            map.put(String.valueOf(key),new byte[VALUE_SIZE]);
          }
 else {
            map.remove(String.valueOf(key));
          }
        }
      }
    }
);
  }
  Executors.newSingleThreadExecutor().submit(new Runnable(){
    public void run(){
      while (true) {
        try {
          Thread.sleep(STATS_SECONDS * 1000);
          System.out.println("cluster size:" + Hazelcast.getCluster().getMembers().size());
          IMap<String,byte[]> map=Hazelcast.getMap("default");
          MapOperationStats mapOpStats=map.getLocalMapStats().getOperationStats();
          long period=((mapOpStats.getPeriodEnd() - mapOpStats.getPeriodStart()) / 1000);
          if (period == 0) {
            continue;
          }
          System.out.println(mapOpStats);
          System.out.println("Operations per Second : " + mapOpStats.total() / period);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
}
