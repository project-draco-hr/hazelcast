{
  final QueryResult result=new QueryResult();
  List<QueryEntry> list=new LinkedList<QueryEntry>();
  PartitionContainer container=getPartitionContainer(partitionId);
  RecordStore recordStore=container.getRecordStore(mapName);
  Map<Data,Record> records=recordStore.getReadonlyRecordMap();
  SerializationService serializationService=nodeEngine.getSerializationService();
  final PagingPredicate pagingPredicate=predicate instanceof PagingPredicate ? (PagingPredicate)predicate : null;
  final Comparator inner=pagingPredicate == null ? null : pagingPredicate.getComparator();
  Comparator<QueryEntry> wrapperComparator=new Comparator<QueryEntry>(){
    public int compare(    QueryEntry o1,    QueryEntry o2){
      final Object value1=o1.getValue();
      final Object value2=o2.getValue();
      return compareValue(inner,value1,value2);
    }
  }
;
  for (  Record record : records.values()) {
    Data key=record.getKey();
    Object value=record.getValue();
    if (value == null) {
      continue;
    }
    QueryEntry queryEntry=new QueryEntry(serializationService,key,key,value);
    if (predicate.apply(queryEntry)) {
      if (pagingPredicate != null) {
        Object anchor=pagingPredicate.getAnchor();
        if (anchor != null && compareValue(inner,anchor,queryEntry.getValue()) >= 0) {
          continue;
        }
      }
      list.add(queryEntry);
    }
  }
  if (pagingPredicate != null) {
    Collections.sort(list,wrapperComparator);
    if (list.size() > pagingPredicate.getPageSize()) {
      list=list.subList(0,pagingPredicate.getPageSize());
    }
  }
  for (  QueryEntry entry : list) {
    result.add(new QueryResultEntryImpl(entry.getKeyData(),entry.getKeyData(),entry.getValueData()));
  }
  return result;
}
