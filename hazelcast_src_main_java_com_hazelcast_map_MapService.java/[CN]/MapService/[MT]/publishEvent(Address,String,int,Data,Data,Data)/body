{
  Collection<EventRegistration> candidates=nodeEngine.getEventService().getRegistrations(MAP_SERVICE_NAME,mapName);
  Set<EventRegistration> registrationsWithValue=new HashSet<EventRegistration>();
  Set<EventRegistration> registrationsWithoutValue=new HashSet<EventRegistration>();
  Object key=toObject(dataKey);
  Object value=toObject(dataValue);
  for (  EventRegistration candidate : candidates) {
    EntryEventFilter filter=(EntryEventFilter)candidate.getFilter();
    if (filter instanceof QueryEventFilter) {
      Object testValue=eventType == EntryEvent.TYPE_REMOVED ? toObject(dataOldValue) : value;
      QueryEventFilter qfilter=(QueryEventFilter)filter;
      if (qfilter.eval(new SimpleMapEntry(key,testValue))) {
        if (filter.isIncludeValue()) {
          registrationsWithValue.add(candidate);
        }
 else {
          registrationsWithoutValue.add(candidate);
        }
      }
    }
 else     if (filter.eval(dataKey)) {
      if (filter.isIncludeValue()) {
        registrationsWithValue.add(candidate);
      }
 else {
        registrationsWithoutValue.add(candidate);
      }
    }
  }
  if (registrationsWithValue.isEmpty() && registrationsWithoutValue.isEmpty())   return;
  String source=nodeEngine.getNode().address.toString();
  EventData event=new EventData(source,caller,dataKey,dataValue,dataOldValue,eventType);
  nodeEngine.getEventService().publishEvent(MAP_SERVICE_NAME,registrationsWithValue,event);
  nodeEngine.getEventService().publishEvent(MAP_SERVICE_NAME,registrationsWithoutValue,event.cloneWithoutValues());
}
