{
  LocalMapStatsImpl localMapStats=new LocalMapStatsImpl();
  MapContainer mapContainer=getMapContainer(mapName);
  if (!mapContainer.getMapConfig().isStatisticsEnabled()) {
    return localMapStats;
  }
  long ownedEntryCount=0;
  long backupEntryCount=0;
  long dirtyCount=0;
  long ownedEntryMemoryCost=0;
  long backupEntryMemoryCost=0;
  long hits=0;
  long lockedEntryCount=0;
  int backupCount=mapContainer.getTotalBackupCount();
  ClusterServiceImpl clusterService=(ClusterServiceImpl)nodeEngine.getClusterService();
  Address thisAddress=clusterService.getThisAddress();
  for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
    PartitionInfo partitionInfo=nodeEngine.getPartitionService().getPartitionInfo(i);
    if (partitionInfo.getOwner().equals(thisAddress)) {
      PartitionContainer partitionContainer=getPartitionContainer(i);
      RecordStore recordStore=partitionContainer.getRecordStore(mapName);
      ConcurrentMap<Data,Record> records=recordStore.getRecords();
      for (      Record record : records.values()) {
        RecordStatistics stats=record.getStatistics();
        RecordState state=record.getState();
        if (mapContainer.getStore() != null && state.isDirty()) {
          dirtyCount++;
        }
        ownedEntryCount++;
        ownedEntryMemoryCost+=record.getCost();
        localMapStats.setLastAccessTime(stats.getLastAccessTime());
        localMapStats.setLastUpdateTime(stats.getLastUpdateTime());
        hits+=stats.getHits();
        if (recordStore.isLocked(record.getKey())) {
          lockedEntryCount++;
        }
      }
    }
 else {
      for (int j=1; j <= backupCount; j++) {
        Address replicaAddress=partitionInfo.getReplicaAddress(j);
        int memberSize=nodeEngine.getClusterService().getMembers().size();
        int tryCount=3;
        while (memberSize > backupCount && replicaAddress == null && tryCount-- > 0) {
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
            ExceptionUtil.rethrow(e);
          }
          replicaAddress=partitionInfo.getReplicaAddress(j);
        }
        if (replicaAddress != null && replicaAddress.equals(thisAddress)) {
          PartitionContainer partitionContainer=getPartitionContainer(i);
          RecordStore recordStore=partitionContainer.getRecordStore(mapName);
          ConcurrentMap<Data,Record> records=recordStore.getRecords();
          for (          Record record : records.values()) {
            backupEntryCount++;
            backupEntryMemoryCost+=record.getCost();
          }
        }
      }
    }
  }
  localMapStats.setDirtyEntryCount(zeroOrPositive(dirtyCount));
  localMapStats.setLockedEntryCount(zeroOrPositive(lockedEntryCount));
  localMapStats.setHits(zeroOrPositive(hits));
  localMapStats.setOwnedEntryCount(zeroOrPositive(ownedEntryCount));
  localMapStats.setBackupEntryCount(zeroOrPositive(backupEntryCount));
  localMapStats.setOwnedEntryMemoryCost(zeroOrPositive(ownedEntryMemoryCost));
  localMapStats.setBackupEntryMemoryCost(zeroOrPositive(backupEntryMemoryCost));
  localMapStats.setCreationTime(zeroOrPositive(clusterService.getClusterTimeFor(mapContainer.getCreationTime())));
  localMapStats.setOperationStats(getMapContainer(mapName).getMapOperationCounter().getPublishedStats());
  return localMapStats;
}
