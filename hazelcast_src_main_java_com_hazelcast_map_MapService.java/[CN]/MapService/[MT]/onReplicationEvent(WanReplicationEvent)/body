{
  Object eventObject=replicationEvent.getEventObject();
  if (eventObject instanceof MapReplicationUpdate) {
    MapReplicationUpdate replicationUpdate=(MapReplicationUpdate)eventObject;
    EntryView entryView=replicationUpdate.getEntryView();
    MapMergePolicy mergePolicy=replicationUpdate.getMergePolicy();
    String mapName=replicationUpdate.getMapName();
    MapContainer mapContainer=getMapContainer(mapName);
    MergeOperation operation=new MergeOperation(mapName,toData(entryView.getKey(),mapContainer.getPartitioningStrategy()),entryView,mergePolicy);
    try {
      int partitionId=nodeEngine.getPartitionService().getPartitionId(entryView.getKey());
      Invocation invocation=nodeEngine.getOperationService().createInvocationBuilder(SERVICE_NAME,operation,partitionId).build();
      invocation.invoke().get();
    }
 catch (    Throwable t) {
      throw ExceptionUtil.rethrow(t);
    }
  }
 else   if (eventObject instanceof MapReplicationRemove) {
    MapReplicationRemove replicationRemove=(MapReplicationRemove)eventObject;
    DeleteOperation operation=new DeleteOperation(replicationRemove.getMapName(),replicationRemove.getKey());
    try {
      int partitionId=nodeEngine.getPartitionService().getPartitionId(replicationRemove.getKey());
      Invocation invocation=nodeEngine.getOperationService().createInvocationBuilder(SERVICE_NAME,operation,partitionId).build();
      invocation.invoke().get();
    }
 catch (    Throwable t) {
      throw ExceptionUtil.rethrow(t);
    }
  }
}
