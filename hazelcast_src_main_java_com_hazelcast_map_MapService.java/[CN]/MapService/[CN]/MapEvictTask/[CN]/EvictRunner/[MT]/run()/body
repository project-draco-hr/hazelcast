{
  Set<Data> keysGatheredForNearCacheEviction=null;
  for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
    if ((i % ExecutorConfig.DEFAULT_POOL_SIZE) != mod) {
      continue;
    }
    final Address owner=nodeEngine.getPartitionService().getPartitionOwner(i);
    if (nodeEngine.getThisAddress().equals(owner)) {
      final PartitionContainer pc=partitionContainers[i];
      final RecordStore recordStore=pc.getRecordStore(mapName);
      final Collection<Record> values=recordStore.getReadonlyRecordMap().values();
      final List<Record> currentSortedRecords=new ArrayList<Record>(values.size());
      currentSortedRecords.addAll(recordStore.getReadonlyRecordMap().values());
      Collections.sort(currentSortedRecords,comparator);
      final int currentPartitionSize=currentSortedRecords.size();
      int evictSize;
switch (maxSizePolicy) {
case PER_PARTITION:
case PER_NODE:
        final int diffFromTargetSize=currentPartitionSize - targetSizePerPartition;
      final int prunedSize=currentPartitionSize * evictionPercentage / 100 + 1;
    evictSize=Math.max(diffFromTargetSize,prunedSize);
  break;
case USED_HEAP_PERCENTAGE:
case USED_HEAP_SIZE:
evictSize=currentPartitionSize * evictionPercentage / 100;
break;
default :
throw new IllegalArgumentException("Max size policy not defined [" + maxSizePolicy + "]");
}
if (evictSize <= 0) {
continue;
}
Set<Record> recordSet=new HashSet<Record>(evictSize);
Set<Data> keySet=new HashSet<Data>(evictSize);
Iterator iterator=currentSortedRecords.iterator();
while (iterator.hasNext()) {
if (evictSize == 0) {
break;
}
Record rec=(Record)iterator.next();
recordSet.add(rec);
keySet.add(rec.getKey());
evictSize--;
}
if (keySet.isEmpty()) {
continue;
}
keysGatheredForNearCacheEviction=new HashSet<Data>(keySet.size());
keysGatheredForNearCacheEviction.addAll(keySet);
EvictKeysOperation evictKeysOperation=new EvictKeysOperation(mapName,keySet);
evictKeysOperation.setNodeEngine(nodeEngine);
evictKeysOperation.setServiceName(SERVICE_NAME);
evictKeysOperation.setResponseHandler(ResponseHandlerFactory.createEmptyResponseHandler());
evictKeysOperation.setPartitionId(i);
OperationAccessor.setCallerAddress(evictKeysOperation,nodeEngine.getThisAddress());
nodeEngine.getOperationService().executeOperation(evictKeysOperation);
for (Record record : recordSet) {
publishEvent(nodeEngine.getThisAddress(),mapName,EntryEventType.EVICTED,record.getKey(),toData(record.getValue()),null);
}
}
}
if (isNearCacheAndInvalidationEnabled(mapName)) {
invalidateAllNearCaches(mapName,keysGatheredForNearCacheEviction);
}
}
