{
  MapConfig mapConfig=mapContainer.getMapConfig();
  MapConfig.EvictionPolicy evictionPolicy=mapConfig.getEvictionPolicy();
  final String mapName=mapContainer.getName();
  Comparator comparator=null;
  if (evictionPolicy == MapConfig.EvictionPolicy.LRU) {
    comparator=new Comparator<AbstractRecord>(){
      public int compare(      AbstractRecord o1,      AbstractRecord o2){
        return o1.getLastAccessTime().compareTo(o2.getLastAccessTime());
      }
    }
;
  }
 else   if (evictionPolicy == MapConfig.EvictionPolicy.LFU) {
    comparator=new Comparator<AbstractRecord>(){
      public int compare(      AbstractRecord o1,      AbstractRecord o2){
        return o1.getHits().compareTo(o2.getHits());
      }
    }
;
  }
  final int evictionPercentage=mapConfig.getEvictionPercentage();
  int memberCount=nodeEngine.getClusterService().getMembers().size();
  int targetSizePerPartition=-1;
  int maxPartitionSize=0;
  final MaxSizeConfig.MaxSizePolicy maxSizePolicy=mapConfig.getMaxSizeConfig().getMaxSizePolicy();
  if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.PER_JVM) {
    maxPartitionSize=mapConfig.getMaxSizeConfig().getSize() * memberCount / nodeEngine.getPartitionService().getPartitionCount();
    targetSizePerPartition=Double.valueOf(maxPartitionSize * ((100 - evictionPercentage) / 100.0)).intValue();
  }
 else   if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.PER_PARTITION) {
    maxPartitionSize=mapConfig.getMaxSizeConfig().getSize();
    targetSizePerPartition=Double.valueOf(maxPartitionSize * ((100 - evictionPercentage) / 100.0)).intValue();
  }
  for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
    Address owner=nodeEngine.getPartitionService().getPartitionOwner(i);
    if (nodeEngine.getThisAddress().equals(owner)) {
      PartitionContainer pc=partitionContainers[i];
      final RecordStore recordStore=pc.getRecordStore(mapName);
      final int finalI=i;
      final Comparator finalComparator=comparator;
      final int finalTargetSizePerPartition=targetSizePerPartition;
      nodeEngine.getExecutionService().execute("map-eviction",new Runnable(){
        public void run(){
          SortedSet sortedRecords=new TreeSet(finalComparator);
          Set<Map.Entry<Data,Record>> recordEntries=recordStore.getRecords().entrySet();
          for (          Map.Entry<Data,Record> entry : recordEntries) {
            sortedRecords.add(entry.getValue());
          }
          int evictSize=0;
          if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.PER_JVM || maxSizePolicy == MaxSizeConfig.MaxSizePolicy.PER_PARTITION) {
            evictSize=sortedRecords.size() - finalTargetSizePerPartition;
          }
 else {
            evictSize=sortedRecords.size() * evictionPercentage / 100;
          }
          if (evictSize == 0)           return;
          Set<Data> keySet=new HashSet();
          Iterator iterator=sortedRecords.iterator();
          while (iterator.hasNext() && evictSize-- > 0) {
            Record rec=(Record)iterator.next();
            keySet.add(rec.getKey());
          }
          ClearOperation clearOperation=new ClearOperation(mapName,keySet);
          clearOperation.setNodeEngine(nodeEngine);
          clearOperation.setServiceName(SERVICE_NAME);
          clearOperation.setResponseHandler(ResponseHandlerFactory.createEmptyResponseHandler());
          clearOperation.setPartitionId(finalI);
          nodeEngine.getOperationService().runOperation(clearOperation);
        }
      }
);
    }
  }
}
