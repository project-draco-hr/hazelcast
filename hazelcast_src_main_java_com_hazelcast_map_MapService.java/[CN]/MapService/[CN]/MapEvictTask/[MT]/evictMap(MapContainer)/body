{
  MapConfig mapConfig=mapContainer.getMapConfig();
  MapConfig.EvictionPolicy evictionPolicy=mapConfig.getEvictionPolicy();
  Comparator<Record> comparator=null;
  if (evictionPolicy == MapConfig.EvictionPolicy.LRU) {
    comparator=new Comparator<Record>(){
      public int compare(      Record o1,      Record o2){
        RecordStatistics stats1=o1.getStatistics();
        RecordStatistics stats2=o2.getStatistics();
        Long t1=stats1 != null ? stats1.getLastAccessTime() : -1L;
        Long t2=stats2 != null ? stats2.getLastAccessTime() : -1L;
        return t1.compareTo(t2);
      }
    }
;
  }
 else   if (evictionPolicy == MapConfig.EvictionPolicy.LFU) {
    comparator=new Comparator<Record>(){
      public int compare(      Record o1,      Record o2){
        RecordStatistics stats1=o1.getStatistics();
        RecordStatistics stats2=o2.getStatistics();
        Integer h1=stats1 != null ? stats1.getHits() : -1;
        Integer h2=stats2 != null ? stats2.getHits() : -1;
        return h1.compareTo(h2);
      }
    }
;
  }
 else {
    throw new IllegalArgumentException("Illegal eviction policy: " + evictionPolicy);
  }
  final int evictionPercentage=mapConfig.getEvictionPercentage();
  int memberCount=nodeEngine.getClusterService().getMembers().size();
  int targetSizePerPartition=-1;
  int maxPartitionSize=0;
  final MaxSizeConfig maxSizeConfig=mapConfig.getMaxSizeConfig();
  final MaxSizePolicy maxSizePolicy=maxSizeConfig.getMaxSizePolicy();
  final int maxSize=maxSizeConfig.getSize();
  if (maxSizePolicy == MaxSizePolicy.PER_NODE) {
    maxPartitionSize=(maxSize * memberCount / nodeEngine.getPartitionService().getPartitionCount());
    targetSizePerPartition=Double.valueOf(maxPartitionSize * ((100 - evictionPercentage) / 100.0)).intValue();
  }
 else   if (maxSizePolicy == MaxSizePolicy.PER_PARTITION) {
    maxPartitionSize=maxSize;
    targetSizePerPartition=Double.valueOf(maxPartitionSize * ((100 - evictionPercentage) / 100.0)).intValue();
  }
  final String name=mapContainer.getName();
  for (int i=0; i < ExecutorConfig.DEFAULT_POOL_SIZE; i++) {
    EvictRunner runner=new EvictRunner(name,i,maxSizePolicy,targetSizePerPartition,comparator,evictionPercentage);
    nodeEngine.getExecutionService().execute("hz:map-evict",runner);
  }
}
