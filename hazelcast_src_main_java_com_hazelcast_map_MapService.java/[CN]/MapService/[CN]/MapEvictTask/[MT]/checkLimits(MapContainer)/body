{
  MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  MaxSizePolicy maxSizePolicy=maxSizeConfig.getMaxSizePolicy();
  String mapName=mapContainer.getName();
  int maxSize=maxSizeConfig.getSize() * 95 / 100;
  if (maxSizePolicy == MaxSizePolicy.PER_NODE || maxSizePolicy == MaxSizePolicy.PER_PARTITION) {
    int totalSize=0;
    for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
      Address owner=nodeEngine.getPartitionService().getPartitionOwner(i);
      if (nodeEngine.getThisAddress().equals(owner)) {
        final PartitionContainer container=partitionContainers[i];
        if (container == null) {
          return false;
        }
        int size=container.getRecordStore(mapName).size();
        if (maxSizePolicy == MaxSizePolicy.PER_PARTITION) {
          if (size >= maxSize) {
            return true;
          }
        }
 else {
          totalSize+=size;
        }
      }
    }
    return maxSizePolicy == MaxSizePolicy.PER_NODE && totalSize >= maxSize;
  }
  if (maxSizePolicy == MaxSizePolicy.USED_HEAP_SIZE || maxSizePolicy == MaxSizePolicy.USED_HEAP_PERCENTAGE) {
    long heapCost=0;
    final Address thisAddress=nodeEngine.getThisAddress();
    for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
      if (nodeEngine.getPartitionService().getPartition(i).isOwnerOrBackup(thisAddress)) {
        final PartitionContainer container=partitionContainers[i];
        if (container == null) {
          return false;
        }
        heapCost+=container.getRecordStore(mapName).getHeapCost();
      }
    }
    heapCost+=mapContainer.getNearCacheSizeEstimator().getSize();
    final long total=Runtime.getRuntime().totalMemory();
    final long used=heapCost;
    if (maxSizePolicy == MaxSizePolicy.USED_HEAP_SIZE) {
      return maxSize < (used / 1024 / 1024);
    }
 else {
      return maxSize < (100d * used / total);
    }
  }
  return false;
}
