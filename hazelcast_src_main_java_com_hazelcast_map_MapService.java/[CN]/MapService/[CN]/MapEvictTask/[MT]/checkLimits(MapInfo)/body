{
  MaxSizeConfig maxSizeConfig=mapInfo.getMapConfig().getMaxSizeConfig();
  String mapName=mapInfo.getName();
  String maxSizePolicy=maxSizeConfig.getMaxSizePolicy();
  if (maxSizePolicy.equals("CLUSTER_WIDE") || maxSizePolicy.equals("PER_JVM") || maxSizePolicy.equals("PER_PARTITION")) {
    int totalSize=0;
    Node node=nodeEngine.getNode();
    for (int i=0; i < nodeEngine.getPartitionCount(); i++) {
      Address owner=node.partitionService.getPartitionOwner(i);
      if (node.address.equals(owner)) {
        int size=partitionContainers[i].getRecordStore(mapName).getRecords().size();
        if (maxSizePolicy.equals("PER_PARTITION")) {
          if (size > maxSizeConfig.getSize())           return true;
        }
 else {
          totalSize+=size;
        }
      }
    }
    if (maxSizePolicy.equals("CLUSTER_WIDE")) {
      return totalSize * nodeEngine.getClusterService().getMembers().size() >= maxSizeConfig.getSize();
    }
 else     if (maxSizePolicy.equals("PER_JVM"))     return totalSize > maxSizeConfig.getSize();
 else     return false;
  }
  if (maxSizePolicy.equals("USED_HEAP_SIZE") || maxSizePolicy.equals("USED_HEAP_PERCENTAGE")) {
    long total=Runtime.getRuntime().totalMemory();
    long used=(total - Runtime.getRuntime().freeMemory());
    if (maxSizePolicy.equals("USED_HEAP_SIZE")) {
      return maxSizeConfig.getSize() > (used / 1024 / 1024);
    }
 else {
      return maxSizeConfig.getSize() > (used / total);
    }
  }
  return false;
}
