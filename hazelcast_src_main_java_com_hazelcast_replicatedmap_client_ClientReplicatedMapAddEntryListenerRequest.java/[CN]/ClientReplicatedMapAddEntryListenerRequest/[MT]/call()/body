{
  final ClientEndpoint endpoint=getEndpoint();
  final ReplicatedRecordStore replicatedRecordStore=getReplicatedRecordStore();
  EntryListener<Object,Object> listener=new EntryListener<Object,Object>(){
    private void handleEvent(    EntryEvent<Object,Object> event){
      if (endpoint.live()) {
        Object key=event.getKey();
        Object value=event.getValue();
        Object oldValue=event.getOldValue();
        EntryEventType eventType=event.getEventType();
        String uuid=event.getMember().getUuid();
        Portable portableEntryEvent=new ReplicatedMapPortableEntryEvent(key,value,oldValue,eventType,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    public void entryAdded(    EntryEvent<Object,Object> event){
      handleEvent(event);
    }
    public void entryRemoved(    EntryEvent<Object,Object> event){
      handleEvent(event);
    }
    public void entryUpdated(    EntryEvent<Object,Object> event){
      handleEvent(event);
    }
    public void entryEvicted(    EntryEvent<Object,Object> event){
      handleEvent(event);
    }
    @Override public void evictedAll(    MapWideEvent event){
    }
  }
;
  String registrationId;
  if (predicate == null) {
    registrationId=replicatedRecordStore.addEntryListener(listener,key);
  }
 else {
    registrationId=replicatedRecordStore.addEntryListener(listener,predicate,key);
  }
  endpoint.setListenerRegistration(ReplicatedMapService.SERVICE_NAME,getMapName(),registrationId);
  return registrationId;
}
