{
  String currentAddress=null;
  try {
    final Config config=node.getConfig();
    final String localAddress=System.getProperty("hazelcast.local.address");
    if (localAddress != null) {
      currentAddress=InetAddress.getByName(localAddress.trim()).getHostAddress();
    }
    if (currentAddress == null) {
      final Enumeration<NetworkInterface> enums=NetworkInterface.getNetworkInterfaces();
      interfaces:       while (enums.hasMoreElements()) {
        final NetworkInterface ni=enums.nextElement();
        final Enumeration<InetAddress> e=ni.getInetAddresses();
        while (e.hasMoreElements()) {
          final InetAddress inetAddress=e.nextElement();
          if (inetAddress instanceof Inet4Address) {
            final String address=inetAddress.getHostAddress();
            final List<String> interfaces=config.getNetworkConfig().getInterfaces().getLsInterfaces();
            if (config.getNetworkConfig().getInterfaces().isEnabled()) {
              if (matchAddress(address,interfaces)) {
                currentAddress=address;
                break interfaces;
              }
            }
 else {
              if (!inetAddress.isLoopbackAddress()) {
                currentAddress=address;
                break interfaces;
              }
            }
          }
        }
      }
      if (config.getNetworkConfig().getInterfaces().isEnabled() && currentAddress == null) {
        String msg="Hazelcast CANNOT start on this node. No matching network interface found. ";
        msg+="\nInterface matching must be either disabled or updated in the hazelcast.xml config file.";
        logger.log(Level.SEVERE,msg);
        return null;
      }
    }
    if (currentAddress == null) {
      currentAddress="127.0.0.1";
    }
    final InetAddress inetAddress=InetAddress.getByName(currentAddress);
    ServerSocket serverSocket=serverSocketChannel.socket();
    serverSocket.setReuseAddress(true);
    InetSocketAddress isa;
    int port=config.getPort();
    for (int i=0; i < 100; i++) {
      try {
        isa=new InetSocketAddress(inetAddress,port);
        serverSocket.bind(isa,100);
        break;
      }
 catch (      final Exception e) {
        if (config.isPortAutoIncrement()) {
          serverSocket=serverSocketChannel.socket();
          serverSocket.setReuseAddress(true);
          port++;
        }
 else {
          String msg="Port [" + port + "] is already use and auto-increment is "+ "disabled. Hazelcast cannot start.";
          logger.log(Level.SEVERE,msg);
          throw e;
        }
      }
    }
    serverSocketChannel.configureBlocking(false);
    return new Address(currentAddress,port);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}
