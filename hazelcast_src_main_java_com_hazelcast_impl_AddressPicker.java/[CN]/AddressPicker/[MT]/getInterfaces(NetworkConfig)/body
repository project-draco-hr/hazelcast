{
  final Collection<InterfaceDefinition> interfaces=new HashSet<InterfaceDefinition>();
  if (networkConfig.getInterfaces().isEnabled()) {
    final Collection<String> configInterfaces=networkConfig.getInterfaces().getInterfaces();
    for (    String configInterface : configInterfaces) {
      if (AddressUtil.isIpAddress(configInterface)) {
        interfaces.add(new InterfaceDefinition(configInterface));
      }
 else {
        logger.log(Level.INFO,"'" + configInterface + "' is not an IP address! Removing from interface list.");
      }
    }
    logger.log(Level.INFO,"Interfaces is enabled, trying to pick one address matching " + "to one of: " + interfaces);
  }
 else   if (networkConfig.getJoin().getTcpIpConfig().isEnabled()) {
    final Collection<String> possibleAddresses=TcpIpJoiner.getConfigurationMembers(node.config);
    for (    String possibleAddress : possibleAddresses) {
      final String s=AddressUtil.getAddressHolder(possibleAddress).address;
      if (AddressUtil.isIpAddress(s)) {
        interfaces.add(new InterfaceDefinition(s));
      }
 else {
        String address=resolveDomainName(s);
        logger.log(Level.INFO,"Updating interface list with " + address + " for domain name '"+ s+ "'.");
        interfaces.add(new InterfaceDefinition(s,address));
      }
    }
    logger.log(Level.INFO,"Interfaces is disabled, trying to pick one address from TCP-IP config " + "addresses: " + interfaces);
  }
  return interfaces;
}
