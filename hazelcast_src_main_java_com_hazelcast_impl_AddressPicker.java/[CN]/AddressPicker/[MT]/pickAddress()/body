{
  InetAddress currentInetAddress=null;
  try {
    final Config config=node.getConfig();
    final String localAddress=System.getProperty("hazelcast.local.localAddress");
    if (localAddress != null) {
      currentInetAddress=InetAddress.getByName(localAddress.trim());
    }
    if (currentInetAddress == null) {
      final Set<String> interfaces=new HashSet<String>();
      if (config.getNetworkConfig().getJoin().getTcpIpConfig().isEnabled()) {
        final Collection<Address> possibleAddresses=new TcpIpJoiner(node).getPossibleAddresses(config,null,logger);
        for (        Address possibleAddress : possibleAddresses) {
          interfaces.add(possibleAddress.getHost());
        }
      }
      if (config.getNetworkConfig().getInterfaces().isEnabled()) {
        interfaces.addAll(config.getNetworkConfig().getInterfaces().getInterfaces());
      }
      if (interfaces.contains("127.0.0.1") || interfaces.contains("localhost")) {
        currentInetAddress=InetAddress.getByName("127.0.0.1");
      }
 else {
        if (interfaces.size() > 0) {
          currentInetAddress=pickInetAddress(interfaces);
        }
        if (currentInetAddress == null) {
          if (config.getNetworkConfig().getInterfaces().isEnabled()) {
            String msg="Hazelcast CANNOT start on this node. No matching network interface found. ";
            msg+="\nInterface matching must be either disabled or updated in the hazelcast.xml config file.";
            logger.log(Level.SEVERE,msg);
            throw new RuntimeException(msg);
          }
 else {
            currentInetAddress=pickInetAddress(null);
          }
        }
      }
    }
    if (currentInetAddress != null) {
      currentInetAddress=AddressUtil.fixInet6AddressInterface(currentInetAddress);
    }
    if (currentInetAddress == null) {
      currentInetAddress=InetAddress.getByName("127.0.0.1");
    }
    final InetAddress inetAddress=currentInetAddress;
    final boolean reuseAddress=config.isReuseAddress();
    ServerSocket serverSocket=serverSocketChannel.socket();
    logger.log(Level.FINEST,"inet reuseAddress:" + reuseAddress);
    serverSocket.setReuseAddress(reuseAddress);
    serverSocket.setSoTimeout(1000);
    InetSocketAddress isa;
    int port=config.getPort();
    for (int i=0; i < 100; i++) {
      try {
        boolean bindAny=node.getGroupProperties().SOCKET_BIND_ANY.getBoolean();
        if (bindAny) {
          isa=new InetSocketAddress(port);
        }
 else {
          isa=new InetSocketAddress(inetAddress,port);
        }
        logger.log(Level.FINEST,"inet socket address:" + isa);
        serverSocket.bind(isa,100);
        break;
      }
 catch (      final Exception e) {
        if (config.isPortAutoIncrement()) {
          serverSocket=serverSocketChannel.socket();
          serverSocket.setReuseAddress(reuseAddress);
          port++;
        }
 else {
          String msg="Port [" + port + "] is already in use and auto-increment is "+ "disabled. Hazelcast cannot start.";
          logger.log(Level.SEVERE,msg,e);
          throw e;
        }
      }
    }
    serverSocketChannel.configureBlocking(false);
    return new Address(inetAddress,port);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw e;
  }
}
