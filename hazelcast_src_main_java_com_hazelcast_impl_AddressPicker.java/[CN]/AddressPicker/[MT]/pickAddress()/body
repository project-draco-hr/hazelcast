{
  String currentAddress=null;
  try {
    final Config config=node.getConfig();
    final String localAddress=System.getProperty("hazelcast.local.localAddress");
    if (localAddress != null) {
      currentAddress=InetAddress.getByName(localAddress.trim()).getHostAddress();
    }
    if (currentAddress == null) {
      final Set<String> interfaces=new HashSet<String>();
      if (config.getNetworkConfig().getJoin().getTcpIpConfig().isEnabled()) {
        Collection<Address> possibleAddresses=Node.getPossibleMembers(config,null,logger);
        for (        Address possibleAddress : possibleAddresses) {
          interfaces.add(possibleAddress.getHost());
        }
      }
      if (config.getNetworkConfig().getInterfaces().isEnabled()) {
        interfaces.addAll(config.getNetworkConfig().getInterfaces().getInterfaces());
      }
      if (interfaces.contains("127.0.0.1") || interfaces.contains("localhost")) {
        currentAddress="127.0.0.1";
      }
 else {
        if (interfaces.size() > 0) {
          final Enumeration<NetworkInterface> enums=NetworkInterface.getNetworkInterfaces();
          interfaces:           while (enums.hasMoreElements()) {
            final NetworkInterface ni=enums.nextElement();
            final Enumeration<InetAddress> e=ni.getInetAddresses();
            while (e.hasMoreElements()) {
              final InetAddress inetAddress=e.nextElement();
              if (inetAddress instanceof Inet4Address) {
                final String address=inetAddress.getHostAddress();
                if (matchAddress(address,interfaces)) {
                  currentAddress=address;
                  break interfaces;
                }
              }
            }
          }
        }
        if (currentAddress == null) {
          if (config.getNetworkConfig().getInterfaces().isEnabled()) {
            String msg="Hazelcast CANNOT start on this node. No matching network interface found. ";
            msg+="\nInterface matching must be either disabled or updated in the hazelcast.xml config file.";
            logger.log(Level.SEVERE,msg);
            throw new RuntimeException(msg);
          }
 else {
            final Enumeration<NetworkInterface> enums=NetworkInterface.getNetworkInterfaces();
            interfaces:             while (enums.hasMoreElements()) {
              final NetworkInterface ni=enums.nextElement();
              final Enumeration<InetAddress> e=ni.getInetAddresses();
              while (e.hasMoreElements()) {
                final InetAddress inetAddress=e.nextElement();
                if (inetAddress instanceof Inet4Address) {
                  if (!inetAddress.isLoopbackAddress()) {
                    currentAddress=inetAddress.getHostAddress();
                    break interfaces;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (currentAddress == null) {
      currentAddress="127.0.0.1";
    }
    final InetAddress inetAddress=InetAddress.getByName(currentAddress);
    final boolean reuseAddress=config.isReuseAddress();
    ServerSocket serverSocket=serverSocketChannel.socket();
    logger.log(Level.FINEST,"inet reuseAddress:" + reuseAddress);
    serverSocket.setReuseAddress(reuseAddress);
    serverSocket.setSoTimeout(1000);
    InetSocketAddress isa;
    int port=config.getPort();
    for (int i=0; i < 100; i++) {
      try {
        boolean bindAny=node.getGroupProperties().SOCKET_BIND_ANY.getBoolean();
        if (bindAny) {
          isa=new InetSocketAddress(port);
        }
 else {
          isa=new InetSocketAddress(inetAddress,port);
        }
        logger.log(Level.FINEST,"inet socket address:" + isa);
        serverSocket.bind(isa,100);
        break;
      }
 catch (      final Exception e) {
        if (config.isPortAutoIncrement()) {
          serverSocket=serverSocketChannel.socket();
          serverSocket.setReuseAddress(reuseAddress);
          port++;
        }
 else {
          String msg="Port [" + port + "] is already in use and auto-increment is "+ "disabled. Hazelcast cannot start.";
          logger.log(Level.SEVERE,msg,e);
          throw e;
        }
      }
    }
    serverSocketChannel.configureBlocking(false);
    return new Address(currentAddress,port);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw e;
  }
}
