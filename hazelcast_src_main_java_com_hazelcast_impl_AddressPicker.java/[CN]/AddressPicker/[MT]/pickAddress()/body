{
  if (address != null) {
    return;
  }
  try {
    final Config config=node.getConfig();
    final InetAddress inetAddress=pickInetAddress(config);
    final boolean reuseAddress=config.isReuseAddress();
    serverSocketChannel=ServerSocketChannel.open();
    final ServerSocket serverSocket=serverSocketChannel.socket();
    log(Level.FINEST,"inet reuseAddress:" + reuseAddress);
    serverSocket.setReuseAddress(reuseAddress);
    serverSocket.setSoTimeout(1000);
    InetSocketAddress isa;
    int port=config.getPort();
    for (int i=0; i < 100; i++) {
      try {
        boolean bindAny=node.getGroupProperties().SOCKET_BIND_ANY.getBoolean();
        if (bindAny) {
          isa=new InetSocketAddress(port);
        }
 else {
          isa=new InetSocketAddress(inetAddress,port);
        }
        log(Level.FINEST,"Trying to bind inet socket address:" + isa);
        serverSocket.bind(isa,100);
        log(Level.FINEST,"Bind successful to inet socket address:" + isa);
        break;
      }
 catch (      final Exception e) {
        if (config.isPortAutoIncrement()) {
          port++;
        }
 else {
          String msg="Port [" + port + "] is already in use and auto-increment is "+ "disabled. Hazelcast cannot start.";
          logger.log(Level.SEVERE,msg,e);
          throw e;
        }
      }
    }
    serverSocketChannel.configureBlocking(false);
    address=new Address(inetAddress,port);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    throw e;
  }
}
