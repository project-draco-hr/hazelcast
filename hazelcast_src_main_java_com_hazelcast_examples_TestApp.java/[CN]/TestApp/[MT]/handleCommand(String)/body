{
  if (command.contains("__")) {
    namespace=command.split("__")[0];
    command=command.substring(command.indexOf("__") + 2);
  }
  if (echo) {
    handleEcho(command);
  }
  if (command == null || command.startsWith("//"))   return;
  command=command.trim();
  if (command == null || command.length() == 0) {
    return;
  }
  String first=command;
  int spaceIndex=command.indexOf(' ');
  String[] argsSplit=command.split(" ");
  String[] args=new String[argsSplit.length];
  for (int i=0; i < argsSplit.length; i++) {
    args[i]=argsSplit[i].trim();
  }
  if (spaceIndex != -1) {
    first=args[0];
  }
  if (command.startsWith("help")) {
    handleHelp(command);
  }
 else   if (first.startsWith("#") && first.length() > 1) {
    int repeat=Integer.parseInt(first.substring(1));
    long t0=Clock.currentTimeMillis();
    for (int i=0; i < repeat; i++) {
      handleCommand(command.substring(first.length()).replaceAll("\\$i","" + i));
    }
    println("ops/s = " + repeat * 1000 / (Clock.currentTimeMillis() - t0));
    return;
  }
 else   if (first.startsWith("&") && first.length() > 1) {
    final int fork=Integer.parseInt(first.substring(1));
    ExecutorService pool=Executors.newFixedThreadPool(fork);
    final String threadCommand=command.substring(first.length());
    for (int i=0; i < fork; i++) {
      final int threadID=i;
      pool.submit(new Runnable(){
        public void run(){
          String command=threadCommand;
          String[] threadArgs=command.replaceAll("\\$t","" + threadID).trim().split(" ");
          if ("m.putmany".equals(threadArgs[0]) || "m.removemany".equals(threadArgs[0])) {
            if (threadArgs.length < 4) {
              command+=" " + Integer.parseInt(threadArgs[1]) * threadID;
            }
          }
          handleCommand(command);
        }
      }
);
    }
    pool.shutdown();
    try {
      pool.awaitTermination(60 * 60,TimeUnit.SECONDS);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (first.startsWith("@")) {
    handleAt(first);
  }
 else   if (command.indexOf(';') != -1) {
    handleColon(command);
    return;
  }
 else   if ("silent".equals(first)) {
    silent=Boolean.parseBoolean(args[1]);
  }
 else   if ("shutdown".equals(first)) {
    hazelcast.getLifecycleService().shutdown();
  }
 else   if ("echo".equals(first)) {
    echo=Boolean.parseBoolean(args[1]);
    println("echo: " + echo);
  }
 else   if ("ns".equals(first)) {
    handleNamespace(args);
  }
 else   if ("whoami".equals(first)) {
    handleWhoami();
  }
 else   if ("who".equals(first)) {
    handleWho();
  }
 else   if ("jvm".equals(first)) {
    handleJvm();
  }
 else   if (first.contains("ock") && !first.contains(".")) {
    handleLock(args);
  }
 else   if (first.contains(".size")) {
    handleSize(args);
  }
 else   if (first.contains(".clear")) {
    handleClear(args);
  }
 else   if (first.contains(".destroy")) {
    handleDestroy(args);
  }
 else   if (first.contains(".iterator")) {
    handleIterator(args);
  }
 else   if (first.contains(".contains")) {
    handleContains(args);
  }
 else   if (first.contains(".stats")) {
    handStats(args);
  }
 else   if ("t.publish".equals(first)) {
    handleTopicPublish(args);
  }
 else   if ("q.offer".equals(first)) {
    handleQOffer(args);
  }
 else   if ("q.take".equals(first)) {
    handleQTake(args);
  }
 else   if ("q.poll".equals(first)) {
    handleQPoll(args);
  }
 else   if ("q.peek".equals(first)) {
    handleQPeek(args);
  }
 else   if ("q.capacity".equals(first)) {
    handleQCapacity(args);
  }
 else   if ("q.offermany".equals(first)) {
    handleQOfferMany(args);
  }
 else   if ("q.pollmany".equals(first)) {
    handleQPollMany(args);
  }
 else   if ("s.add".equals(first)) {
    handleSetAdd(args);
  }
 else   if ("s.remove".equals(first)) {
    handleSetRemove(args);
  }
 else   if ("s.addmany".equals(first)) {
    handleSetAddMany(args);
  }
 else   if ("s.removemany".equals(first)) {
    handleSetRemoveMany(args);
  }
 else   if (first.equals("m.replace")) {
    handleMapReplace(args);
  }
 else   if (first.equalsIgnoreCase("m.putIfAbsent")) {
    handleMapPutIfAbsent(args);
  }
 else   if (first.equals("m.putAsync")) {
    handleMapPutAsync(args);
  }
 else   if (first.equals("m.getAsync")) {
    handleMapGetAsync(args);
  }
 else   if (first.equals("m.put")) {
    handleMapPut(args);
  }
 else   if (first.equals("m.get")) {
    handleMapGet(args);
  }
 else   if (first.equalsIgnoreCase("m.getMapEntry")) {
    handleMapGetMapEntry(args);
  }
 else   if (first.equals("m.remove")) {
    handleMapRemove(args);
  }
 else   if (first.equals("m.evict")) {
    handleMapEvict(args);
  }
 else   if (first.equals("m.putmany") || first.equalsIgnoreCase("m.putAll")) {
    handleMapPutMany(args);
  }
 else   if (first.equals("m.getmany")) {
    handleMapGetMany(args);
  }
 else   if (first.equals("m.removemany")) {
    handleMapRemoveMany(args);
  }
 else   if (command.equalsIgnoreCase("m.localKeys")) {
    handleMapLocalKeys();
  }
 else   if (command.equals("m.keys")) {
    handleMapKeys();
  }
 else   if (command.equals("m.values")) {
    handleMapValues();
  }
 else   if (command.equals("m.entries")) {
    handleMapEntries();
  }
 else   if (first.equals("m.lock")) {
    handleMapLock(args);
  }
 else   if (first.equalsIgnoreCase("m.tryLock")) {
    handleMapTryLock(args);
  }
 else   if (first.equals("m.unlock")) {
    handleMapUnlock(args);
  }
 else   if (first.contains(".addListener")) {
    handleAddListener(args);
  }
 else   if (first.equals("m.removeMapListener")) {
    handleRemoveListener(args);
  }
 else   if (first.equals("m.unlock")) {
    handleMapUnlock(args);
  }
 else   if (first.equals("mm.put")) {
    handleMultiMapPut(args);
  }
 else   if (first.equals("mm.get")) {
    handleMultiMapGet(args);
  }
 else   if (first.equals("mm.remove")) {
    handleMultiMapRemove(args);
  }
 else   if (command.equals("mm.keys")) {
    handleMultiMapKeys();
  }
 else   if (command.equals("mm.values")) {
    handleMultiMapValues();
  }
 else   if (command.equals("mm.entries")) {
    handleMultiMapEntries();
  }
 else   if (first.equals("mm.lock")) {
    handleMultiMapLock(args);
  }
 else   if (first.equalsIgnoreCase("mm.tryLock")) {
    handleMultiMapTryLock(args);
  }
 else   if (first.equals("mm.unlock")) {
    handleMultiMapUnlock(args);
  }
 else   if (first.equals("l.add")) {
    handleListAdd(args);
  }
 else   if (first.equals("l.set")) {
    handleListSet(args);
  }
 else   if ("l.addmany".equals(first)) {
    handleListAddMany(args);
  }
 else   if (first.equals("l.remove")) {
    handleListRemove(args);
  }
 else   if (first.equals("l.contains")) {
    handleListContains(args);
  }
 else   if ("a.get".equals(first)) {
    handleAtomicNumberGet(args);
  }
 else   if ("a.set".equals(first)) {
    handleAtomicNumberSet(args);
  }
 else   if ("a.inc".equals(first)) {
    handleAtomicNumberInc(args);
  }
 else   if ("a.dec".equals(first)) {
    handleAtomicNumberDec(args);
  }
 else   if (first.equals("partitions")) {
    handlePartitions(args);
  }
 else   if (first.equalsIgnoreCase("instances")) {
    handleInstances(args);
  }
 else   if (first.equalsIgnoreCase("quit") || first.equalsIgnoreCase("exit")) {
    System.exit(0);
  }
 else   if (first.startsWith("e.simulate")) {
  }
 else {
    println("type 'help' for help");
  }
}
