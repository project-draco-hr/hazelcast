{
  checkNotNull(key,NULL_KEY_IS_NOT_ALLOWED);
  initNearCache();
  final Data keyData=toData(key);
  if (nearCache != null) {
    Object cached=nearCache.get(keyData);
    if (cached != null && !ClientNearCache.NULL_OBJECT.equals(cached)) {
      return new CompletedFuture(getContext().getSerializationService(),cached,getContext().getExecutionService().getAsyncExecutor());
    }
  }
  final ClientMessage request=MapGetAsyncParameters.encode(name,keyData,ThreadUtil.getThreadId());
  try {
    final ICompletableFuture future=invokeOnKeyOwner(request,keyData);
    final DelegatingFuture<V> delegatingFuture=new DelegatingFuture<V>(future,getContext().getSerializationService());
    delegatingFuture.andThen(new ExecutionCallback<V>(){
      @Override public void onResponse(      V response){
        if (nearCache != null) {
          nearCache.put(keyData,response);
        }
      }
      @Override public void onFailure(      Throwable t){
      }
    }
);
    return delegatingFuture;
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}
