{
  checkNotNull(key,NULL_KEY_IS_NOT_ALLOWED);
  initNearCache();
  final Data keyData=toData(key);
  SerializationService serializationService=getContext().getSerializationService();
  if (nearCache != null) {
    Object cached=nearCache.get(keyData);
    if (cached != null && !ClientNearCache.NULL_OBJECT.equals(cached)) {
      return new CompletedFuture<V>(serializationService,cached,getContext().getExecutionService().getAsyncExecutor());
    }
  }
  final ClientMessage request=MapGetAsyncParameters.encode(name,keyData,ThreadUtil.getThreadId());
  try {
    ClientInvocationFuture future=invokeOnKeyOwner(request,keyData);
    ClientDelegatingFuture<V> delegatingFuture=new ClientDelegatingFuture<V>(future,serializationService);
    if (nearCache != null) {
      delegatingFuture.andThenInternal(new ExecutionCallback<Data>(){
        @Override public void onResponse(        Data response){
          if (nearCache != null) {
            nearCache.put(keyData,response);
          }
        }
        @Override public void onFailure(        Throwable t){
        }
      }
);
    }
    return delegatingFuture;
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}
