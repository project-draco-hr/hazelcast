{
  ClientPartitionService partitionService=getContext().getPartitionService();
  Map<Integer,Map<Data,Data>> entryMap=new HashMap<Integer,Map<Data,Data>>(partitionService.getPartitionCount());
  for (  Entry<? extends K,? extends V> entry : m.entrySet()) {
    checkNotNull(entry.getKey(),NULL_KEY_IS_NOT_ALLOWED);
    checkNotNull(entry.getValue(),NULL_VALUE_IS_NOT_ALLOWED);
    final Data keyData=toData(entry.getKey());
    invalidateNearCache(keyData);
    int partitionId=partitionService.getPartitionId(entry.getKey());
    if (!entryMap.containsKey(partitionId)) {
      entryMap.put(partitionId,new HashMap<Data,Data>());
    }
    entryMap.get(partitionId).put(keyData,toData(entry.getValue()));
  }
  List<Future<?>> futures=new ArrayList<Future<?>>(entryMap.size());
  for (  final Map.Entry<Integer,Map<Data,Data>> entry : entryMap.entrySet()) {
    final Integer partitionId=entry.getKey();
    ClientMessage request=MapPutAllCodec.encodeRequest(name,entry.getValue());
    futures.add(new ClientInvocation(getClient(),request,partitionService.getPartitionOwner(partitionId)).invoke());
  }
  try {
    for (    Future<?> future : futures) {
      future.get();
    }
  }
 catch (  Exception e) {
    ExceptionUtil.rethrow(e);
  }
}
