{
  final EventCountingEntryProcessor processor=new EventCountingEntryProcessor();
  final SecondsBasedEntryTaskScheduler scheduler=new SecondsBasedEntryTaskScheduler(executorService,processor,scheduleType);
  for (int i=0; i < NUMBER_OF_THREADS; i++) {
    final Thread thread=new Thread(){
      final Random random=new Random();
      @Override public void run(){
        for (int j=0; j < NUMBER_OF_EVENTS_PER_THREAD; j++) {
          scheduler.schedule(getDelayMillis(),j,null);
        }
      }
      private int getDelayMillis(){
        return random.nextInt(5000) + 1;
      }
    }
;
    thread.start();
  }
  final long numberOfExpectedEvents=getExpectedEventCount(scheduleType,NUMBER_OF_THREADS,NUMBER_OF_EVENTS_PER_THREAD);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(numberOfExpectedEvents,processor.getNumberOfEvents());
    }
  }
);
}
