{
  List<HazelcastInstance> instances=getCreatedInstancesShuffledAfterWarmedUp();
  List<HazelcastInstance> survivingInstances=new ArrayList<HazelcastInstance>(instances);
  List<HazelcastInstance> terminatingInstances=survivingInstances.subList(0,numberOfNodesToCrash);
  survivingInstances=survivingInstances.subList(numberOfNodesToCrash,instances.size());
  HazelcastInstance instance=survivingInstances.get(0);
  HazelcastServerCachingProvider cachingProvider=createCachingProvider(instance);
  CacheManager cacheManager=cachingProvider.getCacheManager();
  List<EventCollectingCachePartitionLostListener> listeners=registerListeners(cacheManager);
  if (withData) {
    for (int i=0; i < getNodeCount(); i++) {
      Cache<Integer,Integer> cache=cacheManager.getCache(getIthCacheName(i));
      for (int j=0; j < getCacheEntryCount(); j++) {
        cache.put(j,j);
      }
    }
  }
  final String log="Surviving: " + survivingInstances + " Terminating: "+ terminatingInstances;
  Map<Integer,Integer> survivingPartitions=getMinReplicaIndicesByPartitionId(survivingInstances);
  stopInstances(terminatingInstances,nodeLeaveType);
  waitAllForSafeState(survivingInstances);
  if (shouldExpectPartitionLostEvents) {
    for (int i=0; i < getNodeCount(); i++) {
      assertListenerInvocationsEventually(log,i,numberOfNodesToCrash,listeners.get(i),survivingPartitions);
    }
  }
 else {
    for (    final EventCollectingCachePartitionLostListener listener : listeners) {
      assertTrueAllTheTime(new AssertTask(){
        @Override public void run() throws Exception {
          assertTrue(listener.getEvents().isEmpty());
        }
      }
,1);
    }
  }
  for (int i=0; i < getNodeCount(); i++) {
    cacheManager.destroyCache(getIthCacheName(i));
  }
  cacheManager.close();
  cachingProvider.close();
}
