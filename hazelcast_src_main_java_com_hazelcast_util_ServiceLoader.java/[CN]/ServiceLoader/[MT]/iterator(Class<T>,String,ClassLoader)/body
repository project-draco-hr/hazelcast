{
  final Set<ServiceDefinition> serviceDefinitions=new HashSet<ServiceDefinition>();
  final Set<ClassLoader> classLoaders=selectClassLoaders(classLoader);
  for (  ClassLoader selectedClassLoader : classLoaders) {
    serviceDefinitions.addAll(parse(factoryId,selectedClassLoader));
  }
  if (serviceDefinitions.isEmpty()) {
    Logger.getLogger(ServiceLoader.class).warning("Service loader could not load 'META-INF/services/" + factoryId + "' It may be empty or does not exist.");
  }
  return new Iterator<T>(){
    final Iterator<ServiceDefinition> iterator=serviceDefinitions.iterator();
    public boolean hasNext(){
      return iterator.hasNext();
    }
    public T next(){
      final ServiceDefinition definition=iterator.next();
      try {
        String className=definition.className;
        ClassLoader classLoader=definition.classLoader;
        return clazz.cast(ClassLoaderUtil.newInstance(classLoader,className));
      }
 catch (      Exception e) {
        throw new HazelcastException(e);
      }
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
