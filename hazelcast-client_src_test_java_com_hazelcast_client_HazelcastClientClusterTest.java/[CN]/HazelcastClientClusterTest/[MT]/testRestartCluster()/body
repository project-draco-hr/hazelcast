{
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(new Config());
  final ClientProperties clientProperties=ClientProperties.createBaseClientProperties(GroupConfig.DEFAULT_GROUP_NAME,GroupConfig.DEFAULT_GROUP_PASSWORD);
  clientProperties.setPropertyValue(ClientPropertyName.INIT_CONNECTION_ATTEMPTS_LIMIT,"2");
  clientProperties.setPropertyValue(ClientPropertyName.RECONNECTION_ATTEMPTS_LIMIT,"2");
  clientProperties.setPropertyValue(ClientPropertyName.RECONNECTION_TIMEOUT,"500");
  HazelcastClient client=newHazelcastClient(clientProperties,h1);
  final IMap<String,String> map=client.getMap("default");
  final List<String> values=new CopyOnWriteArrayList<String>();
  map.addEntryListener(new EntryAdapter<String,String>(){
    @Override public void entryAdded(    EntryEvent<String,String> event){
      values.add(event.getValue());
    }
    @Override public void entryUpdated(    EntryEvent<String,String> event){
      values.add(event.getValue());
    }
  }
,true);
  final BlockingQueue<LifecycleState> states=new LinkedBlockingQueue<LifecycleState>();
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    public void stateChanged(    LifecycleEvent event){
      states.add(event.getState());
    }
  }
);
  map.put("smth","nothing1");
  Thread.sleep(50L);
  assertArrayEquals(values.toString(),new String[]{"nothing1"},values.toArray(new String[0]));
  h1.getLifecycleService().shutdown();
  assertEquals(LifecycleState.CLIENT_CONNECTION_LOST,states.poll(500L,TimeUnit.MILLISECONDS));
  Thread.sleep(50L);
  try {
    map.put("smth","nothing2");
    fail("nothing2");
  }
 catch (  NoMemberAvailableException e) {
  }
  try {
    map.put("smth","nothing3");
    fail("nothing3");
  }
 catch (  NoMemberAvailableException e) {
  }
  h1=Hazelcast.newHazelcastInstance(new Config());
  assertEquals(LifecycleState.CLIENT_CONNECTION_OPENING,states.poll(500L,TimeUnit.MILLISECONDS));
  assertEquals(LifecycleState.CLIENT_CONNECTION_OPENED,states.poll(30000L,TimeUnit.MILLISECONDS));
  map.put("smth","nothing4");
  Thread.sleep(50L);
  assertArrayEquals(values.toString(),new String[]{"nothing1","nothing4"},values.toArray(new String[0]));
}
