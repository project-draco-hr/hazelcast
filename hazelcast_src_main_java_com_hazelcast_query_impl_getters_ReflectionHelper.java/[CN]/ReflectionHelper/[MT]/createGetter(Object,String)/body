{
  if (obj == null || obj == IndexImpl.NULL) {
    return NULL_GETTER;
  }
  final Class targetClazz=obj.getClass();
  Class clazz=targetClazz;
  Getter getter;
  try {
    Getter parent=null;
    List<String> possibleMethodNames=new ArrayList<String>(INITIAL_CAPACITY);
    for (    final String fullname : attribute.split("\\.")) {
      String baseName=removeModifierSuffix(fullname);
      String modifier=getModifierSuffix(fullname,baseName);
      Getter localGetter=null;
      possibleMethodNames.clear();
      possibleMethodNames.add(baseName);
      final String camelName=Character.toUpperCase(baseName.charAt(0)) + baseName.substring(1);
      possibleMethodNames.add("get" + camelName);
      possibleMethodNames.add("is" + camelName);
      if (baseName.equals(THIS_ATTRIBUTE_NAME.value())) {
        localGetter=GetterFactory.newThisGetter(parent,obj);
      }
 else {
        if (parent != null) {
          clazz=parent.getReturnType();
        }
        for (        String methodName : possibleMethodNames) {
          try {
            final Method method=clazz.getMethod(methodName);
            method.setAccessible(true);
            localGetter=GetterFactory.newMethodGetter(obj,parent,method,modifier);
            if (localGetter == NULL_GETTER) {
              return localGetter;
            }
            clazz=method.getReturnType();
            break;
          }
 catch (          NoSuchMethodException ignored) {
            EmptyStatement.ignore(ignored);
          }
        }
        if (localGetter == null) {
          try {
            final Field field=clazz.getField(baseName);
            localGetter=GetterFactory.newFieldGetter(obj,parent,field,modifier);
            if (localGetter == NULL_GETTER) {
              return localGetter;
            }
            clazz=field.getType();
          }
 catch (          NoSuchFieldException ignored) {
            EmptyStatement.ignore(ignored);
          }
        }
        if (localGetter == null) {
          Class c=clazz;
          while (!c.isInterface() && !Object.class.equals(c)) {
            try {
              final Field field=c.getDeclaredField(baseName);
              field.setAccessible(true);
              localGetter=GetterFactory.newFieldGetter(obj,parent,field,modifier);
              if (localGetter == NULL_GETTER) {
                return NULL_GETTER;
              }
              clazz=field.getType();
              break;
            }
 catch (            NoSuchFieldException ignored) {
              c=c.getSuperclass();
            }
          }
        }
      }
      if (localGetter == null) {
        throw new IllegalArgumentException("There is no suitable accessor for '" + baseName + "' on class '"+ clazz+ "'");
      }
      parent=localGetter;
    }
    getter=parent;
    return getter;
  }
 catch (  Throwable e) {
    throw new QueryException(e);
  }
}
