{
  if (obj == null || obj == IndexImpl.NULL) {
    return NULL_GETTER;
  }
  final Class targetClazz=obj.getClass();
  Class clazz=targetClazz;
  Getter getter=get(clazz,attribute);
  if (getter != null) {
    return getter;
  }
  try {
    Getter parent=null;
    List<String> possibleMethodNames=new ArrayList<String>(INITIAL_CAPACITY);
    for (    final String name : attribute.split("\\.")) {
      Getter localGetter=null;
      possibleMethodNames.clear();
      possibleMethodNames.add(name);
      final String camelName=Character.toUpperCase(name.charAt(0)) + name.substring(1);
      possibleMethodNames.add("get" + camelName);
      possibleMethodNames.add("is" + camelName);
      if (name.equals(THIS_ATTRIBUTE_NAME)) {
        localGetter=new ThisGetter(parent,obj);
      }
 else {
        for (        String methodName : possibleMethodNames) {
          try {
            final Method method=clazz.getMethod(methodName);
            method.setAccessible(true);
            localGetter=new MethodGetter(parent,method);
            clazz=method.getReturnType();
            break;
          }
 catch (          NoSuchMethodException ignored) {
            EmptyStatement.ignore(ignored);
          }
        }
        if (localGetter == null) {
          try {
            final Field field=clazz.getField(name);
            localGetter=new FieldGetter(parent,field);
            clazz=field.getType();
          }
 catch (          NoSuchFieldException ignored) {
            EmptyStatement.ignore(ignored);
          }
        }
        if (localGetter == null) {
          Class c=clazz;
          while (!c.isInterface() && !Object.class.equals(c)) {
            try {
              final Field field=c.getDeclaredField(name);
              field.setAccessible(true);
              localGetter=new FieldGetter(parent,field);
              clazz=field.getType();
              break;
            }
 catch (            NoSuchFieldException ignored) {
              c=c.getSuperclass();
            }
          }
        }
      }
      if (localGetter == null) {
        throw new IllegalArgumentException("There is no suitable accessor for '" + name + "' on class '"+ clazz+ "'");
      }
      parent=localGetter;
    }
    getter=parent;
    if (getter.isCacheable()) {
      getter=set(targetClazz,attribute,getter);
    }
    return getter;
  }
 catch (  Throwable e) {
    throw new QueryException(e);
  }
}
