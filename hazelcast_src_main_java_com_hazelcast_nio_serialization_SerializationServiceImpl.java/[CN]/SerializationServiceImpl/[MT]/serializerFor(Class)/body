{
  if (DataSerializable.class.isAssignableFrom(type)) {
    return dataSerializerAdapter;
  }
 else   if (Portable.class.isAssignableFrom(type)) {
    return portableSerializerAdapter;
  }
 else {
    final SerializerAdapter serializer;
    if ((serializer=constantTypesMap.get(type)) != null) {
      return serializer;
    }
  }
  SerializerAdapter serializer=typeMap.get(type);
  if (serializer == null) {
    Class typeSuperclass=type.getSuperclass();
    final Set<Class> interfaces=new LinkedHashSet<Class>(5);
    getInterfaces(type,interfaces);
    while (typeSuperclass != null) {
      if ((serializer=registerFromSuperType(type,typeSuperclass)) != null) {
        break;
      }
      getInterfaces(typeSuperclass,interfaces);
      typeSuperclass=typeSuperclass.getSuperclass();
    }
    if (serializer == null) {
      for (      Class typeInterface : interfaces) {
        if ((serializer=registerFromSuperType(type,typeInterface)) != null) {
          break;
        }
      }
    }
    if (serializer == null && (serializer=global.get()) != null) {
      safeRegister(type,serializer);
    }
  }
  return serializer;
}
