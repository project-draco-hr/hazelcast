{
  if (DataSerializable.class.isAssignableFrom(type)) {
    return dataSerializer;
  }
 else   if (Portable.class.isAssignableFrom(type)) {
    return portableSerializer;
  }
 else {
    final TypeSerializer serializer;
    if ((serializer=constantsTypeMap.get(type)) != null) {
      return serializer;
    }
  }
  TypeSerializer serializer=typeMap.get(type);
  if (serializer == null) {
    Class typeSuperclass=type.getSuperclass();
    List<Class> interfaces=new LinkedList<Class>();
    Collections.addAll(interfaces,type.getInterfaces());
    while (typeSuperclass != null) {
      if ((serializer=registerFromSuperType(type,typeSuperclass)) != null) {
        break;
      }
      Collections.addAll(interfaces,typeSuperclass.getInterfaces());
      typeSuperclass=typeSuperclass.getSuperclass();
    }
    if (serializer == null) {
      for (      Class typeInterface : interfaces) {
        if ((serializer=registerFromSuperType(type,typeInterface)) != null) {
          break;
        }
      }
    }
    if (serializer == null && (serializer=fallback.get()) != null) {
      safeRegister(type,serializer);
    }
  }
  return serializer;
}
