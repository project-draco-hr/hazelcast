{
  this.managedContext=managedContext;
  serializationContext=new SerializationContextImpl(portableFactory,version);
  registerDefault(DataSerializable.class,dataSerializer=new DataSerializer());
  registerDefault(Portable.class,portableSerializer=new PortableSerializer(serializationContext));
  registerDefault(Byte.class,new ByteSerializer());
  registerDefault(Boolean.class,new BooleanSerializer());
  registerDefault(Character.class,new CharSerializer());
  registerDefault(Short.class,new ShortSerializer());
  registerDefault(Integer.class,new IntegerSerializer());
  registerDefault(Long.class,new LongSerializer());
  registerDefault(Float.class,new FloatSerializer());
  registerDefault(Double.class,new DoubleSerializer());
  registerDefault(byte[].class,new ByteArraySerializer());
  registerDefault(char[].class,new CharArraySerializer());
  registerDefault(short[].class,new ShortArraySerializer());
  registerDefault(int[].class,new IntegerArraySerializer());
  registerDefault(long[].class,new LongArraySerializer());
  registerDefault(float[].class,new FloatArraySerializer());
  registerDefault(double[].class,new DoubleArraySerializer());
  registerDefault(String.class,new StringSerializer());
  safeRegister(Date.class,new DateSerializer());
  safeRegister(BigInteger.class,new BigIntegerSerializer());
  safeRegister(BigDecimal.class,new BigDecimalSerializer());
  safeRegister(Externalizable.class,new Externalizer());
  safeRegister(Serializable.class,new ObjectSerializer());
  safeRegister(Class.class,new ClassSerializer());
}
