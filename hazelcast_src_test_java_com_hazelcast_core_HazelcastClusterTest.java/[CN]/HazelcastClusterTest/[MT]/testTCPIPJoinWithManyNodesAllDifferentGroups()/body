{
  final int count=35;
  System.setProperty("hazelcast.mancenter.enabled","false");
  final CountDownLatch latch=new CountDownLatch(count);
  final ConcurrentHashMap<Integer,HazelcastInstance> mapOfInstances=new ConcurrentHashMap<Integer,HazelcastInstance>();
  final Random random=new Random(Clock.currentTimeMillis());
  for (int i=0; i < count; i++) {
    final int seed=i;
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(random.nextInt(5) * 1000);
          final Config config=new Config();
          config.getGroupConfig().setName("group" + seed);
          config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
          TcpIpConfig tcpIpConfig=config.getNetworkConfig().getJoin().getTcpIpConfig();
          tcpIpConfig.setEnabled(true);
          int port=12301;
          config.setPortAutoIncrement(false);
          config.setPort(port + seed);
          for (int i=0; i < count; i++) {
            tcpIpConfig.addAddress(new Address("127.0.0.1",port + i));
          }
          HazelcastInstance h=Hazelcast.newHazelcastInstance(config);
          mapOfInstances.put(seed,h);
          latch.countDown();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
).start();
  }
  assertTrue(latch.await(200,TimeUnit.SECONDS));
  for (  HazelcastInstance h : mapOfInstances.values()) {
    Assert.assertEquals(1,h.getCluster().getMembers().size());
  }
}
