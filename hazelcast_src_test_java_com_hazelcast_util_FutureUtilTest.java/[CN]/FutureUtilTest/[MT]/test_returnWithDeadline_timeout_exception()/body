{
  AtomicBoolean waitLock=new AtomicBoolean(true);
  ExecutorService executorService=Executors.newFixedThreadPool(2);
  List<Future<Integer>> futures=new ArrayList<Future<Integer>>();
  for (int i=0; i < 2; i++) {
    Future<Integer> submit=(Future<Integer>)executorService.submit(new TimeoutingTask(waitLock));
    futures.add(submit);
  }
  returnWithDeadline(futures,1,TimeUnit.SECONDS,new ExceptionHandler(){
    @Override public void handleException(    Throwable throwable){
      if (throwable instanceof TimeoutException) {
        ExceptionUtil.sneakyThrow(throwable);
      }
      throw ExceptionUtil.rethrow(throwable);
    }
  }
);
}
