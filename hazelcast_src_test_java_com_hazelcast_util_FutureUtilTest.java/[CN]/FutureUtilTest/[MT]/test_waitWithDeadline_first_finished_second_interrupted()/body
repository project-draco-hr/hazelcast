{
  AtomicBoolean waitLock=new AtomicBoolean(true);
  final AtomicBoolean interrupted=new AtomicBoolean(false);
  ExecutorService executorService=Executors.newFixedThreadPool(2);
  List<Future> futures=new ArrayList<Future>();
  for (int i=0; i < 2; i++) {
    futures.add(executorService.submit(new BlockingTask(waitLock,interrupted)));
  }
  try {
    waitWithDeadline(futures,5,TimeUnit.SECONDS,logAllExceptions(Level.WARNING));
  }
 catch (  TimeoutException e) {
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(true,interrupted.get());
      }
    }
);
    return;
  }
  fail();
}
