{
  if (echo) {
    if (Thread.currentThread().getName().toLowerCase().indexOf("main") < 0)     System.out.println(" [" + Thread.currentThread().getName() + "] "+ command);
 else     System.out.println(command);
  }
  if (command == null || command.startsWith("//"))   return;
  command=command.trim();
  if (command == null || command.length() == 0) {
    return;
  }
  String first=command;
  int spaceIndex=command.indexOf(' ');
  String[] argsSplit=command.split(" ");
  String[] args=new String[argsSplit.length];
  for (int i=0; i < argsSplit.length; i++) {
    args[i]=argsSplit[i].trim();
  }
  if (spaceIndex != -1) {
    first=args[0];
  }
  if (command.startsWith("help")) {
    handleHelp(command);
  }
 else   if (first.startsWith("#") && first.length() > 1) {
    int repeat=Integer.parseInt(first.substring(1));
    long t0=System.currentTimeMillis();
    for (int i=0; i < repeat; i++) {
      handleCommand(command.substring(first.length()).replaceAll("\\$i","" + i));
    }
    System.out.println("ops/s = " + repeat * 1000 / (System.currentTimeMillis() - t0));
    return;
  }
 else   if (first.startsWith("&") && first.length() > 1) {
    final int fork=Integer.parseInt(first.substring(1));
    ExecutorService pool=Executors.newFixedThreadPool(fork);
    final String threadCommand=command.substring(first.length());
    for (int i=0; i < fork; i++) {
      final int threadID=i;
      pool.submit(new Runnable(){
        public void run(){
          String command=threadCommand;
          String[] threadArgs=command.replaceAll("\\$t","" + threadID).trim().split(" ");
          if ("m.putmany".equals(threadArgs[0]) || "m.removemany".equals(threadArgs[0])) {
            if (threadArgs.length < 4) {
              command+=" " + Integer.parseInt(threadArgs[1]) * threadID;
            }
          }
          handleCommand(command);
        }
      }
);
    }
    pool.shutdown();
    try {
      pool.awaitTermination(60 * 60,TimeUnit.SECONDS);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (first.startsWith("@")) {
    if (first.length() == 1) {
      System.out.println("usage: @<file-name>");
      return;
    }
    File f=new File(first.substring(1));
    System.out.println("Executing script file " + f.getAbsolutePath());
    if (f.exists()) {
      try {
        BufferedReader br=new BufferedReader(new FileReader(f));
        String l=br.readLine();
        while (l != null) {
          handleCommand(l);
          l=br.readLine();
        }
        br.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
 else {
      System.out.println("File not found! " + f.getAbsolutePath());
    }
  }
 else   if (command.indexOf(';') != -1) {
    StringTokenizer st=new StringTokenizer(command,";");
    while (st.hasMoreTokens()) {
      handleCommand(st.nextToken());
    }
    return;
  }
 else   if ("silent".equals(first)) {
    silent=Boolean.parseBoolean(args[1]);
  }
 else   if ("re".equals(first)) {
    Hazelcast.shutdown();
    handleCommand("ns default");
  }
 else   if ("shutdown".equals(first)) {
    Hazelcast.shutdown();
  }
 else   if ("start".equals(first)) {
    handleCommand("ns default");
  }
 else   if ("echo".equals(first)) {
    echo=Boolean.parseBoolean(args[1]);
  }
 else   if ("ns".equals(first)) {
    if (args.length > 1) {
      namespace=args[1];
      queue=Hazelcast.getQueue(namespace);
      topic=Hazelcast.getTopic(namespace);
      map=Hazelcast.getMap(namespace);
      set=Hazelcast.getSet(namespace);
      list=Hazelcast.getList(namespace);
    }
  }
 else   if ("whoami".equals(first)) {
    System.out.println(Hazelcast.getCluster().getLocalMember());
  }
 else   if ("who".equals(first)) {
    System.out.println(Hazelcast.getCluster());
  }
 else   if ("jvm".equals(first)) {
    System.gc();
    System.out.println("Memory max: " + Runtime.getRuntime().maxMemory() / 1024 / 1024 + "M");
    System.out.println("Memory free: " + Runtime.getRuntime().freeMemory() / 1024 / 1024 + "M " + (int)(Runtime.getRuntime().freeMemory() * 100 / Runtime.getRuntime().maxMemory()) + "%");
    System.out.println("# procs: " + Runtime.getRuntime().availableProcessors());
    System.out.println("OS info: " + ManagementFactory.getOperatingSystemMXBean().getArch() + " "+ ManagementFactory.getOperatingSystemMXBean().getName()+ " "+ ManagementFactory.getOperatingSystemMXBean().getVersion());
    System.out.println("JVM: " + ManagementFactory.getRuntimeMXBean().getVmVendor() + " "+ ManagementFactory.getRuntimeMXBean().getVmName()+ " "+ ManagementFactory.getRuntimeMXBean().getVmVersion());
  }
 else   if (first.indexOf("ock") != -1 && first.indexOf(".") == -1) {
    handleLock(args);
  }
 else   if (first.indexOf(".size") != -1) {
    handleSize(args);
  }
 else   if (first.indexOf(".clear") != -1) {
    handleClear(args);
  }
 else   if (first.indexOf(".destroy") != -1) {
    handleDestroy(args);
  }
 else   if (first.indexOf(".iterator") != -1) {
    handleIterator(args);
  }
 else   if (first.indexOf(".contains") != -1) {
    handleContains(args);
  }
 else   if ("t.publish".equals(first)) {
    handleTopicPublish(args);
  }
 else   if ("q.offer".equals(first)) {
    handleQOffer(args);
  }
 else   if ("q.poll".equals(first)) {
    handleQPoll(args);
  }
 else   if ("q.peek".equals(first)) {
    handleQPeek(args);
  }
 else   if ("q.offermany".equals(first)) {
    handleQOfferMany(args);
  }
 else   if ("q.pollmany".equals(first)) {
    handleQPollMany(args);
  }
 else   if ("s.add".equals(first)) {
    handleSetAdd(args);
  }
 else   if ("s.remove".equals(first)) {
    handleSetRemove(args);
  }
 else   if ("s.addmany".equals(first)) {
    handleSetAddMany(args);
  }
 else   if ("s.removemany".equals(first)) {
    handleSetRemoveMany(args);
  }
 else   if (first.equals("m.replace")) {
    handleMapReplace(args);
  }
 else   if (first.equals("m.putIfAbsent")) {
    handleMapPutIfAbsent(args);
  }
 else   if (first.equals("m.put")) {
    handleMapPut(args);
  }
 else   if (first.equals("m.get")) {
    handleMapGet(args);
  }
 else   if (first.equals("m.remove")) {
    handleMapRemove(args);
  }
 else   if (first.equals("m.putmany")) {
    handleMapPutMany(args);
  }
 else   if (first.equals("m.getmany")) {
    handleMapGetMany(args);
  }
 else   if (first.equals("m.removemany")) {
    handleMapRemoveMany(args);
  }
 else   if (command.equals("m.keys")) {
    handleMapKeys();
  }
 else   if (command.equals("m.values")) {
    handleMapValues();
  }
 else   if (command.equals("m.entries")) {
    handleMapEntries();
  }
 else   if (first.equals("m.lock")) {
    handleMapLock(args);
  }
 else   if (first.equals("m.tryLock")) {
    handleMapTryLock(args);
  }
 else   if (first.equals("m.unlock")) {
    handleMapUnlock(args);
  }
 else   if (first.indexOf(".addListener") != -1) {
    handleAddListener(args);
  }
 else   if (first.equals("m.removeMapListener")) {
    handleRemoveListener(args);
  }
 else   if (first.equals("m.unlock")) {
    handleMapUnlock(args);
  }
 else   if (first.equals("l.add")) {
    handleListAdd(args);
  }
 else   if ("l.addmany".equals(first)) {
    handleListAddMany(args);
  }
 else   if (first.equals("l.remove")) {
    handleListRemove(args);
  }
 else   if (first.equals("l.contains")) {
    handleListContains(args);
  }
 else   if (first.equals("execute")) {
    execute(args);
  }
 else   if (first.equals("txn")) {
    Hazelcast.getTransaction().begin();
  }
 else   if (first.equals("commit")) {
    Hazelcast.getTransaction().commit();
  }
 else   if (first.equals("rollback")) {
    Hazelcast.getTransaction().rollback();
  }
 else   if (first.equalsIgnoreCase("executeOnKey")) {
    executeOnKey(args);
  }
 else   if (first.equalsIgnoreCase("executeOnMember")) {
    executeOnMember(args);
  }
 else   if (first.equalsIgnoreCase("executeOnMembers")) {
    executeOnMembers(args);
  }
 else {
    print("type 'help' for help");
  }
}
