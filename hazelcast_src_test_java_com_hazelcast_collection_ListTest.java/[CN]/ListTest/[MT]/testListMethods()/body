{
  final String name="defList";
  final int count=100;
  final int insCount=2;
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(insCount);
  final HazelcastInstance[] instances=factory.newInstances();
  for (int i=0; i < count; i++) {
    assertTrue(getList(instances,name).add("item" + i));
  }
  assertEquals("item0",getList(instances,name).get(0));
  assertEquals(count,getList(instances,name).size());
  getList(instances,name).add(0,"item");
  assertEquals(count + 1,getList(instances,name).size());
  assertEquals("item",getList(instances,name).get(0));
  assertEquals("item0",getList(instances,name).get(1));
  assertTrue(getList(instances,name).remove("item99"));
  assertFalse(getList(instances,name).remove("item99"));
  assertEquals(count,getList(instances,name).size());
  assertEquals("item",getList(instances,name).set(0,"newItem"));
  assertEquals("newItem",getList(instances,name).get(0));
  getList(instances,name).clear();
  assertEquals(0,getList(instances,name).size());
  List list=new ArrayList();
  list.add("item-1");
  list.add("item-2");
  assertTrue(getList(instances,name).addAll(list));
  assertEquals("item-1",getList(instances,name).get(0));
  assertEquals("item-2",getList(instances,name).get(1));
  assertTrue(getList(instances,name).addAll(1,list));
  assertEquals("item-1",getList(instances,name).get(0));
  assertEquals("item-1",getList(instances,name).get(1));
  assertEquals("item-2",getList(instances,name).get(2));
  assertEquals("item-2",getList(instances,name).get(3));
  assertEquals(4,getList(instances,name).size());
  assertEquals(0,getList(instances,name).indexOf("item-1"));
  assertEquals(1,getList(instances,name).lastIndexOf("item-1"));
  assertEquals(2,getList(instances,name).indexOf("item-2"));
  assertEquals(3,getList(instances,name).lastIndexOf("item-2"));
  assertEquals(4,getList(instances,name).size());
  assertTrue(getList(instances,name).containsAll(list));
  list.add("asd");
  assertFalse(getList(instances,name).containsAll(list));
  assertTrue(getList(instances,name).contains("item-1"));
  assertFalse(getList(instances,name).contains("item"));
  list=getList(instances,name).subList(1,3);
  assertEquals(2,list.size());
  assertEquals("item-1",list.get(0));
  assertEquals("item-2",list.get(1));
  final ListIterator listIterator=getList(instances,name).listIterator(1);
  assertTrue(listIterator.hasPrevious());
  assertEquals("item-1",listIterator.next());
  assertEquals("item-2",listIterator.next());
  assertEquals("item-2",listIterator.next());
  assertFalse(listIterator.hasNext());
  list=new ArrayList();
  list.add("item1");
  list.add("item2");
  assertFalse(getList(instances,name).removeAll(list));
  assertEquals(4,getList(instances,name).size());
  list.add("item-1");
  assertTrue(getList(instances,name).removeAll(list));
  assertEquals(2,getList(instances,name).size());
  list.clear();
  list.add("item-2");
  assertFalse(getList(instances,name).retainAll(list));
  assertEquals(2,getList(instances,name).size());
  list.set(0,"item");
  assertTrue(getList(instances,name).add("item"));
  assertTrue(getList(instances,name).retainAll(list));
  assertEquals(1,getList(instances,name).size());
  assertEquals("item",getList(instances,name).get(0));
}
