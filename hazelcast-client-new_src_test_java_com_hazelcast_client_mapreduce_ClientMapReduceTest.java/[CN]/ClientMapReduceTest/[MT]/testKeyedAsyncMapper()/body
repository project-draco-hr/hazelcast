{
  Config config=buildConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(config);
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  HazelcastInstance client=HazelcastClient.newHazelcastClient(null);
  IMap<Integer,Integer> m1=client.getMap(MAP_NAME);
  for (int i=0; i < 100; i++) {
    m1.put(i,i);
  }
  final Map<String,List<Integer>> listenerResults=new HashMap<String,List<Integer>>();
  final Semaphore semaphore=new Semaphore(1);
  semaphore.acquire();
  JobTracker tracker=client.getJobTracker("default");
  Job<Integer,Integer> job=tracker.newJob(KeyValueSource.fromMap(m1));
  ICompletableFuture<Map<String,List<Integer>>> future=job.onKeys(50).mapper(new TestMapper()).submit();
  future.andThen(new ExecutionCallback<Map<String,List<Integer>>>(){
    @Override public void onResponse(    Map<String,List<Integer>> response){
      listenerResults.putAll(response);
      semaphore.release();
    }
    @Override public void onFailure(    Throwable t){
      semaphore.release();
    }
  }
);
  semaphore.acquire();
  assertEquals(1,listenerResults.size());
  for (  List<Integer> value : listenerResults.values()) {
    assertEquals(1,value.size());
  }
}
