{
  groupConfig=new GroupConfig();
  groupConfig.readData(in);
  boolean[] b1=ByteUtil.fromByte(in.readByte());
  checkCompatibility=b1[0];
  boolean[] b2=ByteUtil.fromByte(in.readByte());
  boolean hasMapConfigs=b2[0];
  boolean hasExecutors=b2[1];
  boolean hasTopicConfigs=b2[2];
  boolean hasQueueConfigs=b2[3];
  boolean hasSemaphoreConfigs=b2[4];
  boolean hasProperties=b2[5];
  networkConfig=new NetworkConfig();
  networkConfig.readData(in);
  if (hasMapConfigs) {
    int size=in.readInt();
    mapConfigs=new ConcurrentHashMap<String,MapConfig>(size);
    for (int i=0; i < size; i++) {
      final MapConfig mapConfig=new MapConfig();
      mapConfig.readData(in);
      mapConfigs.put(mapConfig.getName(),mapConfig);
    }
  }
  if (hasExecutors) {
    int size=in.readInt();
    executorConfigs=new ConcurrentHashMap<String,ExecutorConfig>(size);
    for (int i=0; i < size; i++) {
      final ExecutorConfig executorConfig=new ExecutorConfig();
      executorConfig.readData(in);
      executorConfigs.put(executorConfig.getName(),executorConfig);
    }
  }
  if (hasTopicConfigs) {
    int size=in.readInt();
    topicConfigs=new ConcurrentHashMap<String,TopicConfig>(size);
    for (int i=0; i < size; i++) {
      final TopicConfig topicConfig=new TopicConfig();
      topicConfig.readData(in);
      topicConfigs.put(topicConfig.getName(),topicConfig);
    }
  }
  if (hasQueueConfigs) {
    int size=in.readInt();
    queueConfigs=new ConcurrentHashMap<String,QueueConfig>(size);
    for (int i=0; i < size; i++) {
      final QueueConfig queueConfig=new QueueConfig();
      queueConfig.readData(in);
      queueConfigs.put(queueConfig.getName(),queueConfig);
    }
  }
  if (hasSemaphoreConfigs) {
    int size=in.readInt();
    semaphoreConfigs=new ConcurrentHashMap<String,SemaphoreConfig>(size);
    for (int i=0; i < size; i++) {
      final SemaphoreConfig semaphoreConfig=new SemaphoreConfig();
      semaphoreConfig.readData(in);
      semaphoreConfigs.put(semaphoreConfig.getName(),semaphoreConfig);
    }
  }
  if (hasProperties) {
    int size=in.readInt();
    properties=new Properties();
    for (int i=0; i < size; i++) {
      final String name=in.readUTF();
      final String value=in.readUTF();
      properties.put(name,value);
    }
  }
}
