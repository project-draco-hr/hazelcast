{
  if (localMember.equals(update.getOrigin())) {
    return;
  }
  mapStats.incrementReceivedReplicationEvents();
  if (update.getKey() instanceof String) {
    String key=(String)update.getKey();
    if (AbstractReplicatedRecordStore.CLEAR_REPLICATION_MAGIC_KEY.equals(key)) {
      storage.clear();
      return;
    }
  }
  K marshalledKey=(K)replicatedRecordStore.marshallKey(update.getKey());
synchronized (replicatedRecordStore.getMutex(marshalledKey)) {
    final ReplicatedRecord<K,V> localEntry=storage.get(marshalledKey);
    if (localEntry == null) {
      if (!update.isRemove()) {
        V marshalledValue=(V)replicatedRecordStore.marshallValue(update.getValue());
        VectorClockTimestamp timestamp=update.getVectorClockTimestamp();
        int updateHash=update.getUpdateHash();
        long ttlMillis=update.getTtlMillis();
        storage.put(marshalledKey,new ReplicatedRecord<K,V>(marshalledKey,marshalledValue,timestamp,updateHash,ttlMillis));
        if (ttlMillis > 0) {
          replicatedRecordStore.scheduleTtlEntry(ttlMillis,marshalledKey,null);
        }
 else {
          replicatedRecordStore.cancelTtlEntry(marshalledKey);
        }
        replicatedRecordStore.fireEntryListenerEvent(update.getKey(),null,update.getValue());
      }
    }
 else {
      final VectorClockTimestamp currentVectorClockTimestamp=localEntry.getVectorClockTimestamp();
      final VectorClockTimestamp updateVectorClockTimestamp=update.getVectorClockTimestamp();
      if (VectorClockTimestamp.happenedBefore(updateVectorClockTimestamp,currentVectorClockTimestamp)) {
        return;
      }
 else       if (VectorClockTimestamp.happenedBefore(currentVectorClockTimestamp,updateVectorClockTimestamp)) {
        applyTheUpdate(update,localEntry);
      }
 else {
        if (localEntry.getLatestUpdateHash() >= update.getUpdateHash()) {
          applyTheUpdate(update,localEntry);
        }
 else {
          VectorClockTimestamp newTimestamp=localEntry.applyAndIncrementVectorClock(updateVectorClockTimestamp,localMember);
          Object key=update.getKey();
          V value=localEntry.getValue();
          long ttlMillis=update.getTtlMillis();
          int latestUpdateHash=localEntry.getLatestUpdateHash();
          ReplicationMessage message=new ReplicationMessage(name,key,value,newTimestamp,localMember,latestUpdateHash,ttlMillis);
          distributeReplicationMessage(message,true);
        }
      }
    }
  }
}
