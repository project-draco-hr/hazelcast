{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);
  HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);
  final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");
  final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");
  final AbstractMap.SimpleEntry<Integer,Integer>[] testValues=buildTestValues();
  WatchedOperationExecutor executor=new WatchedOperationExecutor();
  executor.execute(new Runnable(){
    @Override public void run(){
      int half=testValues.length / 2;
      for (int i=0; i < testValues.length; i++) {
        final ReplicatedMap<Integer,Integer> map=i < half ? map1 : map2;
        final AbstractMap.SimpleEntry<Integer,Integer> entry=testValues[i];
        map.put(entry.getKey(),entry.getValue());
      }
    }
  }
,2,EntryEventType.ADDED,testValues.length,0.75,map1,map2);
  int map2Contains=0;
  for (  AbstractMap.SimpleEntry<Integer,Integer> testValue : testValues) {
    if (map2.containsValue(testValue.getValue())) {
      map2Contains++;
    }
  }
  int map1Contains=0;
  for (  AbstractMap.SimpleEntry<Integer,Integer> testValue : testValues) {
    if (map1.containsValue(testValue.getValue())) {
      map1Contains++;
    }
  }
  assertMatchSuccessfulOperationQuota(0.75,testValues.length,map1Contains,map2Contains);
}
