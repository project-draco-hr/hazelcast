{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  Config cfg=new Config();
  cfg.getReplicatedMapConfig("default").setInMemoryFormat(InMemoryFormat.BINARY);
  HazelcastInstance instance1=nodeFactory.newHazelcastInstance(cfg);
  final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");
  final SimpleEntry<Integer,Integer>[] testValues=buildTestValues();
  final List<SimpleEntry<Integer,Integer>> entrySetTestValues=Arrays.asList(testValues);
  WatchedOperationExecutor executor=new WatchedOperationExecutor();
  executor.execute(new Runnable(){
    @Override public void run(){
      for (int i=0; i < testValues.length; i++) {
        final SimpleEntry<Integer,Integer> entry=testValues[i];
        map1.put(entry.getKey(),entry.getValue());
      }
    }
  }
,2,100,EntryEventType.ADDED,map1);
  final CountDownLatch latch=new CountDownLatch(100);
  EntryListenerConfig listenerConfig=new EntryListenerConfig().setImplementation(new EntryListener(){
    @Override public void entryAdded(    EntryEvent event){
      latch.countDown();
    }
    @Override public void entryRemoved(    EntryEvent event){
    }
    @Override public void entryUpdated(    EntryEvent event){
    }
    @Override public void entryEvicted(    EntryEvent event){
    }
  }
);
  cfg.getReplicatedMapConfig("default").addEntryListenerConfig(listenerConfig);
  HazelcastInstance instance2=nodeFactory.newHazelcastInstance(cfg);
  ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");
  latch.await(5,TimeUnit.MINUTES);
  List<Entry<Integer,Integer>> entrySet1=new ArrayList<Entry<Integer,Integer>>(map1.entrySet());
  List<Entry<Integer,Integer>> entrySet2=new ArrayList<Entry<Integer,Integer>>(map2.entrySet());
  Collections.sort(entrySet1,ENTRYSET_COMPARATOR);
  Collections.sort(entrySet2,ENTRYSET_COMPARATOR);
  Collections.sort(entrySetTestValues,ENTRYSET_COMPARATOR);
  assertEquals(entrySetTestValues,entrySet1);
  assertEquals(entrySetTestValues,entrySet2);
}
