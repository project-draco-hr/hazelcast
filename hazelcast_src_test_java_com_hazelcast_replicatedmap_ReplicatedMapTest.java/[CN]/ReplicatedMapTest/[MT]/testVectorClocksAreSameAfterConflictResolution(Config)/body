{
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);
  final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);
  final String replicatedMapName=randomMapName();
  final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(replicatedMapName);
  final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(replicatedMapName);
  final int collidingKeyCount=15;
  final int operations=1000;
  final Random random=new Random();
  Thread thread1=createPutOperationThread(map1,collidingKeyCount,operations,random);
  Thread thread2=createPutOperationThread(map2,collidingKeyCount,operations,random);
  thread1.start();
  thread2.start();
  thread1.join();
  thread2.join();
  for (int i=0; i < collidingKeyCount; i++) {
    final String key="foo-" + i;
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        VectorClockTimestamp v1=getVectorClockForKey(map1,key);
        VectorClockTimestamp v2=getVectorClockForKey(map2,key);
        assertEquals(v1,v2);
        assertEquals(map1.get(key),map2.get(key));
      }
    }
);
  }
}
