{
  final AtomicBoolean second=new AtomicBoolean(false);
  final CountDownLatch added=new CountDownLatch(2);
  final CountDownLatch updated=new CountDownLatch(2);
  final CountDownLatch updated2=new CountDownLatch(2);
  final CountDownLatch removed=new CountDownLatch(2);
  final Set<ListenerResult> result=new CopyOnWriteArraySet<ListenerResult>();
  EntryListener listener=new EntryListener(){
    @Override public void entryAdded(    EntryEvent event){
      added.countDown();
      result.add(new ListenerResult(event.getMember(),event.getValue()));
    }
    @Override public void entryRemoved(    EntryEvent event){
      removed.countDown();
      result.add(new ListenerResult(event.getMember(),event.getValue()));
    }
    @Override public void entryUpdated(    EntryEvent event){
      if (second.get()) {
        updated2.countDown();
      }
 else {
        updated.countDown();
      }
      result.add(new ListenerResult(event.getMember(),event.getValue()));
    }
    @Override public void entryEvicted(    EntryEvent event){
    }
  }
;
  TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  Config cfg=new Config();
  ListenerConfig listenerConfig=new ListenerConfig().setImplementation(listener);
  cfg.getReplicatedMapConfig("default").setInMemoryFormat(InMemoryFormat.OBJECT).getListenerConfigs().add(listenerConfig);
  HazelcastInstance instance1=nodeFactory.newHazelcastInstance(cfg);
  HazelcastInstance instance2=nodeFactory.newHazelcastInstance(cfg);
  final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");
  final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");
  WatchedOperationExecutor executor=new WatchedOperationExecutor();
  executor.execute(new Runnable(){
    @Override public void run(){
      map1.put("foo","bar");
    }
  }
,60,EntryEventType.ADDED,map1,map2);
  added.await();
  assertEquals(2,result.size());
  for (  ListenerResult r : result) {
    assertEquals("ListenerResults: " + result.toString(),"bar",r.value);
  }
  result.clear();
  String value=map2.get("foo");
  assertEquals("bar",value);
  executor.execute(new Runnable(){
    @Override public void run(){
      map1.put("foo","bar2");
    }
  }
,60,EntryEventType.UPDATED,map1,map2);
  updated.await();
  assertEquals(2,result.size());
  for (  ListenerResult r : result) {
    assertEquals("ListenerResults: " + result.toString(),"bar2",r.value);
  }
  result.clear();
  value=map2.get("foo");
  assertEquals("bar2",value);
  second.set(true);
  executor.execute(new Runnable(){
    @Override public void run(){
      map2.put("foo","bar3");
    }
  }
,60,EntryEventType.UPDATED,map1,map2);
  assertEquals(2,result.size());
  for (  ListenerResult r : result) {
    assertEquals("ListenerResults: " + result.toString(),"bar3",r.value);
  }
  result.clear();
  updated2.await();
  value=map1.get("foo");
  assertEquals("bar3",value);
  executor.execute(new Runnable(){
    @Override public void run(){
      map1.remove("foo");
    }
  }
,60,EntryEventType.REMOVED,map1,map2);
  removed.await();
}
