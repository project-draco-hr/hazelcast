{
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning("Error while running merge operation: " + t.getMessage());
      semaphore.release(1);
    }
  }
;
  SerializationService serializationService=nodeEngine.getSerializationService();
  for (  Map.Entry<String,Map<Data,CacheRecord>> recordMapEntry : recordMap.entrySet()) {
    String cacheName=recordMapEntry.getKey();
    CacheConfig cacheConfig=configs.get(cacheName);
    Map<Data,CacheRecord> records=recordMapEntry.getValue();
    String mergePolicyName=cacheConfig.getMergePolicy();
    final CacheMergePolicy cacheMergePolicy=mergePolicyProvider.getMergePolicy(mergePolicyName);
    for (    Map.Entry<Data,CacheRecord> recordEntry : records.entrySet()) {
      Data key=recordEntry.getKey();
      CacheRecord record=recordEntry.getValue();
      recordCount++;
      CacheEntryView entryView=new DefaultCacheEntryView(key,serializationService.toData(record.getValue()),record.getExpirationTime(),record.getAccessTime(),record.getAccessHit());
      CacheMergeOperation operation=new CacheMergeOperation(cacheName,key,entryView,cacheMergePolicy);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(ICacheService.SERVICE_NAME,operation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest("Interrupted while waiting merge operation...");
  }
}
