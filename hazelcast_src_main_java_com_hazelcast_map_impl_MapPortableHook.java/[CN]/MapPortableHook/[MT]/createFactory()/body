{
  return new PortableFactory(){
    final ConstructorFunction<Integer,Portable>[] constructors=new ConstructorFunction[ADD_NEAR_CACHE_ENTRY_LISTENER + 1];
{
      constructors[GET]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapGetRequest();
        }
      }
;
      constructors[PUT]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapPutRequest();
        }
      }
;
      constructors[PUT_IF_ABSENT]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapPutIfAbsentRequest();
        }
      }
;
      constructors[TRY_PUT]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapTryPutRequest();
        }
      }
;
      constructors[PUT_TRANSIENT]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapPutTransientRequest();
        }
      }
;
      constructors[SET]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapSetRequest();
        }
      }
;
      constructors[CONTAINS_KEY]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapContainsKeyRequest();
        }
      }
;
      constructors[CONTAINS_VALUE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapContainsValueRequest();
        }
      }
;
      constructors[REMOVE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapRemoveRequest();
        }
      }
;
      constructors[REMOVE_IF_SAME]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapRemoveIfSameRequest();
        }
      }
;
      constructors[DELETE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapDeleteRequest();
        }
      }
;
      constructors[FLUSH]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapFlushRequest();
        }
      }
;
      constructors[GET_ALL]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapGetAllRequest();
        }
      }
;
      constructors[TRY_REMOVE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapTryRemoveRequest();
        }
      }
;
      constructors[REPLACE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapReplaceRequest();
        }
      }
;
      constructors[REPLACE_IF_SAME]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapReplaceIfSameRequest();
        }
      }
;
      constructors[LOCK]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapLockRequest();
        }
      }
;
      constructors[IS_LOCKED]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapIsLockedRequest();
        }
      }
;
      constructors[UNLOCK]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapUnlockRequest();
        }
      }
;
      constructors[EVICT]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapEvictRequest();
        }
      }
;
      constructors[ADD_INTERCEPTOR]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapAddInterceptorRequest();
        }
      }
;
      constructors[REMOVE_INTERCEPTOR]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapRemoveInterceptorRequest();
        }
      }
;
      constructors[ADD_ENTRY_LISTENER]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapAddEntryListenerRequest();
        }
      }
;
      constructors[ADD_ENTRY_LISTENER_SQL]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapAddEntryListenerSqlRequest();
        }
      }
;
      constructors[GET_ENTRY_VIEW]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapGetEntryViewRequest();
        }
      }
;
      constructors[ADD_INDEX]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapAddIndexRequest();
        }
      }
;
      constructors[KEY_SET]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapKeySetRequest();
        }
      }
;
      constructors[VALUES]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapValuesRequest();
        }
      }
;
      constructors[ENTRY_SET]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapEntrySetRequest();
        }
      }
;
      constructors[SIZE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapSizeRequest();
        }
      }
;
      constructors[CLEAR]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapClearRequest();
        }
      }
;
      constructors[QUERY]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapQueryRequest();
        }
      }
;
      constructors[SQL_QUERY]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapSQLQueryRequest();
        }
      }
;
      constructors[EXECUTE_ON_KEY]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapExecuteOnKeyRequest();
        }
      }
;
      constructors[EXECUTE_ON_ALL_KEYS]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapExecuteOnAllKeysRequest();
        }
      }
;
      constructors[PUT_ALL]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapPutAllRequest();
        }
      }
;
      constructors[TXN_REQUEST]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new TxnMapRequest();
        }
      }
;
      constructors[TXN_REQUEST_WITH_SQL_QUERY]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new TxnMapRequestWithSQLQuery();
        }
      }
;
      constructors[EXECUTE_WITH_PREDICATE]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapExecuteWithPredicateRequest();
        }
      }
;
      constructors[EXECUTE_ON_KEYS]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapExecuteOnKeysRequest();
        }
      }
;
      constructors[REMOVE_ENTRY_LISTENER]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapRemoveEntryListenerRequest();
        }
      }
;
      constructors[EVICT_ALL]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapEvictAllRequest();
        }
      }
;
      constructors[LOAD_ALL_GIVEN_KEYS]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapLoadGivenKeysRequest();
        }
      }
;
      constructors[LOAD_ALL_KEYS]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapLoadAllKeysRequest();
        }
      }
;
      constructors[IS_EMPTY]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapIsEmptyRequest();
        }
      }
;
      constructors[ADD_NEAR_CACHE_ENTRY_LISTENER]=new ConstructorFunction<Integer,Portable>(){
        public Portable createNew(        Integer arg){
          return new MapAddNearCacheEntryListenerRequest();
        }
      }
;
    }
    public Portable create(    int classId){
      return (classId > 0 && classId <= constructors.length) ? constructors[classId].createNew(classId) : null;
    }
  }
;
}
