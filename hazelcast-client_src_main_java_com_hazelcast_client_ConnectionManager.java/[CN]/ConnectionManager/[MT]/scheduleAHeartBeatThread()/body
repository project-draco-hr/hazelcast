{
  Timer timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      long lastSend=client.getOutRunnable().lastSend;
      long now=System.currentTimeMillis();
      long diff=now - lastSend;
      try {
        if (diff >= TIMEOUT / 5 && diff < TIMEOUT) {
          logger.log(Level.FINEST,"Being idle for some time, Doing a getMembers() call to ping the server!");
          final CountDownLatch latch=new CountDownLatch(1);
          new Thread(new Runnable(){
            public void run(){
              Set<Member> members=client.getCluster().getMembers();
              if (members != null && members.size() >= 1) {
                System.out.println(members);
                latch.countDown();
              }
            }
          }
).start();
          if (!latch.await(10000,TimeUnit.MILLISECONDS)) {
            logger.log(Level.WARNING,"The server didn't respond on client's ping call within 10 seconds!");
            client.getOutRunnable().lastSend=lastSend;
          }
        }
 else         if (diff >= TIMEOUT) {
          logger.log(Level.WARNING,"The server didn't respond on client's requests for " + TIMEOUT / 1000 + " seconds. Assuming it is dead, closing the connection!");
          currentConnection.close();
        }
      }
 catch (      InterruptedException e) {
        return;
      }
catch (      IOException ignored) {
      }
    }
  }
,TIMEOUT / 10,TIMEOUT / 10);
}
