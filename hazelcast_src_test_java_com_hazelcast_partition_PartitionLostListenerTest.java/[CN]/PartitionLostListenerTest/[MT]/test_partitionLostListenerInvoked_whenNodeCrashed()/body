{
  HazelcastInstance survivingInstance=instances[0];
  HazelcastInstance terminatingInstance=instances[1];
  warmUpPartitions(instances);
  waitAllForSafeState(instances);
  final EventCollectingPartitionLostListener listener=new EventCollectingPartitionLostListener();
  survivingInstance.getPartitionService().addPartitionLostListener(listener);
  Node survivingNode=getNode(survivingInstance);
  final Address survivingAddress=survivingNode.getThisAddress();
  final Set<Integer> survivingPartitionIds=new HashSet<Integer>();
  for (  InternalPartition partition : survivingNode.getPartitionService().getInternalPartitions()) {
    if (survivingAddress.equals(partition.getReplicaAddress(0))) {
      survivingPartitionIds.add(partition.getPartitionId());
    }
  }
  terminatingInstance.getLifecycleService().terminate();
  waitAllForSafeState(survivingInstance);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      List<PartitionLostEvent> events=listener.getEvents();
      assertFalse(events.isEmpty());
      for (      PartitionLostEvent event : events) {
        assertEquals(survivingAddress,event.getEventSource());
        assertFalse(survivingPartitionIds.contains(event.getPartitionId()));
        assertEquals(0,event.getLostBackupCount());
      }
    }
  }
);
}
