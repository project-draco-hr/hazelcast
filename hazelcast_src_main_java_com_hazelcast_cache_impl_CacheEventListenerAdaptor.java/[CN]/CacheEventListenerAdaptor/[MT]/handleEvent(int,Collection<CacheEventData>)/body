{
  final Iterable<CacheEntryEvent<? extends K,? extends V>> cacheEntryEvent=createCacheEntryEvent(keys);
  CacheEventType eventType=CacheEventType.getByType(type);
switch (eventType) {
case CREATED:
    if (this.cacheEntryCreatedListener != null) {
      this.cacheEntryCreatedListener.onCreated(cacheEntryEvent);
    }
  break;
case UPDATED:
if (this.cacheEntryUpdatedListener != null) {
  this.cacheEntryUpdatedListener.onUpdated(cacheEntryEvent);
}
break;
case REMOVED:
if (this.cacheEntryRemovedListener != null) {
this.cacheEntryRemovedListener.onRemoved(cacheEntryEvent);
}
break;
case EXPIRED:
if (this.cacheEntryExpiredListener != null) {
this.cacheEntryExpiredListener.onExpired(cacheEntryEvent);
}
break;
default :
throw new IllegalArgumentException("Invalid event type: " + eventType.name());
}
}
