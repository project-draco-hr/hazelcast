{
  this.config=config;
  if (config.getInstanceName() != null) {
    instanceName=config.getInstanceName();
  }
 else {
    instanceName="hz.client_" + id;
  }
  GroupConfig groupConfig=config.getGroupConfig();
  String loggingType=GroupProperty.LOGGING_TYPE.getSystemProperty();
  loggingService=new ClientLoggingService(groupConfig.getName(),loggingType,BuildInfoProvider.getBuildInfo(),instanceName);
  clientExtension=createClientInitializer(config.getClassLoader());
  clientExtension.beforeStart(this);
  credentials=initCredentials(config);
  threadGroup=new ThreadGroup(instanceName);
  lifecycleService=new LifecycleServiceImpl(this);
  properties=new HazelcastProperties(config.getProperties());
  metricsRegistry=initMetricsRegistry();
  serializationService=clientExtension.createSerializationService((byte)-1);
  proxyManager=new ProxyManager(this);
  executionService=initExecutionService();
  loadBalancer=initLoadBalancer(config);
  transactionManager=new ClientTransactionManagerServiceImpl(this,loadBalancer);
  partitionService=new ClientPartitionServiceImpl(this);
  discoveryService=initDiscoveryService(config);
  connectionManager=clientConnectionManagerFactory.createConnectionManager(config,this,discoveryService);
  Collection<AddressProvider> addressProviders=createAddressProviders(externalAddressProvider);
  clusterService=new ClientClusterServiceImpl(this,addressProviders);
  invocationService=initInvocationService();
  listenerService=initListenerService();
  userContext=new ConcurrentHashMap<String,Object>();
  nearCacheManager=clientExtension.createNearCacheManager();
  diagnostics=initDiagnostics(config);
  proxyManager.init(config);
}
