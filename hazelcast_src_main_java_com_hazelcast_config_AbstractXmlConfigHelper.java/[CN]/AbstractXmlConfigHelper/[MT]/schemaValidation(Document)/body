{
  ArrayList<StreamSource> schemas=new ArrayList<StreamSource>();
  InputStream inputStream=null;
  String lineSeperator=StringUtil.getLineSeperator();
  String schemaLocation=doc.getDocumentElement().getAttribute("xsi:schemaLocation");
  schemaLocation=schemaLocation.replaceAll("^ +| +$| (?= )","");
  String[] xsdLocations=schemaLocation.split("(?<!\\G\\S+)\\s");
  for (  String xsdLocation : xsdLocations) {
    if (xsdLocation.isEmpty()) {
      continue;
    }
    String namespace=xsdLocation.split('[' + lineSeperator + " ]+")[0];
    String uri=xsdLocation.split('[' + lineSeperator + " ]+")[1];
    if (namespace.equals(xmlns) && !uri.endsWith(hazelcastSchemaLocation)) {
      LOGGER.warning("Name of the hazelcast schema location incorrect using default");
    }
    if (!namespace.equals(xmlns)) {
      inputStream=loadSchemaFile(uri);
      schemas.add(new StreamSource(inputStream));
    }
  }
  schemas.add(new StreamSource(getClass().getClassLoader().getResourceAsStream(hazelcastSchemaLocation)));
  Element root=doc.getDocumentElement();
  root.setAttribute("xmlns",xmlns);
  String xsi="http://www.w3.org/2001/XMLSchema-instance";
  root.setAttribute("xmlns:xsi",xsi);
  root.setAttribute("xsi:schemaLocation",hazelcastSchemaLocation);
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  Source xmlSource=new DOMSource(doc);
  Result outputTarget=new StreamResult(outputStream);
  TransformerFactory.newInstance().newTransformer().transform(xmlSource,outputTarget);
  InputStream is=new ByteArrayInputStream(outputStream.toByteArray());
  SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
  Schema schema=schemaFactory.newSchema(schemas.toArray(new Source[schemas.size()]));
  Validator validator=schema.newValidator();
  try {
    SAXSource source=new SAXSource(new InputSource(is));
    validator.validate(source);
  }
 catch (  Exception e) {
    throw new InvalidConfigurationException(e.getMessage());
  }
 finally {
    for (    StreamSource source : schemas) {
      closeResource(source.getInputStream());
    }
    closeResource(inputStream);
  }
}
