{
  Config cfg=new Config();
  Map<String,MapConfig> mapConfigs=new HashMap<String,MapConfig>();
  MapConfig mCfg=new MapConfig();
  int TTL=2;
  mCfg.setTimeToLiveSeconds(TTL);
  mapConfigs.put("employees",mCfg);
  cfg.setMapConfigs(mapConfigs);
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(cfg);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(cfg);
  IMap imap=h1.getMap("employees");
  imap.addIndex("name",false);
  imap.addIndex("age",true);
  imap.addIndex("active",false);
  int expectedCount=0;
  for (int i=0; i < 1000; i++) {
    Employee employee=new Employee("joe" + i,i % 60,((i % 2) == 1),Double.valueOf(i));
    if (employee.getName().startsWith("joe15") && employee.isActive()) {
      expectedCount++;
      System.out.println(employee);
    }
    imap.put(String.valueOf(i),employee);
  }
  Collection<Employee> values=imap.values(new SqlPredicate("active and name LIKE 'joe15%'"));
  for (  Employee employee : values) {
    assertTrue(employee.isActive());
  }
  assertEquals(expectedCount,values.size());
  Thread.sleep((TTL + 1) * 1000);
  assertEquals(0,imap.size());
  values=imap.values(new SqlPredicate("active and name LIKE 'joe15%'"));
  assertEquals(0,values.size());
  Thread.sleep(5000);
  values=imap.values(new SqlPredicate("active and name LIKE 'joe15%'"));
  assertEquals(0,values.size());
}
