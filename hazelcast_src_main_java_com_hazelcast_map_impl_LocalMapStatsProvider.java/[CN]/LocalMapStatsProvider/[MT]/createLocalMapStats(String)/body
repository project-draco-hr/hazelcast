{
  final NodeEngine nodeEngine=this.nodeEngine;
  final MapContainer mapContainer=mapServiceContext.getMapContainer(mapName);
  final LocalMapStatsImpl localMapStats=getLocalMapStatsImpl(mapName);
  if (!mapContainer.getMapConfig().isStatisticsEnabled()) {
    return localMapStats;
  }
  final int backupCount=mapContainer.getTotalBackupCount();
  final ClusterService clusterService=nodeEngine.getClusterService();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  final Address thisAddress=clusterService.getThisAddress();
  LocalMapOnDemandCalculatedStats localMapOnDemandCalculatedStats=new LocalMapOnDemandCalculatedStats();
  localMapOnDemandCalculatedStats.setBackupCount(backupCount);
  addNearCacheStats(localMapStats,localMapOnDemandCalculatedStats,mapContainer);
  for (int partitionId=0; partitionId < partitionService.getPartitionCount(); partitionId++) {
    InternalPartition partition=partitionService.getPartition(partitionId);
    Address owner=partition.getOwnerOrNull();
    if (owner == null) {
      continue;
    }
    if (owner.equals(thisAddress)) {
      addOwnerPartitionStats(localMapStats,localMapOnDemandCalculatedStats,mapName,partitionId);
    }
 else {
      addReplicaPartitionStats(localMapOnDemandCalculatedStats,mapName,partitionId,partition,partitionService,backupCount,thisAddress);
    }
  }
  localMapOnDemandCalculatedStats.copyValuesTo(localMapStats);
  return localMapStats;
}
