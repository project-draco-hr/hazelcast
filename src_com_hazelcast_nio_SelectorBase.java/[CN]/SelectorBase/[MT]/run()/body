{
  select:   while (live) {
    if (size.get() > 0) {
      processSelectionQueue();
    }
    int selectedKeys=0;
    try {
      selectedKeys=selector.select(waitTime);
      if (Thread.interrupted()) {
        Node.get().handleInterruptedException(Thread.currentThread(),new RuntimeException());
      }
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
      continue select;
    }
    if (selectedKeys == 0) {
      continue select;
    }
    Set<SelectionKey> setSelectedKeys=selector.selectedKeys();
    Iterator<SelectionKey> it=setSelectedKeys.iterator();
    while (it.hasNext()) {
      SelectionKey sk=(SelectionKey)it.next();
      it.remove();
      try {
        sk.interestOps(sk.interestOps() & ~sk.readyOps());
        SelectionHandler selectionHandler=(SelectionHandler)sk.attachment();
        selectionHandler.handle();
      }
 catch (      Exception e) {
        handleSelectorException(e);
      }
    }
  }
}
