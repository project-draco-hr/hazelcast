{
  ensureOpen();
  validateNotNull(keys);
  if (keys.isEmpty()) {
    return Collections.EMPTY_MAP;
  }
  final Set<Data> ks=new HashSet(keys.size());
  for (  K key : keys) {
    final Data k=serializationService.toData(key);
    ks.add(k);
  }
  final Map<K,V> result=new HashMap<K,V>();
  final Collection<Integer> partitions=getPartitionsForKeys(ks);
  try {
    OperationFactory factory=operationProvider.createGetAllOperationFactory(ks,expiryPolicy);
    OperationService operationService=getNodeEngine().getOperationService();
    Map<Integer,Object> responses=operationService.invokeOnPartitions(getServiceName(),factory,partitions);
    for (    Object response : responses.values()) {
      MapEntries mapEntries=serializationService.toObject(response);
      mapEntries.putAllToMap(serializationService,result);
    }
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
  return result;
}
