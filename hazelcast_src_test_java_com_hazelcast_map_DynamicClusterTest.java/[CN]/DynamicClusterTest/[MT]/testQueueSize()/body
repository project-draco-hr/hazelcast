{
  final IQueue queue=getInstance(0).getQueue("testQueueSize" + rand.nextInt(100));
  final int pollSize=150 * 1000;
  final int offerSize=220 * 1000;
  final AtomicInteger offerCount=new AtomicInteger(offerSize);
  final AtomicInteger pollCount=new AtomicInteger(pollSize);
  final AtomicInteger polled=new AtomicInteger();
  final AtomicInteger offered=new AtomicInteger();
  new Thread(){
    public void run(){
      for (int i=0; i < offerSize; i++) {
        try {
          if (queue.offer("item" + i)) {
            offered.incrementAndGet();
          }
        }
 catch (        Exception e) {
          log("exexex");
          log(e.getMessage());
        }
        offerCount.decrementAndGet();
      }
    }
  }
.start();
  new Thread(){
    public void run(){
      for (int i=0; i < pollSize; i++) {
        try {
          Object o=queue.poll();
          if (o != null) {
            polled.incrementAndGet();
          }
        }
 catch (        Exception e) {
          log("exexex");
          log(e.getMessage());
        }
        pollCount.decrementAndGet();
      }
    }
  }
.start();
  Thread.sleep(500);
  for (int i=0; i < 4; i++) {
    while (getInstance(0).getPartitionService().hasOngoingMigration()) {
      Thread.sleep(100);
    }
    log("remove instance");
    removeInstance(1);
    Thread.sleep(2000);
    log("new instance");
    newInstance();
    Thread.sleep(1000);
    log("offerCount: " + offerCount.get() + "  pollCount: "+ pollCount.get());
    Thread.sleep(1000);
  }
  while (offerCount.get() != 0 || pollCount.get() != 0) {
    log("offerCount: " + offerCount.get() + "  pollCount: "+ pollCount.get());
    Thread.sleep(1000);
  }
  assertEquals(offered.get() - polled.get(),queue.size());
  log("offered: " + offered.get() + "  polled: "+ polled.get());
}
