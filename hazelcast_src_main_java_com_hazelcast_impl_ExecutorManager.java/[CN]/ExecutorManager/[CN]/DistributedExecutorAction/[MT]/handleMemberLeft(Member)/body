{
  boolean found=false;
  final MemberImpl deadMember=(MemberImpl)dead;
  if (innerFutureTask.getKey() != null) {
    final Data keyData=toData(innerFutureTask.getKey());
    final Address target=getKeyOwner(keyData);
    found=(deadMember.getAddress().equals(target));
  }
 else   if (innerFutureTask.getMember() != null) {
    final MemberImpl targetMember=(MemberImpl)innerFutureTask.getMember();
    found=(targetMember.getAddress().equals(deadMember.getAddress()));
  }
 else   if (innerFutureTask.getMembers() != null) {
    final Set<Member> members=innerFutureTask.getMembers();
    for (    final Member m : members) {
      MemberImpl targetMember=(MemberImpl)m;
      if (targetMember.getAddress().equals(deadMember.getAddress())) {
        found=true;
        break;
      }
    }
  }
 else {
    found=(deadMember.getAddress().equals(randomTarget));
  }
  if (found) {
    logger.log(Level.FINEST,"Terminating task. Member left " + dead);
    innerFutureTask.innerSetMemberLeft(dead);
    handleStreamResponse(OBJECT_MEMBER_LEFT);
    finalizeTask();
  }
}
