{
  NamedExecutorService namedExecutorService=getOrCreateNamedExecutorService(name);
  InnerFutureTask inner=(InnerFutureTask)dtask.getInner();
  Data callable=toData(inner.getCallable());
  if (inner.getMembers() != null) {
    Set<Member> members=inner.getMembers();
    if (members.size() == 1) {
      MemberCall memberCall=new MemberCall(name,(MemberImpl)members.iterator().next(),callable,inner,true);
      inner.setExecutionManagerCallback(memberCall);
      memberCall.call();
    }
 else {
      MembersCall membersCall=new MembersCall(name,members,callable,inner);
      inner.setExecutionManagerCallback(membersCall);
      membersCall.call();
    }
  }
 else   if (inner.getMember() != null) {
    MemberCall memberCall=new MemberCall(name,(MemberImpl)inner.getMember(),callable,inner,true);
    inner.setExecutionManagerCallback(memberCall);
    memberCall.call();
  }
 else   if (inner.getKey() != null) {
    Partition partition=node.factory.getPartitionService().getPartition(inner.getKey());
    Member target=partition.getOwner();
    if (target == null) {
      target=node.factory.getCluster().getMembers().iterator().next();
    }
    MemberCall memberCall=new MemberCall(name,(MemberImpl)target,callable,inner,true);
    inner.setExecutionManagerCallback(memberCall);
    memberCall.call();
  }
 else {
    MemberImpl target=(MemberImpl)namedExecutorService.getExecutionLoadBalancer().getTarget(node.factory);
    MemberCall memberCall=new MemberCall(name,target,callable,inner,true);
    inner.setExecutionManagerCallback(memberCall);
    memberCall.call();
  }
}
