{
  super(node);
  registerPacketProcessor(ClusterOperation.REMOTELY_EXECUTE,new PacketProcessor(){
    public void process(    Packet packet){
      handleRemoteExecution(packet);
    }
  }
);
  registerPacketProcessor(ClusterOperation.STREAM,new PacketProcessor(){
    public void process(    Packet packet){
      handleStream(packet);
    }
  }
);
  if (started)   return;
  if (logger.isLoggable(Level.FINEST)) {
    logger.log(Level.FINEST,"Starting ExecutorManager");
  }
  final int corePoolSize=Config.get().getExecutorConfig().getCorePoolSize();
  final int maxPoolSize=Config.get().getExecutorConfig().getMaxPoolsize();
  final long keepAliveSeconds=Config.get().getExecutorConfig().getKeepAliveSeconds();
  if (logger.isLoggable(Level.FINEST)) {
    logger.log(Level.FINEST,"Executor core:" + corePoolSize + ", max:"+ maxPoolSize+ ", keepAlive:"+ keepAliveSeconds);
  }
  executor=new ThreadPoolExecutor(corePoolSize,maxPoolSize,keepAliveSeconds,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),new ExecutorThreadFactory(),new RejectionHandler());
  node.getClusterImpl().addMembershipListener(this);
  for (int i=0; i < 100; i++) {
    executionIds.add((long)i);
  }
  started=true;
}
