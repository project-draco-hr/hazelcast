{
  super(node);
  logger.log(Level.FINEST,"Starting ExecutorManager");
  GroupProperties gp=node.groupProperties;
  ClassLoader classLoader=node.getConfig().getClassLoader();
  threadPoolExecutor=new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){
    protected void beforeExecute(    Thread t,    Runnable r){
      threadPoolBeforeExecute(t,r);
    }
  }
;
  parallelExecutorService=new ParallelExecutorService(node.getLogger(ParallelExecutorService.class.getName()),threadPoolExecutor);
  defaultExecutorService=getOrCreateNamedExecutorService(DEFAULT_EXECUTOR_SERVICE);
  queryExecutorService=getOrCreateNamedExecutorService(QUERY_EXECUTOR_SERVICE,gp.EXECUTOR_QUERY_THREAD_COUNT);
  eventExecutorService=getOrCreateNamedExecutorService(EVENT_EXECUTOR_SERVICE,gp.EXECUTOR_EVENT_THREAD_COUNT);
  mapLoaderExecutorService=parallelExecutorService.newParallelExecutor(gp.MAP_LOAD_THREAD_COUNT.getInteger());
  asyncExecutorService=parallelExecutorService.newBlockingParallelExecutor(24,1000);
  registerPacketProcessor(EXECUTE,new ExecutionOperationHandler());
  registerPacketProcessor(CANCEL_EXECUTION,new ExecutionCancelOperationHandler());
  started=true;
}
