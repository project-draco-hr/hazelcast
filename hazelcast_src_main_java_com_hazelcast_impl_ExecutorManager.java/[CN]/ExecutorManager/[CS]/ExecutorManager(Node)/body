{
  super(node);
  logger.log(Level.FINEST,"Starting ExecutorManager");
  GroupProperties gp=node.groupProperties;
  ClassLoader classLoader=node.getConfig().getClassLoader();
  threadPoolExecutor=new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,getThreadNamePrefix("cached"),classLoader),new RejectionHandler()){
    protected void beforeExecute(    Thread t,    Runnable r){
      ThreadContext threadContext=ThreadContext.get();
      CallContext callContext=mapThreadCallContexts.get(t);
      if (callContext == null) {
        callContext=new CallContext(threadContext.createNewThreadId(),false);
        mapThreadCallContexts.put(t,callContext);
      }
      threadContext.setCurrentFactory(node.factory);
      threadContext.setCallContext(callContext);
    }
  }
;
  parallelExecutorService=new ParallelExecutorService(threadPoolExecutor);
  defaultExecutorService=getOrCreateNamedExecutorService(DEFAULT_EXECUTOR_SERVICE);
  clientExecutorService=getOrCreateNamedExecutorService(CLIENT_EXECUTOR_SERVICE,gp.EXECUTOR_CLIENT_THREAD_COUNT);
  migrationExecutorService=getOrCreateNamedExecutorService(MIGRATION_EXECUTOR_SERVICE,gp.EXECUTOR_MIGRATION_THREAD_COUNT);
  queryExecutorService=getOrCreateNamedExecutorService(QUERY_EXECUTOR_SERVICE,gp.EXECUTOR_QUERY_THREAD_COUNT);
  storeExecutorService=getOrCreateNamedExecutorService(STORE_EXECUTOR_SERVICE,gp.EXECUTOR_STORE_THREAD_COUNT);
  eventExecutorService=getOrCreateNamedExecutorService(EVENT_EXECUTOR_SERVICE,gp.EXECUTOR_EVENT_THREAD_COUNT);
  registerPacketProcessor(EXECUTE,new ExecutionOperationHandler());
  started=true;
}
