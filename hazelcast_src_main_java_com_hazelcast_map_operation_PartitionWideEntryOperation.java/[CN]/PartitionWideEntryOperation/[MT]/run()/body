{
  response=new MapEntrySet();
  MapEntrySimple entry;
  final RecordStore recordStore=mapService.getRecordStore(getPartitionId(),name);
  final LocalMapStatsImpl mapStats=mapService.getLocalMapStatsImpl(name);
  final Map<Data,Record> records=recordStore.getReadonlyRecordMap();
  for (  final Map.Entry<Data,Record> recordEntry : records.entrySet()) {
    final long start=System.currentTimeMillis();
    final Data dataKey=recordEntry.getKey();
    final Record record=recordEntry.getValue();
    final Object valueBeforeProcess=record.getValue();
    final Object valueBeforeProcessObject=mapService.toObject(valueBeforeProcess);
    Object objectKey=mapService.toObject(record.getKey());
    if (getPredicate() != null) {
      final SerializationService ss=getNodeEngine().getSerializationService();
      QueryEntry queryEntry=new QueryEntry(ss,dataKey,objectKey,valueBeforeProcessObject);
      if (!getPredicate().apply(queryEntry)) {
        continue;
      }
    }
    entry=new MapEntrySimple(objectKey,valueBeforeProcessObject);
    final Object result=entryProcessor.process(entry);
    final Object valueAfterProcess=entry.getValue();
    Data dataValue=null;
    if (result != null) {
      dataValue=mapService.toData(result);
      response.add(new AbstractMap.SimpleImmutableEntry<Data,Data>(dataKey,dataValue));
    }
    EntryEventType eventType;
    if (valueAfterProcess == null) {
      recordStore.remove(dataKey);
      final long latency=System.currentTimeMillis() - start;
      mapStats.incrementRemoves(latency);
      eventType=EntryEventType.REMOVED;
    }
 else {
      if (valueBeforeProcessObject == null) {
        final long latency=System.currentTimeMillis() - start;
        mapStats.incrementPuts(latency);
        eventType=EntryEventType.ADDED;
      }
 else       if (!entry.isModified()) {
        final long latency=System.currentTimeMillis() - start;
        mapStats.incrementGets(latency);
        eventType=__NO_NEED_TO_FIRE_EVENT;
      }
 else {
        final long latency=System.currentTimeMillis() - start;
        mapStats.incrementPuts(latency);
        eventType=EntryEventType.UPDATED;
      }
      if (eventType != __NO_NEED_TO_FIRE_EVENT) {
        recordStore.put(new AbstractMap.SimpleImmutableEntry<Data,Object>(dataKey,valueAfterProcess));
      }
    }
    if (eventType != __NO_NEED_TO_FIRE_EVENT) {
      final Data oldValue=mapService.toData(valueBeforeProcess);
      final Data value=mapService.toData(valueAfterProcess);
      mapService.publishEvent(getCallerAddress(),name,eventType,dataKey,oldValue,value);
      if (mapService.isNearCacheAndInvalidationEnabled(name)) {
        mapService.invalidateAllNearCaches(name,dataKey);
      }
      if (mapContainer.getWanReplicationPublisher() != null && mapContainer.getWanMergePolicy() != null) {
        if (EntryEventType.REMOVED.equals(eventType)) {
          mapService.publishWanReplicationRemove(name,dataKey,Clock.currentTimeMillis());
        }
 else {
          Record r=recordStore.getRecord(dataKey);
          SimpleEntryView entryView=new SimpleEntryView(dataKey,dataValue,r.getStatistics(),r.getCost(),r.getVersion());
          mapService.publishWanReplicationUpdate(name,entryView);
        }
      }
    }
  }
}
