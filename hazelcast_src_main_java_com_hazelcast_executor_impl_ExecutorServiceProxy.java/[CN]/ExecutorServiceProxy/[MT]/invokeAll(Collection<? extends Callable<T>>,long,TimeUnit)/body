{
  if (unit == null) {
    throw new NullPointerException("unit must not be null");
  }
  if (tasks == null) {
    throw new NullPointerException("tasks must not be null");
  }
  long timeoutNanos=unit.toNanos(timeout);
  List<Future<T>> futures=new ArrayList<Future<T>>(tasks.size());
  List<Future<T>> result=new ArrayList<Future<T>>(tasks.size());
  boolean done=true;
  try {
    for (    Callable<T> task : tasks) {
      long start=System.nanoTime();
      int partitionId=getTaskPartitionId(task);
      futures.add(submitToPartitionOwner(task,partitionId,true));
      timeoutNanos-=System.nanoTime() - start;
      if (timeoutNanos <= 0L) {
        for (        Future<T> future : futures) {
          result.add(future);
        }
        return result;
      }
    }
    done=wait(timeoutNanos,futures,result);
  }
 catch (  Throwable t) {
    logger.severe(t);
  }
 finally {
    if (!done) {
      cancelAll(result);
    }
    return result;
  }
}
