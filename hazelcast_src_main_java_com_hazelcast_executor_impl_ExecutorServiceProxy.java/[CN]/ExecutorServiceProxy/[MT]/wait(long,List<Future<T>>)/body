{
  boolean done=true;
  for (int i=0, size=futures.size(); i < size; i++) {
    long start=System.nanoTime();
    Object value;
    try {
      Future<T> future=futures.get(i);
      value=future.get(timeoutNanos,TimeUnit.NANOSECONDS);
    }
 catch (    ExecutionException e) {
      value=e;
    }
catch (    TimeoutException e) {
      done=false;
      for (int l=i; l < size; l++) {
        Future<T> f=futures.get(i);
        if (f.isDone()) {
          Object v;
          try {
            v=f.get();
          }
 catch (          ExecutionException ex) {
            v=ex;
          }
          futures.set(l,new CompletedFuture<T>(getNodeEngine().getSerializationService(),v,getAsyncExecutor()));
        }
      }
      break;
    }
    futures.set(i,new CompletedFuture<T>(getNodeEngine().getSerializationService(),value,getAsyncExecutor()));
    timeoutNanos-=System.nanoTime() - start;
  }
  return done;
}
