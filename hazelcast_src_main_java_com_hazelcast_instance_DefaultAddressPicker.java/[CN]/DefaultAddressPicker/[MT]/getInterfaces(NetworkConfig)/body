{
  Map<String,String> addressDomainMap;
  TcpIpConfig tcpIpConfig=networkConfig.getJoin().getTcpIpConfig();
  if (tcpIpConfig.isEnabled()) {
    addressDomainMap=new LinkedHashMap<String,String>();
    Collection<String> possibleAddresses=TcpIpJoiner.getConfigurationMembers(node.config);
    for (    String possibleAddress : possibleAddresses) {
      String addressHolder=AddressUtil.getAddressHolder(possibleAddress).getAddress();
      if (AddressUtil.isIpAddress(addressHolder)) {
        if (!addressDomainMap.containsKey(addressHolder)) {
          addressDomainMap.put(addressHolder,null);
        }
      }
 else {
        try {
          Collection<String> addresses=resolveDomainNames(addressHolder);
          for (          String address : addresses) {
            addressDomainMap.put(address,addressHolder);
          }
        }
 catch (        UnknownHostException e) {
          logger.warning("Cannot resolve hostname: '" + addressHolder + "'");
        }
      }
    }
  }
 else {
    addressDomainMap=Collections.emptyMap();
  }
  Collection<InterfaceDefinition> interfaces=new HashSet<InterfaceDefinition>();
  if (networkConfig.getInterfaces().isEnabled()) {
    Collection<String> configInterfaces=networkConfig.getInterfaces().getInterfaces();
    for (    String configInterface : configInterfaces) {
      if (AddressUtil.isIpAddress(configInterface)) {
        String hostname=findHostnameMatchingInterface(addressDomainMap,configInterface);
        interfaces.add(new InterfaceDefinition(hostname,configInterface));
      }
 else {
        logger.info("'" + configInterface + "' is not an IP address! Removing from interface list.");
      }
    }
    logger.info("Interfaces is enabled, trying to pick one address matching to one of: " + interfaces);
  }
 else   if (tcpIpConfig.isEnabled()) {
    for (    Entry<String,String> entry : addressDomainMap.entrySet()) {
      interfaces.add(new InterfaceDefinition(entry.getValue(),entry.getKey()));
    }
    logger.info("Interfaces is disabled, trying to pick one address from TCP-IP config addresses: " + interfaces);
  }
  return interfaces;
}
