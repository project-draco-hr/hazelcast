{
  String groupName=generateRandomString(10);
  HazelcastInstance lite1=newHazelcastInstance(buildConfig(groupName,true),"lite1",new FirewallingNodeContext());
  HazelcastInstance lite2=newHazelcastInstance(buildConfig(groupName,true),"lite2",new FirewallingNodeContext());
  HazelcastInstance data1=newHazelcastInstance(buildConfig(groupName,false),"data1",new FirewallingNodeContext());
  HazelcastInstance data2=newHazelcastInstance(buildConfig(groupName,false),"data2",new FirewallingNodeContext());
  HazelcastInstance data3=newHazelcastInstance(buildConfig(groupName,false),"data3",new FirewallingNodeContext());
  final CountDownLatch splitLatch=new CountDownLatch(6);
  data2.getCluster().addMembershipListener(new MemberRemovedMembershipListener(splitLatch));
  data3.getCluster().addMembershipListener(new MemberRemovedMembershipListener(splitLatch));
  final CountDownLatch mergeLatch=new CountDownLatch(3);
  lite1.getLifecycleService().addLifecycleListener(new MergedEventLifeCycleListener(mergeLatch));
  lite2.getLifecycleService().addLifecycleListener(new MergedEventLifeCycleListener(mergeLatch));
  data1.getLifecycleService().addLifecycleListener(new MergedEventLifeCycleListener(mergeLatch));
  block(lite1,data2);
  block(lite2,data2);
  block(data1,data2);
  block(lite1,data3);
  block(lite2,data3);
  block(data1,data3);
  disconnect(data2,lite1);
  disconnect(data2,lite2);
  disconnect(data2,data1);
  disconnect(data3,lite1);
  disconnect(data3,lite2);
  disconnect(data3,data1);
  disconnect(lite1,data2);
  disconnect(lite2,data2);
  disconnect(data1,data2);
  disconnect(lite1,data3);
  disconnect(lite2,data3);
  disconnect(data1,data3);
  assertOpenEventually(splitLatch,10);
  assertClusterSize(3,lite1);
  assertClusterSize(3,lite2);
  assertClusterSize(3,data1);
  assertClusterSize(2,data2);
  assertClusterSize(2,data3);
  data1.getMap("default").put(1,"cluster1");
  data3.getMap("default").put(1,"cluster2");
  unblock(lite1,data2);
  unblock(lite2,data2);
  unblock(data1,data2);
  unblock(lite1,data3);
  unblock(lite2,data3);
  unblock(data1,data3);
  assertOpenEventually(mergeLatch,120);
  assertClusterSize(5,lite1);
  assertClusterSize(5,lite2);
  assertClusterSize(5,data1);
  assertClusterSize(5,data2);
  assertClusterSize(5,data3);
  assertEquals("cluster1",lite1.getMap("default").get(1));
}
