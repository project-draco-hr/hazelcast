{
  Config config1=createConfigWithPort(multicastEnabled,5003);
  HazelcastInstance hz1=newHazelcastInstance(config1,"test-node1",new FirewallingNodeContext());
  Config config2=createConfigWithPort(multicastEnabled,5002);
  HazelcastInstance hz2=newHazelcastInstance(config2,"test-node2",new FirewallingNodeContext());
  Config config3=createConfigWithPort(multicastEnabled,5001);
  HazelcastInstance hz3=newHazelcastInstance(config3,"test-node3",new FirewallingNodeContext());
  String topicName="testTopic";
  final CountDownLatch receivedLatch=new CountDownLatch(1);
  final ITopic<String> testTopic=hz1.getTopic(topicName);
  testTopic.addMessageListener(new TestMessageListener(receivedLatch));
  final CountDownLatch receivedLatch2=new CountDownLatch(1);
  final ITopic<String> testTopic2=hz2.getTopic(topicName);
  testTopic2.addMessageListener(new TestMessageListener(receivedLatch2));
  final CountDownLatch receivedLatch3=new CountDownLatch(1);
  final ITopic<String> testTopic3=hz3.getTopic(topicName);
  testTopic3.addMessageListener(new TestMessageListener(receivedLatch3));
  final Node n1=TestUtil.getNode(hz1);
  Node n2=TestUtil.getNode(hz2);
  final Node n3=TestUtil.getNode(hz3);
  final CountDownLatch splitLatch=new CountDownLatch(3);
  MembershipAdapter membershipAdapterForN1AndN2=new MembershipAdapter(){
    @Override public void memberRemoved(    MembershipEvent event){
      if (n3.getLocalMember().equals(event.getMember())) {
        splitLatch.countDown();
      }
    }
  }
;
  MembershipAdapter membershipAdapterForN3=new MembershipAdapter(){
    @Override public void memberRemoved(    MembershipEvent event){
      if (n1.getLocalMember().equals(event.getMember())) {
        splitLatch.countDown();
      }
    }
  }
;
  hz1.getCluster().addMembershipListener(membershipAdapterForN1AndN2);
  hz2.getCluster().addMembershipListener(membershipAdapterForN1AndN2);
  hz3.getCluster().addMembershipListener(membershipAdapterForN3);
  final CountDownLatch mergeLatch=new CountDownLatch(2);
  LifecycleListener lifecycleListener=new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleState.MERGED) {
        mergeLatch.countDown();
      }
    }
  }
;
  hz1.getLifecycleService().addLifecycleListener(lifecycleListener);
  hz2.getLifecycleService().addLifecycleListener(lifecycleListener);
  Thread.sleep(5000);
  n1.clusterService.removeAddress(n3.address);
  n2.clusterService.removeAddress(n3.address);
  n3.clusterService.removeAddress(n1.address);
  assertTrue(splitLatch.await(10,TimeUnit.SECONDS));
  assertEquals(2,hz1.getCluster().getMembers().size());
  assertEquals(2,hz2.getCluster().getMembers().size());
  assertEquals(2,hz3.getCluster().getMembers().size());
  assertTrue(mergeLatch.await(60,TimeUnit.SECONDS));
  assertEquals(3,hz1.getCluster().getMembers().size());
  assertEquals(3,hz2.getCluster().getMembers().size());
  assertEquals(3,hz3.getCluster().getMembers().size());
  new Thread(new PublishRunnable(testTopic,receivedLatch)).start();
  new Thread(new PublishRunnable(testTopic2,receivedLatch2)).start();
  new Thread(new PublishRunnable(testTopic3,receivedLatch3)).start();
  assertTrue(receivedLatch.await(30,TimeUnit.SECONDS));
  assertTrue(receivedLatch2.await(30,TimeUnit.SECONDS));
  assertTrue(receivedLatch3.await(30,TimeUnit.SECONDS));
}
