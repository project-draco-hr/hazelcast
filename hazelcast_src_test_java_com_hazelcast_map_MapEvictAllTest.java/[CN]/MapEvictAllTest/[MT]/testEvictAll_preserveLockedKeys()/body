{
  final int numberOfEntries=1000;
  final int numberOfLockedKeys=123;
  final int expectedNumberOfEvictedKeys=numberOfEntries - numberOfLockedKeys;
  final CountDownLatch countDownLatch=new CountDownLatch(expectedNumberOfEvictedKeys);
  final HazelcastInstance node=createHazelcastInstance();
  final IMap map=node.getMap(randomMapName());
  map.addLocalEntryListener(new EntryAdapter(){
    @Override public void onEvictAll(    MapEvent event){
      final int numberOfEntries=event.getNumberOfEntriesAffected();
      for (int i=0; i < numberOfEntries; i++) {
        countDownLatch.countDown();
      }
    }
  }
);
  for (int i=0; i < numberOfEntries; i++) {
    map.put(i,i);
  }
  for (int i=0; i < numberOfLockedKeys; i++) {
    map.lock(i);
  }
  map.evictAll();
  assertOpenEventually(countDownLatch);
  assertEquals(0,countDownLatch.getCount());
}
