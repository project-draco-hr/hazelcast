{
  int numberOfEntries=1000;
  int numberOfLockedKeys=123;
  int expectedNumberOfEvictedKeys=numberOfEntries - numberOfLockedKeys;
  final CountDownLatch countDownLatch=new CountDownLatch(expectedNumberOfEvictedKeys);
  Config cfg=new Config();
  cfg.setProperty(GroupProperties.PROP_PARTITION_COUNT,"1");
  HazelcastInstance node=createHazelcastInstance(cfg);
  IMap<Integer,Integer> map=node.getMap(randomMapName());
  map.addLocalEntryListener(new EntryAdapter<Integer,Integer>(){
    @Override public void mapEvicted(    MapEvent event){
      int numberOfEntries=event.getNumberOfEntriesAffected();
      for (int i=0; i < numberOfEntries; i++) {
        countDownLatch.countDown();
      }
    }
  }
);
  for (int i=0; i < numberOfEntries; i++) {
    map.put(i,i);
  }
  for (int i=0; i < numberOfLockedKeys; i++) {
    map.lock(i);
  }
  map.evictAll();
  assertOpenEventually(countDownLatch);
  assertEquals(0,countDownLatch.getCount());
  assertEquals(numberOfLockedKeys,map.size());
}
