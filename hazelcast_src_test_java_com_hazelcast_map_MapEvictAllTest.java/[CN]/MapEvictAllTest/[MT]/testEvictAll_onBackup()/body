{
  int numberOfEntries=10000;
  String mapName=randomMapName();
  final CountDownLatch countDownLatch=new CountDownLatch(numberOfEntries);
  TestHazelcastInstanceFactory instanceFactory=new TestHazelcastInstanceFactory(5);
  HazelcastInstance node1=instanceFactory.newHazelcastInstance();
  HazelcastInstance node2=instanceFactory.newHazelcastInstance();
  IMap<Integer,Integer> map1=node1.getMap(mapName);
  IMap<Integer,Integer> map2=node2.getMap(mapName);
  map1.addEntryListener(new EntryAdapter<Integer,Integer>(){
    @Override public void mapEvicted(    MapEvent event){
      int numberOfEntries=event.getNumberOfEntriesAffected();
      for (int i=0; i < numberOfEntries; i++) {
        countDownLatch.countDown();
      }
    }
  }
,false);
  for (int i=0; i < numberOfEntries; i++) {
    map1.put(i,i);
  }
  map1.evictAll();
  assertOpenEventually(countDownLatch);
  assertEquals(0,countDownLatch.getCount());
  assertEquals(0,map1.getLocalMapStats().getHeapCost());
  assertEquals(0,map2.getLocalMapStats().getHeapCost());
}
