{
  final ConcurrentMap<Long,String> STORE=new ConcurrentHashMap<Long,String>();
  for (long i=1; i < 7; i++) {
    STORE.put(i,"Event" + i);
  }
  final CountDownLatch latch=new CountDownLatch(1);
  Config config=new Config();
  config.getMapConfig("queue-map").setMapStoreConfig(new MapStoreConfig().setWriteDelaySeconds(1).setImplementation(new MapStore<Long,String>(){
    public String load(    Long key){
      return STORE.get(key);
    }
    public Map<Long,String> loadAll(    Collection<Long> keys){
      Map<Long,String> result=new HashMap<Long,String>();
      for (      Long key : keys) {
        String value=load(key);
        if (value != null) {
          result.put(key,value);
        }
      }
      return result;
    }
    public Set<Long> loadAllKeys(){
      return STORE.keySet();
    }
    public void store(    Long key,    String value){
      latch.countDown();
    }
    public void storeAll(    Map<Long,String> map){
      for (      Map.Entry<Long,String> entry : map.entrySet()) {
        store(entry.getKey(),entry.getValue());
      }
    }
    public void delete(    Long key){
      STORE.remove(key);
    }
    public void deleteAll(    Collection<Long> keys){
      for (      Long key : STORE.keySet()) {
        delete(key);
      }
    }
  }
));
  config.getQueueConfig("tasks").setBackingMapRef("queue-map");
  HazelcastInstance h=Hazelcast.newHazelcastInstance(config);
  IQueue q=h.getQueue("tasks");
  assertEquals(STORE.size(),q.size());
  Transaction t=h.getTransaction();
  t.begin();
  assertEquals(STORE.get(1L),q.poll());
  assertEquals(STORE.get(2L),q.take());
  CMap cmap=TestUtil.getCMap(h,"q:tasks");
  assertEquals(2,cmap.mapRecords.size());
  for (  Record record : cmap.mapRecords.values()) {
    assertTrue(record.isActive());
    assertFalse(record.isRemovable());
    assertNotNull(record.getValueData());
    if (record.getKey().equals(1L)) {
      assertEquals("Event1",record.getValue());
    }
 else     if (record.getKey().equals(2L)) {
      assertEquals("Event2",record.getValue());
    }
 else {
      fail("Invalid key: " + record.getKey());
    }
  }
  t.rollback();
  assertFalse(latch.await(5,TimeUnit.SECONDS));
  assertEquals(2,cmap.mapRecords.size());
  assertEquals(6,STORE.size());
  assertEquals(6,q.size());
  for (int i=1; i < 7; i++) {
    assertEquals("Event" + i,q.poll());
  }
  assertEquals(0,cmap.size());
  for (  Record record : cmap.mapRecords.values()) {
    assertFalse(record.isActive());
  }
}
