{
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(new Config());
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(new Config());
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(new Config());
  final IQueue q1=h1.getQueue("default");
  final IQueue q2=h2.getQueue("default");
  final IQueue q3=h3.getQueue("default");
  assertTrue(q2.offer("item"));
  assertEquals(1,h2.getMap("q:default").size());
  final CountDownLatch latch=new CountDownLatch(1);
  new Thread(new Runnable(){
    public void run(){
      Transaction txn=h3.getTransaction();
      txn.begin();
      assertEquals("item",q3.poll());
      latch.countDown();
    }
  }
).start();
  latch.await();
  h3.getLifecycleService().shutdown();
  Thread.sleep(2000);
  assertEquals(1,h2.getMap("q:default").size());
  assertEquals("item",q2.poll());
  final HazelcastInstance h4=Hazelcast.newHazelcastInstance(new Config());
  final IQueue q4=h4.getQueue("default");
  final CountDownLatch latch2=new CountDownLatch(1);
  assertTrue(q2.offer("item2"));
  new Thread(new Runnable(){
    public void run(){
      Transaction txn=h1.getTransaction();
      txn.begin();
      assertEquals("item2",q1.poll());
      latch2.countDown();
    }
  }
).start();
  latch2.await();
  h1.getLifecycleService().shutdown();
  Thread.sleep(2000);
  assertEquals("item2",q2.poll());
}
