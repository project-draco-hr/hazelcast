{
  Config config=new Config();
  config.getQueueConfig("default").setBackingMapRef("default").setMaxSizePerJVM(100);
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  final IQueue q1=h1.getQueue("default");
  final IQueue q2=h2.getQueue("default");
  for (int i=0; i < 100; i++) {
    assertTrue(q1.offer("item" + i,100,TimeUnit.SECONDS));
    assertTrue(q2.offer("item" + i,100,TimeUnit.SECONDS));
  }
  assertFalse(q1.offer("item"));
  assertFalse(q2.offer("item"));
  assertFalse(q1.offer("item",2,TimeUnit.SECONDS));
  assertFalse(q2.offer("item",2,TimeUnit.SECONDS));
  new Thread(new Runnable(){
    public void run(){
      try {
        Thread.sleep(3000);
        for (int i=0; i < 100; i++) {
          assertEquals("item" + i,q1.poll(2,TimeUnit.SECONDS));
          assertEquals("item" + i,q2.poll(2,TimeUnit.SECONDS));
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
  final ExecutorService es=Executors.newFixedThreadPool(50);
  final CountDownLatch latch=new CountDownLatch(200);
  for (int i=0; i < 100; i++) {
    es.execute(new Runnable(){
      public void run(){
        try {
          assertTrue(q1.offer("item",30,TimeUnit.SECONDS));
          latch.countDown();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
);
    es.execute(new Runnable(){
      public void run(){
        try {
          assertTrue(q2.offer("item",30,TimeUnit.SECONDS));
          latch.countDown();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
  assertTrue(latch.await(20,TimeUnit.SECONDS));
  es.shutdown();
}
