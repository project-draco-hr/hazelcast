{
  Map<Command,ClientCommandHandler> map=new HashMap<Command,ClientCommandHandler>();
  map.put(Command.SADD,new SetAddHandler(this));
  map.put(Command.SREMOVE,new SetRemoveHandler(this));
  map.put(Command.SCONTAINS,new SetContainsHandler(this));
  map.put(Command.SGETALL,new SetGetAllHandler(this));
  map.put(Command.SLISTEN,new CollectionItemListenHandler(this){
    @Override protected CollectionProxyId getCollectionProxyId(    Protocol protocol){
      return new CollectionProxyId(ObjectListProxy.COLLECTION_LIST_NAME,protocol.args[0],CollectionProxyType.SET);
    }
  }
);
  map.put(Command.LADD,new AddHandler(this));
  map.put(Command.LREMOVE,new RemoveHandler(this));
  map.put(Command.LCONTAINS,new ContainsHandler(this));
  map.put(Command.LGETALL,new GetAllHandler(this));
  map.put(Command.LGET,new GetHandler(this));
  map.put(Command.LINDEXOF,new IndexOfHandler(this));
  map.put(Command.LLASTINDEXOF,new LastIndexOfHandler(this));
  map.put(Command.LSET,new ListSetHandler(this));
  map.put(Command.LLISTEN,new CollectionItemListenHandler(this){
    @Override protected CollectionProxyId getCollectionProxyId(    Protocol protocol){
      return new CollectionProxyId(ObjectSetProxy.COLLECTION_SET_NAME,protocol.args[0],CollectionProxyType.LIST);
    }
  }
);
  map.put(Command.MMPUT,new PutHandler(this));
  map.put(Command.MMGET,new MMGetHandler(this));
  map.put(Command.MMSIZE,new MMSizeHandler(this));
  map.put(Command.MMREMOVE,new MMRemoveHandler(this));
  map.put(Command.MMVALUECOUNT,new ValueCountHandler(this));
  map.put(Command.MMCONTAINSKEY,new ContainsKeyHandler(this));
  map.put(Command.MMCONTAINSVALUE,new ContainsValueHandler(this));
  map.put(Command.MMCONTAINSENTRY,new ContainsEntryHandler(this));
  map.put(Command.MMKEYS,new MMKeysHandler(this));
  map.put(Command.MMLOCK,new LockHandler(this));
  map.put(Command.MMUNLOCK,new UnlockHandler(this));
  map.put(Command.MMTRYLOCK,new TryLockHandler(this));
  map.put(Command.MMLISTEN,new ListenHandler(this));
  return map;
}
