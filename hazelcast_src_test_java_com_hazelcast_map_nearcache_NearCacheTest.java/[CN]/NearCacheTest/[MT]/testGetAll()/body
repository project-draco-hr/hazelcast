{
  int mapSize=1000;
  int expectedNearCacheHits=0;
  String mapName="testGetAllWithNearCache";
  Config config=getConfig();
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(false);
  config.getMapConfig(mapName).setNearCacheConfig(nearCacheConfig);
  TestHazelcastInstanceFactory hazelcastInstanceFactory=createHazelcastInstanceFactory(2);
  HazelcastInstance[] instances=hazelcastInstanceFactory.newInstances(config);
  warmUpPartitions(instances);
  HazelcastInstance hazelcastInstance=instances[0];
  Node node=TestUtil.getNode(hazelcastInstance);
  InternalPartitionService partitionService=node.getNodeEngine().getPartitionService();
  IMap<Integer,Integer> map=hazelcastInstance.getMap(mapName);
  HashSet<Integer> keys=new HashSet<Integer>();
  for (int i=0; i < mapSize; i++) {
    map.put(i,i);
    keys.add(i);
  }
  for (int i=0; i < mapSize; i++) {
    map.get(i);
    int partitionId=partitionService.getPartitionId(i);
    if (!partitionService.isPartitionOwner(partitionId)) {
      expectedNearCacheHits++;
    }
  }
  Map<Integer,Integer> allEntries=map.getAll(keys);
  for (int i=0; i < mapSize; i++) {
    assertEquals(i,(int)allEntries.get(i));
  }
  NearCacheStats stats=getNearCacheStats(map);
  assertEquals(format("Near Cache hits should be %d but were %d",expectedNearCacheHits,stats.getHits()),expectedNearCacheHits,stats.getHits());
}
