{
  int mapSize=1000;
  String mapName=randomMapName();
  Random random=new Random();
  Config config=createNearCachedMapConfig(mapName);
  HazelcastInstance instance=createHazelcastInstance(config);
  IMap<Integer,Integer> map=instance.getMap(mapName);
  for (int i=0; i < mapSize; i++) {
    map.put(i,i);
  }
  for (int i=0; i < mapSize; i++) {
    map.get(i);
  }
  final CountDownLatch latch=new CountDownLatch(10);
  ExecutionCallback<Integer> callback=new ExecutionCallback<Integer>(){
    @Override public void onResponse(    Integer response){
      latch.countDown();
    }
    @Override public void onFailure(    Throwable t){
    }
  }
;
  int randomKey=random.nextInt(mapSize);
  map.submitToKey(randomKey,new AbstractEntryProcessor<Integer,Integer>(){
    @Override public Object process(    Map.Entry<Integer,Integer> entry){
      int currentValue=entry.getValue();
      int newValue=currentValue + 1;
      entry.setValue(newValue);
      return newValue;
    }
  }
,callback);
  latch.await(3,TimeUnit.SECONDS);
  NearCacheStats nearCacheStats=getNearCacheStats(map);
  assertEquals(mapSize - 1,nearCacheStats.getOwnedEntryCount());
}
