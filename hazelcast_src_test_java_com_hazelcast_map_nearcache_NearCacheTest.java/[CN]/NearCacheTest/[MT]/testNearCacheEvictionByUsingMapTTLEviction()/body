{
  final int instanceCount=3;
  final int ttl=1;
  final int size=100;
  final Config cfg=new Config();
  final String mapName="_testNearCacheEvictionByUsingMapTTLEviction_";
  final NearCacheConfig nearCacheConfig=new NearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setInMemoryFormat(InMemoryFormat.OBJECT);
  cfg.getMapConfig(mapName).setNearCacheConfig(nearCacheConfig);
  final MapConfig mapConfig=cfg.getMapConfig(mapName);
  mapConfig.setTimeToLiveSeconds(ttl);
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(instanceCount);
  final HazelcastInstance instance1=factory.newHazelcastInstance(cfg);
  final HazelcastInstance instance2=factory.newHazelcastInstance(cfg);
  final HazelcastInstance instance3=factory.newHazelcastInstance(cfg);
  final IMap map1=instance1.getMap(mapName);
  final IMap map2=instance2.getMap(mapName);
  final IMap map3=instance3.getMap(mapName);
  final CountDownLatch latch=new CountDownLatch(size);
  map1.addEntryListener(new EntryAdapter(){
    public void entryEvicted(    EntryEvent event){
      latch.countDown();
    }
  }
,false);
  for (int i=0; i < size; i++) {
    map1.put(i,i);
    map1.get(i);
    map2.get(i);
    map3.get(i);
  }
  assertOpenEventually(latch);
  assertEquals(0,map1.size());
  assertEquals(0,map2.size());
  assertEquals(0,map3.size());
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(0,countNotNullValuesInNearCache(mapName,instance1));
    }
  }
);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(0,countNotNullValuesInNearCache(mapName,instance2));
    }
  }
);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(0,countNotNullValuesInNearCache(mapName,instance3));
    }
  }
);
}
