{
  Data dataKey=entry.getKey();
  Data dataValue=entry.getValue();
  if (partitionId != partitionService.getPartitionId(dataKey)) {
    return;
  }
  Object oldValue=null;
  if (initialLoad) {
    recordStore.putFromLoad(dataKey,dataValue,-1);
  }
 else {
    oldValue=recordStore.put(dataKey,dataValue,-1);
  }
  mapServiceContext.interceptAfterPut(name,dataValue);
  EntryEventType eventType=oldValue == null ? ADDED : UPDATED;
  MapEventPublisher mapEventPublisher=mapServiceContext.getMapEventPublisher();
  dataValue=getValueOrPostProcessedValue(mapServiceContext,recordStore,dataKey,dataValue);
  mapEventPublisher.publishEvent(getCallerAddress(),name,eventType,dataKey,oldValue,dataValue);
  keysToInvalidate.add(dataKey);
  final Record record=recordStore.getRecordOrNull(dataKey);
  if (record == null) {
    return;
  }
  if (shouldWanReplicate()) {
    final Data dataValueAsData=mapServiceContext.toData(dataValue);
    final EntryView entryView=EntryViews.createSimpleEntryView(dataKey,dataValueAsData,record);
    mapEventPublisher.publishWanReplicationUpdate(name,entryView);
  }
  backupEntrySet.add(entry);
  RecordInfo replicationInfo=Records.buildRecordInfo(recordStore.getRecord(dataKey));
  backupRecordInfos.add(replicationInfo);
  evict(false);
}
