{
  ExecutorService ex=Executors.newFixedThreadPool(1);
  try {
    request.onEnqueue();
    writer.write(connection,request);
    writer.flush(connection);
    Future<Protocol> f=null;
    while (!Thread.interrupted()) {
      if (f == null) {
        f=ex.submit(new Callable<Protocol>(){
          public Protocol call() throws Exception {
            return reader.read(connection);
          }
        }
);
      }
      Protocol response=f.get(1,TimeUnit.SECONDS);
      if (response == null)       continue;
      f=null;
      listenerResponseHandler.handleResponse(response,ss);
    }
    connection.close();
    ex.shutdown();
    System.out.println("Closed connection and thus removed the listener");
  }
 catch (  EOFException e) {
    e.printStackTrace();
    return;
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    try {
      connection.close();
    }
 catch (    IOException e1) {
    }
    ex.shutdown();
    System.out.println("Closed connection and thus removed the listener");
    return;
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
catch (  TimeoutException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}
