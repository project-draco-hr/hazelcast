{
  handleCommonBeanAttributes(element,builder,parserContext);
  final NamedNodeMap attrs=element.getAttributes();
  if (attrs != null) {
    for (int a=0; a < attrs.getLength(); a++) {
      final org.w3c.dom.Node att=attrs.item(a);
      final String name=att.getNodeName();
      final String value=att.getNodeValue();
      if ("executor-pool-size".equals(name)) {
        configBuilder.addPropertyValue("executorPoolSize",value);
      }
 else       if ("credentials-ref".equals(name)) {
        configBuilder.addPropertyReference("credentials",value);
      }
    }
  }
  for (  org.w3c.dom.Node node : new IterableNodeList(element,Node.ELEMENT_NODE)) {
    final String nodeName=cleanNodeName(node.getNodeName());
    if ("group".equals(nodeName)) {
      createAndFillBeanBuilder(node,GroupConfig.class,"groupConfig",configBuilder);
    }
 else     if ("network".equals(nodeName)) {
      handleNetwork(node);
    }
 else     if ("listeners".equals(nodeName)) {
      final List listeners=parseListeners(node,ListenerConfig.class);
      configBuilder.addPropertyValue("listenerConfigs",listeners);
    }
 else     if ("serialization".equals(nodeName)) {
      handleSerialization(node);
    }
 else     if ("proxy-factories".equals(nodeName)) {
      final List list=parseProxyFactories(node,ProxyFactoryConfig.class);
      configBuilder.addPropertyValue("proxyFactoryConfigs",list);
    }
 else     if ("load-balancer".equals(nodeName)) {
      handleLoadBalancer(node);
    }
 else     if ("near-cache".equals(nodeName)) {
      handleNearCache(node);
    }
  }
  builder.addConstructorArgValue(configBuilder.getBeanDefinition());
}
