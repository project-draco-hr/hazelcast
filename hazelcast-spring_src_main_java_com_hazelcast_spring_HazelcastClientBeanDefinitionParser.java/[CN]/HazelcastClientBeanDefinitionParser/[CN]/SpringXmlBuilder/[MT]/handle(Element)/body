{
  handleCommonBeanAttributes(element,builder,parserContext);
  final NamedNodeMap attrs=element.getAttributes();
  if (attrs != null) {
    for (int a=0; a < attrs.getLength(); a++) {
      final org.w3c.dom.Node att=attrs.item(a);
      final String name=att.getNodeName();
      final String value=att.getNodeValue();
      if ("group-name".equals(name)) {
        groupConfigBuilder.addPropertyValue("name",value);
      }
 else       if ("group-password".equals(name)) {
        groupConfigBuilder.addPropertyValue("password",value);
      }
 else       if ("auto-update-members".equals(name)) {
        configBuilder.addPropertyValue("updateAutomatic",value);
      }
 else       if ("shuffle-members".equals(name)) {
        configBuilder.addPropertyValue("shuffle",value);
      }
 else       if ("connect-attempt-limit".equals(name)) {
        configBuilder.addPropertyValue("initialConnectionAttemptLimit",value);
      }
 else       if ("connect-timeout".equals(name)) {
        configBuilder.addPropertyValue("connectionTimeout",value);
      }
 else       if ("reconnect-attempt-limit".equals(name)) {
        configBuilder.addPropertyValue("reconnectionAttemptLimit",value);
      }
 else       if ("reconnect-timeout".equals(name)) {
        configBuilder.addPropertyValue("reConnectionTimeOut",value);
      }
 else       if ("credentials-ref".equals(name)) {
        configBuilder.addPropertyReference("credentials",value);
      }
    }
  }
  for (  org.w3c.dom.Node node : new IterableNodeList(element,Node.ELEMENT_NODE)) {
    final String nodeName=cleanNodeName(node.getNodeName());
    if ("member".equals(nodeName)) {
      members.add(getValue(node));
    }
  }
  configBuilder.addPropertyValue("addresses",members);
  builder.addConstructorArgValue(configBuilder.getBeanDefinition());
}
