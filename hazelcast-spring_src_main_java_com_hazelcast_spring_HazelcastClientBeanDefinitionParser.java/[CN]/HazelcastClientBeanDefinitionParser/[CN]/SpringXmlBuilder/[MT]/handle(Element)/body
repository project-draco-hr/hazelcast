{
  ManagedMap properties=new ManagedMap();
  final NamedNodeMap atts=element.getAttributes();
  if (atts != null) {
    for (int a=0; a < atts.getLength(); a++) {
      final org.w3c.dom.Node att=atts.item(a);
      String name=att.getNodeName();
      ClientProperties.ClientPropertyName key;
      final String value=att.getNodeValue();
      if ("group-name".equals(name)) {
        key=ClientProperties.ClientPropertyName.GROUP_NAME;
      }
 else       if ("group-password".equals(name)) {
        key=ClientProperties.ClientPropertyName.GROUP_PASSWORD;
      }
 else {
        continue;
      }
      properties.put(key,value);
    }
  }
  for (  org.w3c.dom.Node node : new IterableNodeList(element,Node.ELEMENT_NODE)) {
    final String nodeName=cleanNodeName(node.getNodeName());
    if ("members".equals(nodeName)) {
      members.add(getValue(node));
    }
 else     if ("client-properties".equals(nodeName)) {
      for (      org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes(),Node.ELEMENT_NODE)) {
        final String name=cleanNodeName(n.getNodeName());
        final String propertyName;
        if ("client-property".equals(name)) {
          propertyName=getTextContent(n.getAttributes().getNamedItem("name")).trim();
          final String value=getValue(n);
          properties.put(propertyName,value);
        }
      }
    }
  }
  propertiesBuilder.addPropertyValue("properties",properties);
  this.builder.addConstructorArgValue(propertiesBuilder.getBeanDefinition());
  this.builder.addConstructorArgValue(members);
}
