{
  Callable task1=new SleepingTask(Integer.MAX_VALUE);
  ExecutorService executor=createSingleNodeExecutorService("testCancellationAwareTask",1);
  Future future1=executor.submit(task1);
  try {
    future1.get(2,TimeUnit.SECONDS);
    fail("SleepingTask should not return response");
  }
 catch (  TimeoutException ignored) {
  }
catch (  Exception e) {
    if (e.getCause() instanceof RejectedExecutionException) {
      fail("SleepingTask is rejected!");
    }
  }
  assertFalse(future1.isDone());
  Callable task2=new BasicTestCallable();
  Future future2=executor.submit(task2);
  assertFalse(future2.isDone());
  assertTrue(future2.cancel(true));
  assertTrue(future2.isCancelled());
  assertTrue(future2.isDone());
  try {
    future2.get();
    fail("Should not complete the task successfully");
  }
 catch (  CancellationException expected) {
  }
catch (  Exception e) {
    fail("Unexpected exception " + e);
  }
}
