{
  String name="issue99TestQueueTakeAndDuringRollback";
  HazelcastInstance hz=createHazelcastInstance();
  IQueue<String> testQueue=hz.getQueue(name);
  final CountDownLatch offerLatch=new CountDownLatch(2);
  final CountDownLatch pollLatch=new CountDownLatch(2);
  testQueue.addItemListener(new ItemListener<String>(){
    public void itemAdded(    ItemEvent<String> item){
      offerLatch.countDown();
    }
    public void itemRemoved(    ItemEvent<String> item){
      pollLatch.countDown();
    }
  }
,true);
  TransactionContext context=hz.newTransactionContext();
  context.beginTransaction();
  TransactionalQueue<Object> queue=context.getQueue(name);
  queue.offer("tx Hello");
  queue.offer("tx World");
  context.commitTransaction();
  TransactionContext context2=hz.newTransactionContext();
  context2.beginTransaction();
  TransactionalQueue<Object> queue2=context2.getQueue(name);
  assertEquals("tx Hello",queue2.poll());
  assertEquals("tx World",queue2.poll());
  context2.commitTransaction();
  assertTrue("Remaining offer listener count: " + offerLatch.getCount(),offerLatch.await(2,TimeUnit.SECONDS));
  assertTrue("Remaining poll listener count: " + pollLatch.getCount(),pollLatch.await(2,TimeUnit.SECONDS));
}
