{
  filterConfig=config;
  servletContext=config.getServletContext();
  initInstance();
  String mapName=getParam("map-name");
  if (mapName != null) {
    clusterMapName=mapName;
  }
 else {
    clusterMapName="_web_" + servletContext.getServletContextName();
  }
  try {
    Config hzConfig=hazelcastInstance.getConfig();
    String sessionTTL=getParam("session-ttl-seconds");
    if (sessionTTL != null) {
      MapConfig mapConfig=hzConfig.getMapConfig(clusterMapName);
      mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));
      hzConfig.addMapConfig(mapConfig);
    }
  }
 catch (  UnsupportedOperationException ignored) {
    LOGGER.info("client cannot access Config.");
  }
  initCookieParams();
  initParams();
  if (!stickySession) {
    getClusterMap().addEntryListener(new EntryListener<String,Object>(){
      public void entryAdded(      EntryEvent<String,Object> entryEvent){
      }
      public void entryRemoved(      EntryEvent<String,Object> entryEvent){
        if (entryEvent.getMember() == null || !entryEvent.getMember().localMember()) {
          removeSessionLocally(entryEvent.getKey());
        }
      }
      public void entryUpdated(      EntryEvent<String,Object> entryEvent){
      }
      public void entryEvicted(      EntryEvent<String,Object> entryEvent){
        entryRemoved(entryEvent);
      }
    }
,false);
  }
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest("sticky:" + stickySession + ", shutdown-on-destroy: "+ shutdownOnDestroy+ ", map-name: "+ clusterMapName);
  }
}
