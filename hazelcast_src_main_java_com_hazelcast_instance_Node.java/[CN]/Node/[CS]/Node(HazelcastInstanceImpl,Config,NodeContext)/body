{
  this.hazelcastInstance=hazelcastInstance;
  this.config=config;
  this.configClassLoader=config.getClassLoader();
  this.groupProperties=new GroupProperties(config);
  this.buildInfo=BuildInfoProvider.getBuildInfo();
  String loggingType=groupProperties.LOGGING_TYPE.getString();
  loggingService=new LoggingServiceImpl(config.getGroupConfig().getName(),loggingType,buildInfo);
  final AddressPicker addressPicker=nodeContext.createAddressPicker(this);
  try {
    addressPicker.pickAddress();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
  final ServerSocketChannel serverSocketChannel=addressPicker.getServerSocketChannel();
  try {
    address=addressPicker.getPublicAddress();
    final Map<String,Object> memberAttributes=findMemberAttributes(config.getMemberAttributeConfig().asReadOnly());
    localMember=new MemberImpl(address,true,createMemberUuid(address),hazelcastInstance,memberAttributes);
    loggingService.setThisMember(localMember);
    logger=loggingService.getLogger(Node.class.getName());
    hazelcastThreadGroup=new HazelcastThreadGroup(hazelcastInstance.getName(),logger,configClassLoader);
    nodeExtension=NodeExtensionFactory.create(configClassLoader);
    nodeExtension.beforeStart(this);
    serializationService=nodeExtension.createSerializationService();
    securityContext=config.getSecurityConfig().isEnabled() ? nodeExtension.getSecurityContext() : null;
    nodeEngine=new NodeEngineImpl(this);
    clientEngine=new ClientEngineImpl(this);
    connectionManager=nodeContext.createConnectionManager(this,serverSocketChannel);
    partitionService=new InternalPartitionServiceImpl(this);
    clusterService=new ClusterServiceImpl(this);
    textCommandService=new TextCommandServiceImpl(this);
    nodeExtension.printNodeInfo(this);
    this.multicastService=createMulticastService(addressPicker.getBindAddress(),this,config,logger);
    initializeListeners(config);
    joiner=nodeContext.createJoiner(this);
  }
 catch (  Throwable e) {
    try {
      serverSocketChannel.close();
    }
 catch (    Throwable ignored) {
    }
    throw ExceptionUtil.rethrow(e);
  }
}
