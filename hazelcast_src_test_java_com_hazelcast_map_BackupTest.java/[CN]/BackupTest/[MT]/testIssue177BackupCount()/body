{
  final int nodeCount=6;
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();
  final Config config=getConfig();
  config.setProperty(GroupProperty.PARTITION_BACKUP_SYNC_INTERVAL.getName(),"1");
  config.getMapConfig(mapName).setBackupCount(1).setStatisticsEnabled(true);
  final Random rand=new Random();
  final AtomicReferenceArray<HazelcastInstance> instances=new AtomicReferenceArray<HazelcastInstance>(nodeCount);
  final int count=10000;
  final int totalCount=count * (nodeCount - 1);
  final CountDownLatch latch=new CountDownLatch(nodeCount);
  for (int i=0; i < nodeCount; i++) {
    final int index=i;
    new Thread(){
      public void run(){
        sleepMillis(index * rand.nextInt(1000));
        HazelcastInstance instance=nodeFactory.newHazelcastInstance(config);
        instances.set(index,instance);
        if (index != 0) {
          IMap<Object,Object> map=instance.getMap(mapName);
          for (int j=0; j < count; j++) {
            map.put(getName() + "-" + j,"value");
          }
        }
        latch.countDown();
      }
    }
.start();
  }
  assertTrue(latch.await(5,TimeUnit.MINUTES));
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      long totalOwned=0L;
      long totalBackup=0L;
      for (int i=0; i < instances.length(); i++) {
        HazelcastInstance hz=instances.get(i);
        LocalMapStats stats=hz.getMap(mapName).getLocalMapStats();
        totalOwned+=stats.getOwnedEntryCount();
        totalBackup+=stats.getBackupEntryCount();
      }
      assertEquals("Owned entry count is wrong! ",totalCount,totalOwned);
      assertEquals("Backup entry count is wrong! ",totalCount,totalBackup);
    }
  }
);
}
