{
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  Config config=getConfig();
  final HazelcastInstance hz1=nodeFactory.newHazelcastInstance(config);
  final HazelcastInstance hz2=nodeFactory.newHazelcastInstance(config);
  final IMap<Object,Object> map=hz2.getMap(mapName);
  final int threads=16;
  final int perThreadSize=1000;
  final int size=threads * perThreadSize;
  for (int i=0; i < size; i++) {
    map.put(i,i);
  }
  new Thread(){
    public void run(){
      IMap<Object,Object> m=hz1.getMap(mapName);
      while (m.size() > size / 2) {
        sleepMillis(5);
      }
      TestUtil.terminateInstance(hz1);
    }
  }
.start();
  final CountDownLatch latch=new CountDownLatch(threads);
  for (int i=0; i < threads; i++) {
    final int index=i;
    new Thread(){
      public void run(){
        for (int k=(index * perThreadSize); k < (index + 1) * perThreadSize; k++) {
          map.remove(k);
          sleepMillis(1);
        }
        latch.countDown();
      }
    }
.start();
  }
  assertTrue(latch.await(5,TimeUnit.MINUTES));
  assertEquals("Remove failed!",0,map.size());
}
