{
  final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);
  Config config=getConfig();
  final HazelcastInstance hz=nodeFactory.newHazelcastInstance(config);
  final HazelcastInstance hz2=nodeFactory.newHazelcastInstance(config);
  final IMap<Integer,byte[]> map=hz2.getMap(MAP_NAME);
  final int size=100000;
  final byte[] data=new byte[250];
  final int threads=100;
  final int l=size / threads;
  final CountDownLatch latch=new CountDownLatch(threads);
  ExecutorService ex=Executors.newFixedThreadPool(threads);
  new Thread(){
    public void run(){
      while (hz.getMap(MAP_NAME).size() < size / 2) {
        try {
          sleep(5);
        }
 catch (        InterruptedException ignored) {
          return;
        }
      }
      TestUtil.terminateInstance(hz);
    }
  }
.start();
  for (int i=0; i < threads; i++) {
    final int n=i;
    ex.execute(new Runnable(){
      public void run(){
        for (int j=(n * l); j < (n + 1) * l; j++) {
          map.put(j,data);
          try {
            Thread.sleep(1);
          }
 catch (          InterruptedException ignored) {
            return;
          }
        }
        latch.countDown();
      }
    }
);
  }
  try {
    assertTrue(latch.await(5,TimeUnit.MINUTES));
    assertEquals("Data lost!",size,map.size());
  }
  finally {
    ex.shutdownNow();
  }
}
