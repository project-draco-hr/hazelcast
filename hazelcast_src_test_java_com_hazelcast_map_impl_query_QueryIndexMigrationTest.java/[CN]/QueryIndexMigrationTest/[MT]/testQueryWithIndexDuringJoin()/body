{
  final String name="test";
  final String findMe="find-me";
  int nodeCount=5;
  final int entryPerNode=1000;
  final int modulo=10;
  final CountDownLatch latch=new CountDownLatch(nodeCount);
  final Config config=newConfigWithIndex(name,"name");
  for (int i=0; i < nodeCount; i++) {
    new Thread(new Runnable(){
      @Override public void run(){
        HazelcastInstance hz=nodeFactory.newHazelcastInstance(config);
        IMap<Object,Object> map=hz.getMap(name);
        fillMap(map,findMe,entryPerNode,modulo);
        latch.countDown();
      }
    }
).start();
  }
  assertTrue(latch.await(1,MINUTES));
  Collection<HazelcastInstance> instances=nodeFactory.getAllHazelcastInstances();
  assertEquals(nodeCount,instances.size());
  waitAllForSafeState(instances);
  int expected=entryPerNode / modulo * nodeCount;
  for (  HazelcastInstance hz : instances) {
    IMap<Object,Object> map=hz.getMap(name);
    Predicate predicate=equal("name",findMe);
    for (int i=0; i < 10; i++) {
      int size=map.values(predicate).size();
      assertEquals(expected,size);
    }
  }
}
