{
  final Node node=nodeEngine.getNode();
  logger.log(Level.FINEST,"Registering core services...");
  registerService(ClusterServiceImpl.SERVICE_NAME,node.getClusterService());
  registerService(PartitionServiceImpl.SERVICE_NAME,node.getPartitionService());
  registerService(ProxyServiceImpl.SERVICE_NAME,nodeEngine.getProxyService());
  registerService(TransactionManagerServiceImpl.SERVICE_NAME,nodeEngine.getTransactionManagerService());
  registerService(ClientEngineImpl.SERVICE_NAME,node.clientEngine);
  final ServicesConfig servicesConfig=node.getConfig().getServicesConfig();
  final Map<String,Properties> serviceProps;
  final Map<String,Object> serviceConfigObjects;
  if (servicesConfig != null) {
    if (servicesConfig.isEnableDefaults()) {
      logger.log(Level.FINEST,"Registering default services...");
      registerService(MapService.SERVICE_NAME,new MapService(nodeEngine));
      registerService(LockService.SERVICE_NAME,new LockServiceImpl(nodeEngine));
      registerService(QueueService.SERVICE_NAME,new QueueService(nodeEngine));
      registerService(TopicService.SERVICE_NAME,new TopicService());
      registerService(CollectionService.SERVICE_NAME,new CollectionService(nodeEngine));
      registerService(DistributedExecutorService.SERVICE_NAME,new DistributedExecutorService());
      registerService(AtomicLongService.SERVICE_NAME,new AtomicLongService());
      registerService(CountDownLatchService.SERVICE_NAME,new CountDownLatchService());
      registerService(SemaphoreService.SERVICE_NAME,new SemaphoreService(nodeEngine));
      registerService(IdGeneratorService.SERVICE_NAME,new IdGeneratorService(nodeEngine));
    }
    serviceProps=new HashMap<String,Properties>();
    serviceConfigObjects=new HashMap<String,Object>();
    final Collection<ServiceConfig> serviceConfigs=servicesConfig.getServiceConfigs();
    for (    ServiceConfig serviceConfig : serviceConfigs) {
      if (serviceConfig.isEnabled()) {
        Object service=serviceConfig.getServiceImpl();
        if (service == null) {
          service=createServiceObject(serviceConfig.getClassName());
        }
        if (service != null) {
          registerService(serviceConfig.getName(),service);
          serviceProps.put(serviceConfig.getName(),serviceConfig.getProperties());
          if (serviceConfig.getConfigObject() != null) {
            serviceConfigObjects.put(serviceConfig.getName(),serviceConfig.getConfigObject());
          }
        }
      }
    }
  }
 else {
    serviceProps=Collections.emptyMap();
    serviceConfigObjects=Collections.emptyMap();
  }
  for (  ServiceInfo serviceInfo : services.values()) {
    final Object service=serviceInfo.getService();
    if (serviceInfo.isConfigurableService()) {
      try {
        logger.log(Level.FINEST,"Configuring service -> " + service);
        final Object configObject=serviceConfigObjects.get(serviceInfo.getName());
        ((ConfigurableService)service).configure(configObject);
      }
 catch (      Throwable t) {
        logger.log(Level.SEVERE,"Error while configuring service: " + t.getMessage(),t);
      }
    }
    if (serviceInfo.isManagedService()) {
      try {
        logger.log(Level.FINEST,"Initializing service -> " + service);
        final Properties props=serviceProps.get(serviceInfo.getName());
        ((ManagedService)service).init(nodeEngine,props != null ? props : new Properties());
      }
 catch (      Throwable t) {
        logger.log(Level.SEVERE,"Error while initializing service: " + t.getMessage(),t);
      }
    }
  }
}
