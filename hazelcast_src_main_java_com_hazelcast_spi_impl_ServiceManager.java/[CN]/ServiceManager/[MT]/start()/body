{
  final Node node=nodeEngine.getNode();
  logger.log(Level.FINEST,"Registering core services...");
  registerService(ClusterServiceImpl.SERVICE_NAME,node.getClusterService());
  registerService(PartitionServiceImpl.SERVICE_NAME,node.getPartitionService());
  registerService(ProxyServiceImpl.NAME,nodeEngine.getProxyService());
  final ServicesConfig servicesConfigConfig=node.getConfig().getServicesConfigConfig();
  if (servicesConfigConfig != null) {
    if (servicesConfigConfig.isEnableDefaults()) {
      logger.log(Level.FINEST,"Registering default services...");
      registerService(MapService.SERVICE_NAME,new MapService(nodeEngine));
      registerService(LockService.SERVICE_NAME,new LockService(nodeEngine));
      registerService(QueueService.SERVICE_NAME,new QueueService(nodeEngine));
      registerService(TopicService.SERVICE_NAME,new TopicService());
      registerService(CollectionService.SERVICE_NAME,new CollectionService(nodeEngine));
      registerService(DistributedExecutorService.SERVICE_NAME,new DistributedExecutorService());
      registerService(AtomicNumberService.SERVICE_NAME,new AtomicNumberService());
      registerService(CountDownLatchService.SERVICE_NAME,new CountDownLatchService());
      registerService(SemaphoreService.SERVICE_NAME,new SemaphoreService(nodeEngine));
    }
    final Collection<ServiceConfig> serviceConfigs=servicesConfigConfig.getServiceConfigs();
    for (    ServiceConfig serviceConfig : serviceConfigs) {
      Object service=null;
      if (serviceConfig.isEnabled()) {
        if (serviceConfig.isDefaultService()) {
          if (servicesConfigConfig.isEnableDefaults()) {
            continue;
          }
          service=createServiceObject(serviceConfig.getClassName());
        }
 else {
          service=serviceConfig.getServiceImpl();
          if (service == null) {
            service=createServiceObject(serviceConfig.getClassName());
          }
        }
        if (service != null) {
          registerService(serviceConfig.getName(),service,serviceConfig.getProperties());
        }
      }
    }
  }
}
