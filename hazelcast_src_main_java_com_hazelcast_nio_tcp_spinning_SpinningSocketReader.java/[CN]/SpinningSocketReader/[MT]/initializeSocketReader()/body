{
  if (readHandler != null) {
    return;
  }
  int readBytes=socketChannel.read(protocolBuffer);
  if (readBytes == -1) {
    throw new EOFException("Could not read protocol type!");
  }
  if (readBytes == 0 && connectionManager.isSSLEnabled()) {
    return;
  }
  if (protocolBuffer.hasRemaining()) {
    return;
  }
  String protocol=bytesToString(protocolBuffer.array());
  SocketWriter socketWriter=connection.getSocketWriter();
  if (CLUSTER.equals(protocol)) {
    configureBuffers(ioService.getSocketReceiveBufferSize() * KILO_BYTE);
    connection.setType(MEMBER);
    socketWriter.setProtocol(CLUSTER);
    readHandler=ioService.createReadHandler(connection);
  }
 else   if (CLIENT_BINARY.equals(protocol)) {
    configureBuffers(ioService.getSocketClientReceiveBufferSize() * KILO_BYTE);
    socketWriter.setProtocol(CLIENT_BINARY);
    readHandler=new OldClientReadHandler(connection,ioService);
  }
 else   if (CLIENT_BINARY_NEW.equals(protocol)) {
    configureBuffers(ioService.getSocketClientReceiveBufferSize() * KILO_BYTE);
    socketWriter.setProtocol(CLIENT_BINARY_NEW);
    readHandler=new NewClientReadHandler(connection,ioService);
  }
 else {
    configureBuffers(ioService.getSocketReceiveBufferSize() * KILO_BYTE);
    socketWriter.setProtocol(Protocols.TEXT);
    inputBuffer.put(protocolBuffer.array());
    readHandler=new TextReadHandler(connection);
    connection.getConnectionManager().incrementTextConnections();
  }
}
