{
  int partitionId=getPartitionId();
  InternalPartitionService partitionService=getNodeEngine().getPartitionService();
  Set<Data> filteredKeys=null;
  if (keys != null) {
    filteredKeys=new HashSet<Data>();
    for (    Data k : keys) {
      if (partitionService.getPartitionId(k) == partitionId) {
        filteredKeys.add(k);
      }
    }
  }
  if (filteredKeys == null || filteredKeys.isEmpty()) {
    return;
  }
  try {
    ICacheService service=getService();
    cache=service.getOrCreateRecordStore(name,partitionId);
    Set<Data> keysLoaded=cache.loadAll(filteredKeys,replaceExistingValues);
    int loadedKeyCount=keysLoaded.size();
    if (loadedKeyCount > 0) {
      backupRecords=new HashMap<Data,CacheRecord>(loadedKeyCount);
      for (      Data key : keysLoaded) {
        CacheRecord record=cache.getRecord(key);
        if (record != null) {
          backupRecords.put(key,record);
        }
      }
      shouldBackup=!backupRecords.isEmpty();
    }
  }
 catch (  CacheException e) {
    response=new CacheClearResponse(e);
  }
}
