{
  final String mapName=randomMapName();
  JobTracker tracker=instance.getJobTracker(mapName);
  Job<Integer,Integer> job=populateMapAndCreateJob(instance,mapName,10000);
  JobCompletableFuture<Map<String,Integer>> future=job.chunkSize(10).mapper(new MapReduceTest.GroupingTestMapper()).reducer(new MapReduceTest.TestReducerFactory()).submit();
  final TrackableJob trackableJob=tracker.getTrackableJob(future.getJobId());
  final JobProcessInformation processInformation=trackableJob.getJobProcessInformation();
  Map<String,Integer> result=future.get();
  int[] expectedResults=new int[4];
  for (int i=0; i < 10000; i++) {
    int index=i % 4;
    expectedResults[index]+=i;
  }
  for (int i=0; i < 4; i++) {
    assertEquals(expectedResults[i],(int)result.get(String.valueOf(i)));
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run(){
      if (processInformation.getProcessedRecords() < 10000) {
        System.err.println(processInformation.getProcessedRecords());
      }
      assertEquals(10000,processInformation.getProcessedRecords());
    }
  }
);
}
