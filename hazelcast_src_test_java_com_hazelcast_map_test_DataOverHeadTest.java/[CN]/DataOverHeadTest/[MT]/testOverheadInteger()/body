{
  Map map=new ConcurrentHashMap();
  System.gc();
  long usedBefore=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  for (int i=0; i < recordCount; i++) {
    map.put(i,i);
  }
  System.gc();
  long usedAfter=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  long used=usedAfter - usedBefore;
  System.out.println("1-Used Memory:" + (used / 1024) + " KB");
  long mem1=used / recordCount;
  System.out.println("1-Memory Per Record:" + mem1 + " bytes");
  map.clear();
  FastDataOutputStream out=new FastDataOutputStream();
  System.gc();
  usedBefore=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  DefaultSerializers.IntegerSerializer bs=new DefaultSerializers.IntegerSerializer();
  for (int i=0; i < recordCount; i++) {
    Data data=new Data();
    bs.write(out,i);
    data.writeData(out);
    map.put(i,data);
  }
  System.gc();
  usedAfter=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  used=usedAfter - usedBefore;
  long mem2=used / recordCount;
  System.out.println("2-Used Memory:" + (used / 1024) + " KB");
  System.out.println("2-Memory Per Record:" + mem2 + " bytes");
  System.out.println("Overhead of data (int):" + (mem2 - mem1));
  System.out.println();
}
