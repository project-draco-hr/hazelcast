{
  final NodeEngineImpl nodeEngine=(NodeEngineImpl)getNodeEngine();
  final PartitionServiceImpl partitionService=(PartitionServiceImpl)nodeEngine.getPartitionService();
  final int partitionId=getPartitionId();
  final PartitionInfo partitionInfo=partitionService.getPartitionInfo(partitionId);
  final Address owner=partitionInfo.getOwner();
  if (!nodeEngine.getThisAddress().equals(owner)) {
    final ILogger logger=nodeEngine.getLogger(getClass());
    logger.log(Level.FINEST,"Ignoring sync request, since this node is not owner of partition[" + partitionId + "].");
    return;
  }
  final Collection<MigrationAwareService> services=nodeEngine.getServices(MigrationAwareService.class);
  final PartitionReplicationEvent event=new PartitionReplicationEvent(partitionId,getReplicaIndex());
  final List<Operation> tasks=new LinkedList<Operation>();
  for (  MigrationAwareService service : services) {
    final Operation op=service.prepareReplicationOperation(event);
    if (op != null) {
      tasks.add(op);
    }
  }
  if (!tasks.isEmpty()) {
    if (!nodeEngine.getThisAddress().equals(owner)) {
      final ILogger logger=nodeEngine.getLogger(getClass());
      logger.log(Level.FINEST,"Ignoring sync request, since this node is not owner of partition[" + partitionId + "].");
      return;
    }
    final SerializationService serializationService=nodeEngine.getSerializationService();
    final ObjectDataOutput out=serializationService.createObjectDataOutput(1024 * 32);
    try {
      out.writeInt(tasks.size());
      for (      Operation task : tasks) {
        serializationService.writeObject(out,task);
      }
      byte[] data=IOUtil.compress(out.toByteArray());
      final OperationService operationService=nodeEngine.getOperationService();
      ReplicaSyncResponse syncResponse=new ReplicaSyncResponse(data,partitionService.getPartitionVersion(partitionId));
      syncResponse.setPartitionId(partitionId).setReplicaIndex(getReplicaIndex());
      operationService.send(syncResponse,getCallerAddress());
    }
  finally {
      IOUtil.closeResource(out);
    }
  }
}
