{
  final HazelcastInstance hz=getHazelcastInstance();
  assertNotNull(hz);
  assertEquals(Hazelcast.getDefaultInstance(),hz);
  final int count=100;
  final int childCount=3;
  insertDummyEntities(count,childCount);
  sleep(1);
  List<DummyEntity> list=new ArrayList<DummyEntity>(count);
  Session session=sf.openSession();
  try {
    for (int i=0; i < count; i++) {
      DummyEntity e=(DummyEntity)session.get(DummyEntity.class,new Long(i));
      session.evict(e);
      list.add(e);
    }
  }
  finally {
    session.close();
  }
  session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      dummy.setDate(new Date());
      session.update(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Map<?,?> cache=hz.getMap(DummyEntity.class.getName());
  Map<?,?> propCache=hz.getMap(DummyProperty.class.getName());
  Map<?,?> propCollCache=hz.getMap(DummyEntity.class.getName() + ".properties");
  assertEquals((childCount + 1) * count,stats.getEntityInsertCount());
  assertEquals((childCount + 1) * count * 2,stats.getSecondLevelCachePutCount());
  assertEquals(childCount * count,stats.getEntityLoadCount());
  assertEquals(count,stats.getSecondLevelCacheHitCount());
  assertEquals(count,stats.getSecondLevelCacheMissCount());
  assertEquals(count,cache.size());
  assertEquals(count * childCount,propCache.size());
  assertEquals(count,propCollCache.size());
  sf.getCache().evictEntityRegion(DummyEntity.class);
  sf.getCache().evictEntityRegion(DummyProperty.class);
  assertEquals(0,cache.size());
  assertEquals(0,propCache.size());
  stats.logSummary();
}
