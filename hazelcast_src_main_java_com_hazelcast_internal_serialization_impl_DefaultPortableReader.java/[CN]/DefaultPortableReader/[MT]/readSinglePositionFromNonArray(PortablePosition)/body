{
switch (position.getType()) {
case BYTE:
    return (T)Byte.valueOf(in.readByte(position.getStreamPosition()));
case BYTE_ARRAY:
  return (T)readSingleByteArray(position);
case SHORT:
return (T)Short.valueOf(in.readShort(position.getStreamPosition()));
case SHORT_ARRAY:
return (T)readSingleShortArray(position);
case INT:
return (T)Integer.valueOf(in.readInt(position.getStreamPosition()));
case INT_ARRAY:
return (T)readSingleIntArray(position);
case LONG:
return (T)Long.valueOf(in.readLong(position.getStreamPosition()));
case LONG_ARRAY:
return (T)readSingleLongArray(position);
case FLOAT:
return (T)Float.valueOf(in.readFloat(position.getStreamPosition()));
case FLOAT_ARRAY:
return (T)readSingleFloatArray(position);
case DOUBLE:
return (T)Double.valueOf(in.readDouble(position.getStreamPosition()));
case DOUBLE_ARRAY:
return (T)readSingleDoubleArray(position);
case BOOLEAN:
return (T)Boolean.valueOf(in.readBoolean(position.getStreamPosition()));
case BOOLEAN_ARRAY:
return (T)readSingleBooleanArray(position);
case CHAR:
return (T)Character.valueOf(in.readChar(position.getStreamPosition()));
case CHAR_ARRAY:
return (T)readSingleCharArray(position);
case UTF:
in.position(position.getStreamPosition());
return (T)in.readUTF();
case UTF_ARRAY:
return (T)readSingleUTFArray(position);
case PORTABLE:
in.position(position.getStreamPosition());
return (T)serializer.readAndInitialize(in,position.getFactoryId(),position.getClassId());
case PORTABLE_ARRAY:
return (T)readSinglePortableArray(position);
default :
throw new IllegalArgumentException("Unsupported type " + position.getType());
}
}
