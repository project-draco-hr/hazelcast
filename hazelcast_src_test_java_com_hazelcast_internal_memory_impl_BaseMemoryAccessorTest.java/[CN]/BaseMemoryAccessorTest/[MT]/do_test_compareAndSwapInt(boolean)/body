{
  long address=0;
  try {
    address=allocateMemory(16);
    long accessAddress=aligned ? address : address + 1;
    memoryAccessor.putInt(accessAddress,1);
    assertEquals(1,memoryAccessor.getInt(accessAddress));
    assertFalse(memoryAccessor.compareAndSwapInt(null,accessAddress,0,2));
    assertTrue(memoryAccessor.compareAndSwapInt(null,accessAddress,1,2));
    assertEquals(2,memoryAccessor.getInt(accessAddress));
    SampleObject obj=new SampleObject();
    memoryAccessor.putInt(obj,SampleObject.INT_VALUE_OFFSET,1);
    assertEquals(1,memoryAccessor.getInt(obj,SampleObject.INT_VALUE_OFFSET));
    assertFalse(memoryAccessor.compareAndSwapInt(obj,SampleObject.INT_VALUE_OFFSET,0,2));
    assertTrue(memoryAccessor.compareAndSwapInt(obj,SampleObject.INT_VALUE_OFFSET,1,2));
    assertEquals(2,memoryAccessor.getInt(obj,SampleObject.INT_VALUE_OFFSET));
  }
  finally {
    if (address != 0) {
      freeMemory(address);
    }
  }
}
