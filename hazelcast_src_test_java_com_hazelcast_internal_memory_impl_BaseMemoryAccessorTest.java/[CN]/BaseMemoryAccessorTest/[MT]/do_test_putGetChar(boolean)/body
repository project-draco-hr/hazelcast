{
  long address=0;
  try {
    address=allocateMemory(16);
    long accessAddress=aligned ? address : address + 1;
    memoryAccessor.putChar(accessAddress,'A');
    assertEquals('A',memoryAccessor.getChar(accessAddress));
    memoryAccessor.putCharVolatile(null,accessAddress,'B');
    assertEquals('B',memoryAccessor.getCharVolatile(null,accessAddress));
    SampleObject obj=new SampleObject();
    memoryAccessor.putChar(obj,SampleObject.CHAR_VALUE_OFFSET,'C');
    assertEquals('C',memoryAccessor.getChar(obj,SampleObject.CHAR_VALUE_OFFSET));
    memoryAccessor.putCharVolatile(obj,SampleObject.CHAR_VALUE_OFFSET,'D');
    assertEquals('D',memoryAccessor.getCharVolatile(obj,SampleObject.CHAR_VALUE_OFFSET));
  }
  finally {
    if (address != 0) {
      freeMemory(address);
    }
  }
}
