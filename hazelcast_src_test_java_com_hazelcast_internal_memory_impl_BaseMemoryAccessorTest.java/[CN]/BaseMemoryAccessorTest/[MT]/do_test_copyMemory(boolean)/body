{
  final int COPY_LENGTH=8;
  long sourceAddress=0;
  long destinationAddress=0;
  try {
    sourceAddress=allocateMemory(2 * COPY_LENGTH);
    destinationAddress=allocateMemory(2 * COPY_LENGTH);
    long accessSourceAddress=aligned ? sourceAddress : sourceAddress + 1;
    long accessDestinationAddress=aligned ? destinationAddress : destinationAddress + 1;
    for (int i=0; i < COPY_LENGTH; i++) {
      memoryAccessor.putByte(accessSourceAddress + i,(byte)(i * i));
    }
    memoryAccessor.copyMemory(accessSourceAddress,accessDestinationAddress,COPY_LENGTH);
    for (int i=0; i < COPY_LENGTH; i++) {
      assertEquals((byte)(i * i),memoryAccessor.getByte(accessDestinationAddress + i));
    }
    byte[] src=new byte[]{0x11,0x22,0x33,0x44};
    byte[] dest=new byte[src.length];
    memoryAccessor.copyMemory(src,MemoryAccessor.ARRAY_BYTE_BASE_OFFSET,dest,MemoryAccessor.ARRAY_BYTE_BASE_OFFSET,src.length);
    assertArrayEquals(src,dest);
  }
  finally {
    if (sourceAddress != 0) {
      freeMemory(sourceAddress);
    }
    if (destinationAddress != 0) {
      freeMemory(destinationAddress);
    }
  }
}
