{
  long address=0;
  try {
    address=allocateMemory(16);
    long accessAddress=aligned ? address : address + 1;
    memoryAccessor.putDouble(accessAddress,11.2);
    assertEquals(11.2,memoryAccessor.getDouble(accessAddress),0.0);
    memoryAccessor.putDoubleVolatile(null,accessAddress,33.4);
    assertEquals(33.4,memoryAccessor.getDoubleVolatile(null,accessAddress),0.0);
    SampleObject obj=new SampleObject();
    memoryAccessor.putDouble(obj,SampleObject.DOUBLE_VALUE_OFFSET,55.6);
    assertEquals(55.6,memoryAccessor.getDouble(obj,SampleObject.DOUBLE_VALUE_OFFSET),0.0);
    memoryAccessor.putDoubleVolatile(obj,SampleObject.DOUBLE_VALUE_OFFSET,77.8);
    assertEquals(77.8,memoryAccessor.getDoubleVolatile(obj,SampleObject.DOUBLE_VALUE_OFFSET),0.0);
  }
  finally {
    if (address != 0) {
      freeMemory(address);
    }
  }
}
