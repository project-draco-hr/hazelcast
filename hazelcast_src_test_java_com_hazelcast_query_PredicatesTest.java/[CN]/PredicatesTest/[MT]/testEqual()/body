{
  TestUtil.Employee value=new TestUtil.Employee("abc-123-xvz",34,true,10D);
  value.setState(TestUtil.State.STATE2);
  TestUtil.Employee nullNameValue=new TestUtil.Employee(null,34,true,10D);
  assertTrue(new SqlPredicate("state == TestUtil.State.STATE2").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("state == " + TestUtil.State.STATE2).apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("state == TestUtil.State.STATE1").apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("state == TestUtil.State.STATE1").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("createDate >= '" + new Date(0) + "'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("sqlDate >= '" + new java.sql.Date(0) + "'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("date >= '" + new Timestamp(0) + "'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("bigDecimal > '" + new BigDecimal("1.23E2") + "'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("bigDecimal >= '" + new BigDecimal("1.23E3") + "'").apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("bigDecimal = '" + new BigDecimal("1.23") + "'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("bigDecimal = '1.23E3'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("bigDecimal = 1.23E3").apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("bigDecimal = 1.23").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("state == NULL").apply(createEntry("1",nullNameValue)));
  assertFalse(new SqlPredicate("name = 'null'").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("name = null").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("name = NULL").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("name != null").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("name != NULL").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("(age >= " + 20 + ") AND (age <= "+ 40+ ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("(age >= " + 20 + ") AND (age <= "+ 34+ ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("(age >= " + 34 + ") AND (age <= "+ 35+ ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("age IN (" + 34 + ", "+ 35+ ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate(" (name LIKE 'abc-%') AND (age <= " + 40 + ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("age = -33").apply(createEntry("1",new QueryTest.Employee("abc-123-xvz",-33,true,10D))));
  assertFalse(new SqlPredicate("age = 33").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("age = 34").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("age > 5").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("salary > 5").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("salary > 5 and salary < 11").apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("salary > 15 or salary < 10").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("salary between 9.99 and 10.01").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("salary between 5 and 15").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("name='abc-123-xvz'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("name='abc 123-xvz'").apply(createEntry("1",new QueryTest.Employee("abc 123-xvz",34,true,10D))));
  assertTrue(new SqlPredicate("name='abc 123-xvz+(123)'").apply(createEntry("1",new QueryTest.Employee("abc 123-xvz+(123)",34,true,10D))));
  assertFalse(new SqlPredicate("name='abc 123-xvz+(123)'").apply(createEntry("1",new QueryTest.Employee("abc123-xvz+(123)",34,true,10D))));
  assertTrue(new SqlPredicate("name LIKE 'abc-%'").apply(createEntry("1",new QueryTest.Employee("abc-123",34,true,10D))));
  assertTrue(Predicates.equal(null,"value").apply(new DummyEntry("value")));
  assertFalse(Predicates.equal(null,"value1").apply(new DummyEntry("value")));
  assertTrue(Predicates.equal(null,TRUE).apply(new DummyEntry(true)));
  assertTrue(Predicates.equal(null,true).apply(new DummyEntry(TRUE)));
  assertFalse(Predicates.equal(null,true).apply(new DummyEntry(FALSE)));
  assertTrue(Predicates.greaterThan(null,new BigDecimal("1.23E2")).apply(new DummyEntry(new BigDecimal("1.23E3"))));
  assertFalse(Predicates.equal(null,new BigDecimal("1.23E3")).apply(new DummyEntry(new BigDecimal("1.23E2"))));
  assertTrue(Predicates.equal(null,new BigDecimal("1.23E3")).apply(new DummyEntry(new BigDecimal("1.23E3"))));
  assertFalse(Predicates.equal(null,15.22).apply(new DummyEntry(15.23)));
  assertTrue(Predicates.equal(null,15.22).apply(new DummyEntry(15.22)));
  assertFalse(Predicates.equal(null,16).apply(new DummyEntry(15)));
  assertTrue(Predicates.greaterThan(null,5).apply(new DummyEntry(6)));
  assertFalse(Predicates.greaterThan(null,5).apply(new DummyEntry(4)));
  assertFalse(Predicates.greaterThan(null,5).apply(new DummyEntry(5)));
  assertTrue(Predicates.greaterThan(null,"aa").apply(new DummyEntry("xa")));
  assertFalse(Predicates.greaterThan(null,"da").apply(new DummyEntry("cz")));
  assertTrue(Predicates.greaterEqual(null,5).apply(new DummyEntry(5)));
  assertTrue(Predicates.lessThan(null,7).apply(new DummyEntry(6)));
  assertFalse(Predicates.lessThan(null,3).apply(new DummyEntry(4)));
  assertFalse(Predicates.lessThan(null,4).apply(new DummyEntry(4)));
  assertTrue(Predicates.lessThan(null,"tc").apply(new DummyEntry("bz")));
  assertFalse(Predicates.lessThan(null,"gx").apply(new DummyEntry("h0")));
  assertTrue(Predicates.lessEqual(null,4).apply(new DummyEntry(4)));
  assertTrue(Predicates.between(null,4,6).apply(new DummyEntry(5)));
  assertTrue(Predicates.between(null,5,6).apply(new DummyEntry(5)));
  assertTrue(Predicates.between(null,"abc","xyz").apply(new DummyEntry("prs")));
  assertFalse(Predicates.between(null,"klmn","xyz").apply(new DummyEntry("efgh")));
  assertFalse(Predicates.between(null,6,7).apply(new DummyEntry(5)));
  assertTrue(Predicates.in(null,4,7,8,5).apply(new DummyEntry(5)));
  assertTrue(Predicates.in(null,5,7,8).apply(new DummyEntry(5)));
  assertFalse(Predicates.in(null,6,7,8).apply(new DummyEntry(5)));
  assertFalse(Predicates.in(null,6,7,8).apply(new DummyEntry(9)));
  assertTrue(Predicates.like(null,"J%").apply(new DummyEntry("Java")));
  assertTrue(Predicates.like(null,"Ja%").apply(new DummyEntry("Java")));
  assertTrue(Predicates.like(null,"J_v_").apply(new DummyEntry("Java")));
  assertTrue(Predicates.like(null,"_av_").apply(new DummyEntry("Java")));
  assertTrue(Predicates.like(null,"_a__").apply(new DummyEntry("Java")));
  assertTrue(Predicates.like(null,"J%v_").apply(new DummyEntry("Java")));
  assertTrue(Predicates.like(null,"J%_").apply(new DummyEntry("Java")));
  assertFalse(Predicates.like(null,"java").apply(new DummyEntry("Java")));
  assertFalse(Predicates.like(null,"j%").apply(new DummyEntry("Java")));
  assertFalse(Predicates.like(null,"J_a").apply(new DummyEntry("Java")));
  assertFalse(Predicates.like(null,"J_ava").apply(new DummyEntry("Java")));
  assertFalse(Predicates.like(null,"J_a_a").apply(new DummyEntry("Java")));
  assertFalse(Predicates.like(null,"J_av__").apply(new DummyEntry("Java")));
  assertFalse(Predicates.like(null,"J_Va").apply(new DummyEntry("Java")));
  assertTrue(Predicates.like(null,"Java World").apply(new DummyEntry("Java World")));
  assertTrue(Predicates.like(null,"Java%ld").apply(new DummyEntry("Java World")));
  assertTrue(Predicates.like(null,"%World").apply(new DummyEntry("Java World")));
  assertTrue(Predicates.like(null,"Java_World").apply(new DummyEntry("Java World")));
  assertFalse(Predicates.like(null,"JavaWorld").apply(new DummyEntry("Java World")));
}
