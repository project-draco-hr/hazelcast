{
  TestUtil.Employee value=new QueryTest.Employee("abc-123-xvz",34,true,10D);
  value.setState(TestUtil.State.STATE2);
  TestUtil.Employee nullNameValue=new QueryTest.Employee(null,34,true,10D);
  assertTrue(new SqlPredicate("state == TestUtil.State.STATE2").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("state == " + TestUtil.State.STATE2).apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("state == TestUtil.State.STATE1").apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("state == TestUtil.State.STATE1").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("state == NULL").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("date >= '" + new Timestamp(0) + "'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("createDate >= '" + new Date(0) + "'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("sqlDate >= '" + new java.sql.Date(0) + "'").apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("name = 'null'").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("name = null").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("name = NULL").apply(createEntry("1",nullNameValue)));
  assertTrue(new SqlPredicate("name != null").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("name != NULL").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("(age >= " + 20 + ") AND (age <= "+ 40+ ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("(age >= " + 20 + ") AND (age <= "+ 34+ ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("(age >= " + 34 + ") AND (age <= "+ 35+ ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("age IN (" + 34 + ", "+ 35+ ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate(" (name LIKE 'abc-%') AND (age <= " + 40 + ")").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("age = -33").apply(createEntry("1",new QueryTest.Employee("abc-123-xvz",-33,true,10D))));
  assertFalse(new SqlPredicate("age = 33").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("age = 34").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("age > 5").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("salary > 5").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("salary > 5 and salary < 11").apply(createEntry("1",value)));
  assertFalse(new SqlPredicate("salary > 15 or salary < 10").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("salary between 9.99 and 10.01").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("salary between 5 and 15").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("name='abc-123-xvz'").apply(createEntry("1",value)));
  assertTrue(new SqlPredicate("name='abc 123-xvz'").apply(createEntry("1",new QueryTest.Employee("abc 123-xvz",34,true,10D))));
  assertTrue(new SqlPredicate("name='abc 123-xvz+(123)'").apply(createEntry("1",new QueryTest.Employee("abc 123-xvz+(123)",34,true,10D))));
  assertFalse(new SqlPredicate("name='abc 123-xvz+(123)'").apply(createEntry("1",new QueryTest.Employee("abc123-xvz+(123)",34,true,10D))));
  assertTrue(new SqlPredicate("name LIKE 'abc-%'").apply(createEntry("1",new QueryTest.Employee("abc-123",34,true,10D))));
  assertTrue(Predicates.equal(new DummyExpression("value"),"value").apply(null));
  assertFalse(Predicates.equal(new DummyExpression("value1"),"value").apply(null));
  assertFalse(Predicates.equal(new DummyExpression("value"),"value1").apply(null));
  assertTrue(Predicates.equal(new DummyExpression(true),Boolean.TRUE).apply(null));
  assertTrue(Predicates.equal(new DummyExpression(Boolean.TRUE),true).apply(null));
  assertFalse(Predicates.equal(new DummyExpression(Boolean.FALSE),true).apply(null));
  assertFalse(Predicates.equal(new DummyExpression(15.23),15.22).apply(null));
  assertFalse(Predicates.equal(new DummyExpression(15.23),15.22).apply(null));
  assertTrue(Predicates.equal(new DummyExpression(15.22),15.22).apply(null));
  assertFalse(Predicates.equal(new DummyExpression(15),16).apply(null));
  assertTrue(Predicates.greaterThan(new DummyExpression(6),5).apply(null));
  assertFalse(Predicates.greaterThan(new DummyExpression(4),5).apply(null));
  assertFalse(Predicates.greaterThan(new DummyExpression(5),5).apply(null));
  assertTrue(Predicates.greaterThan(new DummyExpression("xa"),"aa").apply(null));
  assertFalse(Predicates.greaterThan(new DummyExpression("cz"),"da").apply(null));
  assertTrue(Predicates.greaterEqual(new DummyExpression(5),5).apply(null));
  assertTrue(Predicates.lessThan(new DummyExpression(6),7).apply(null));
  assertFalse(Predicates.lessThan(new DummyExpression(4),3).apply(null));
  assertFalse(Predicates.lessThan(new DummyExpression(4),4).apply(null));
  assertTrue(Predicates.lessThan(new DummyExpression("bz"),"tc").apply(null));
  assertFalse(Predicates.lessThan(new DummyExpression("h0"),"gx").apply(null));
  assertTrue(Predicates.lessEqual(new DummyExpression(4),4).apply(null));
  assertTrue(Predicates.between(new DummyExpression(5),4,6).apply(null));
  assertTrue(Predicates.between(new DummyExpression(5),5,6).apply(null));
  assertTrue(Predicates.between(new DummyExpression("prs"),"abc","xyz").apply(null));
  assertFalse(Predicates.between(new DummyExpression("efgh"),"klmn","xyz").apply(null));
  assertFalse(Predicates.between(new DummyExpression(5),6,7).apply(null));
  assertTrue(Predicates.in(new DummyExpression(5),4,7,8,5).apply(null));
  assertTrue(Predicates.in(new DummyExpression(5),5,7,8).apply(null));
  assertFalse(Predicates.in(new DummyExpression(5),6,7,8).apply(null));
  assertFalse(Predicates.in(new DummyExpression(9),6,7,8).apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java"),"J%").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java"),"Ja%").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java"),"J_v_").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java"),"_av_").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java"),"_a__").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java"),"J%v_").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java"),"J%_").apply(null));
  assertFalse(Predicates.like(new DummyExpression<String>("Java"),"java").apply(null));
  assertFalse(Predicates.like(new DummyExpression<String>("Java"),"j%").apply(null));
  assertFalse(Predicates.like(new DummyExpression<String>("Java"),"J_a").apply(null));
  assertFalse(Predicates.like(new DummyExpression<String>("Java"),"J_ava").apply(null));
  assertFalse(Predicates.like(new DummyExpression<String>("Java"),"J_a_a").apply(null));
  assertFalse(Predicates.like(new DummyExpression<String>("Java"),"J_av__").apply(null));
  assertFalse(Predicates.like(new DummyExpression<String>("Java"),"J_Va").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java World"),"Java World").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java World"),"Java%ld").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java World"),"%World").apply(null));
  assertTrue(Predicates.like(new DummyExpression<String>("Java World"),"Java_World").apply(null));
  assertFalse(Predicates.like(new DummyExpression<String>("Java World"),"JavaWorld").apply(null));
}
