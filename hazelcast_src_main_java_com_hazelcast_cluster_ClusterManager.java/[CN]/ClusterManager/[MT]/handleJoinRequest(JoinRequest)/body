{
  logger.log(Level.FINEST,joinInProgress + " Handling join from " + joinRequest.address+ " timeToStart: "+ (timeToStartJoin - System.currentTimeMillis()));
  if (getMember(joinRequest.address) != null) {
    return;
  }
  Connection conn=joinRequest.getConnection();
  boolean validateJoinRequest;
  try {
    validateJoinRequest=node.validateJoinRequest(joinRequest);
  }
 catch (  Exception e) {
    validateJoinRequest=false;
  }
  if (validateJoinRequest) {
    if (!node.getConfig().getNetworkConfig().getJoin().getMulticastConfig().isEnabled()) {
      if (node.isActive() && node.joined() && node.getMasterAddress() != null && !isMaster()) {
        sendProcessableTo(new Master(node.getMasterAddress()),conn);
      }
    }
    if (isMaster() && node.joined() && node.isActive()) {
      final MemberInfo newMemberInfo=new MemberInfo(joinRequest.address,joinRequest.nodeType);
      if (node.securityContext != null && !setJoins.contains(newMemberInfo)) {
        final Credentials cr=joinRequest.getCredentials();
        if (cr == null) {
          securityLogger.log(Level.SEVERE,"Expecting security credentials " + "but credentials could not be found in JoinRequest!");
          sendAuthFail(conn);
          return;
        }
 else {
          try {
            LoginContext lc=node.securityContext.createMemberLoginContext(cr);
            lc.login();
          }
 catch (          LoginException e) {
            securityLogger.log(Level.SEVERE,"Authentication has failed for " + cr.getPrincipal() + '@'+ cr.getEndpoint()+ " => ("+ e.getMessage()+ ")");
            securityLogger.log(Level.FINEST,e.getMessage(),e);
            sendAuthFail(conn);
            return;
          }
        }
      }
      if (joinRequest.to != null && !joinRequest.to.equals(thisAddress)) {
        sendProcessableTo(new Master(node.getMasterAddress()),conn);
        return;
      }
      long now=System.currentTimeMillis();
      if (!joinInProgress) {
        if (firstJoinRequest != 0 && now - firstJoinRequest >= MAX_WAIT_SECONDS_BEFORE_JOIN * 1000) {
          startJoin();
        }
 else {
          if (setJoins.add(newMemberInfo)) {
            sendProcessableTo(new Master(node.getMasterAddress()),conn);
            if (firstJoinRequest == 0) {
              firstJoinRequest=now;
            }
            if (now - firstJoinRequest < MAX_WAIT_SECONDS_BEFORE_JOIN * 1000) {
              timeToStartJoin=now + WAIT_MILLIS_BEFORE_JOIN;
            }
          }
          if (now > timeToStartJoin) {
            startJoin();
          }
        }
      }
    }
  }
 else {
    conn.close();
  }
}
