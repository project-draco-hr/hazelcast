{
  if (!node.joined() || !node.isActive())   return;
  long now=System.currentTimeMillis();
  if (isMaster()) {
    List<Address> lsDeadAddresses=null;
    for (    MemberImpl memberImpl : lsMembers) {
      final Address address=memberImpl.getAddress();
      if (!thisAddress.equals(address)) {
        try {
          Connection conn=node.connectionManager.getConnection(address);
          if (conn != null && conn.live()) {
            if ((now - memberImpl.getLastRead()) >= (MAX_NO_HEARTBEAT_MILLIS)) {
              conn=null;
              if (lsDeadAddresses == null) {
                lsDeadAddresses=new ArrayList<Address>();
              }
              logger.log(Level.WARNING,"Added " + address + " to list of dead addresses because of timeout since last read");
              lsDeadAddresses.add(address);
            }
            if ((now - memberImpl.getLastWrite()) > 500) {
              Packet packet=obtainPacket("heartbeat",null,null,ClusterOperation.HEARTBEAT,0);
              sendOrReleasePacket(packet,conn);
            }
          }
 else           if (conn == null && (now - memberImpl.getLastRead()) > 5000) {
            logMissingConnection(address);
            memberImpl.didRead();
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          logger.log(Level.SEVERE,e.getMessage(),e);
        }
      }
    }
    if (lsDeadAddresses != null) {
      for (      Address address : lsDeadAddresses) {
        logger.log(Level.FINEST,"NO HEARTBEAT should remove " + address);
        doRemoveAddress(address);
        sendRemoveMemberToOthers(address);
      }
    }
  }
 else {
    if (getMasterAddress() != null) {
      MemberImpl masterMember=getMember(getMasterAddress());
      boolean removed=false;
      if (masterMember != null) {
        if ((now - masterMember.getLastRead()) >= (MAX_NO_HEARTBEAT_MILLIS)) {
          logger.log(Level.FINEST,"Master node has timed out it's heartbeat and will be removed");
          doRemoveAddress(getMasterAddress());
          removed=true;
        }
      }
      if (!removed) {
        Packet packet=obtainPacket("heartbeat",null,null,ClusterOperation.HEARTBEAT,0);
        Connection connMaster=node.connectionManager.getOrConnect(getMasterAddress());
        sendOrReleasePacket(packet,connMaster);
      }
    }
    for (    MemberImpl member : lsMembers) {
      if (!member.localMember()) {
        Address address=member.getAddress();
        if (shouldConnectTo(address)) {
          Connection conn=node.connectionManager.getOrConnect(address);
          if (conn != null) {
            Packet packet=obtainPacket("heartbeat",null,null,ClusterOperation.HEARTBEAT,0);
            sendOrReleasePacket(packet,conn);
          }
 else {
            logger.log(Level.FINEST,"could not connect to " + address + " to send heartbeat");
          }
        }
 else {
          Connection conn=node.connectionManager.getConnection(address);
          if (conn != null && conn.live()) {
            if ((now - member.getLastWrite()) > 500) {
              Packet packet=obtainPacket("heartbeat",null,null,ClusterOperation.HEARTBEAT,0);
              sendOrReleasePacket(packet,conn);
            }
          }
 else {
            logger.log(Level.FINEST,"not sending heartbeat because connection is null or not live " + address);
            if (conn == null && (now - member.getLastRead()) > 5000) {
              logMissingConnection(address);
              member.didRead();
            }
          }
        }
      }
    }
  }
}
