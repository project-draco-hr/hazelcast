{
  logger.log(Level.FINEST,"Removing Address " + deadAddress);
  if (!node.joined()) {
    node.failedConnection(deadAddress);
    return;
  }
  if (deadAddress.equals(thisAddress))   return;
  if (deadAddress.equals(getMasterAddress())) {
    if (node.joined()) {
      MemberImpl newMaster=getNextMemberAfter(deadAddress,false,1);
      if (newMaster != null)       node.setMasterAddress(newMaster.getAddress());
 else       node.setMasterAddress(null);
    }
 else {
      node.setMasterAddress(null);
    }
    logger.log(Level.FINEST,"Now Master " + node.getMasterAddress());
  }
  if (isMaster()) {
    setJoins.remove(new MemberInfo(deadAddress));
  }
  Connection conn=node.connectionManager.getConnection(deadAddress);
  if (conn != null) {
    node.connectionManager.remove(conn);
  }
  MemberImpl deadMember=getMember(deadAddress);
  if (deadMember != null) {
    lsMembersBefore.clear();
    for (    MemberImpl memberBefore : lsMembers) {
      lsMembersBefore.add(memberBefore);
    }
    removeMember(deadAddress);
    node.blockingQueueManager.syncForDead(deadAddress);
    node.concurrentMapManager.syncForDead(deadMember);
    node.listenerManager.syncForDead(deadAddress);
    node.topicManager.syncForDead(deadAddress);
    node.getClusterImpl().setMembers(lsMembers);
    Object[] calls=mapCalls.values().toArray();
    for (    Object call : calls) {
      ((Call)call).onDisconnect(deadAddress);
    }
    logger.log(Level.INFO,this.toString());
  }
}
