{
  joinInProgress=true;
  final MembersUpdateCall membersUpdate=new MembersUpdateCall(lsMembers);
  if (setJoins != null && setJoins.size() > 0) {
    for (    MemberInfo memberJoined : setJoins) {
      membersUpdate.addMemberInfo(memberJoined);
    }
  }
  executeLocally(new Runnable(){
    public void run(){
      Collection<MemberInfo> lsMemberInfos=membersUpdate.getMemberInfos();
      List<Address> newMemberList=new ArrayList<Address>(lsMemberInfos.size());
      for (      final MemberInfo memberInfo : lsMemberInfos) {
        newMemberList.add(memberInfo.address);
      }
      List<AsyncRemotelyBooleanCallable> calls=new ArrayList<AsyncRemotelyBooleanCallable>(lsMemberInfos.size());
      for (      final Address target : newMemberList) {
        AsyncRemotelyBooleanCallable rrp=new AsyncRemotelyBooleanCallable();
        rrp.executeProcess(target,membersUpdate);
        calls.add(rrp);
      }
      for (      AsyncRemotelyBooleanCallable call : calls) {
        if (call.getResultAsBoolean() == Boolean.FALSE) {
          newMemberList.remove(call.getTarget());
        }
      }
      calls.clear();
      for (      final Address target : newMemberList) {
        AsyncRemotelyBooleanCallable call=new AsyncRemotelyBooleanCallable();
        call.executeProcess(target,new SyncProcess());
        calls.add(call);
      }
      for (      AsyncRemotelyBooleanCallable call : calls) {
        if (call.getResultAsBoolean() == Boolean.FALSE) {
          newMemberList.remove(call.getTarget());
        }
      }
      calls.clear();
      AbstractRemotelyCallable<Boolean> connCheckCallable=new ConnectionCheckCall();
      for (      final Address target : newMemberList) {
        AsyncRemotelyBooleanCallable call=new AsyncRemotelyBooleanCallable();
        call.executeProcess(target,connCheckCallable);
        calls.add(call);
      }
      for (      AsyncRemotelyBooleanCallable call : calls) {
        if (call.getResultAsBoolean() == Boolean.FALSE) {
          newMemberList.remove(call.getTarget());
        }
      }
    }
  }
);
}
