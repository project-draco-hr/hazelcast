{
  config.setProperty(GroupProperties.PROP_PARTITION_COUNT,String.valueOf(partitionCount));
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(nodeCount);
  final BlockingQueue<Integer> counts=new ArrayBlockingQueue<Integer>(nodeCount);
  final HazelcastInstance[] instances=new HazelcastInstance[nodeCount];
  for (int i=0; i < nodeCount; i++) {
    instances[i]=factory.newHazelcastInstance(config);
  }
  ExecutorService ex=Executors.newCachedThreadPool();
  try {
    for (int i=0; i < nodeCount; i++) {
      final int instanceIndex=i;
      new Thread(new Runnable(){
        public void run(){
          HazelcastInstance instance=instances[instanceIndex];
          warmUpPartitions(instance);
          counts.offer(getLocalPartitionsCount(instance));
        }
      }
).start();
    }
    ILogger logger=instances[0].getLoggingService().getLogger(getClass());
    String firstFailureMessage=null;
    int average=(partitionCount / nodeCount);
    logger.info(format("Partition count: %d, nodes: %d, average: %d",partitionCount,nodeCount,average));
    int totalPartitions=0;
    for (int i=0; i < nodeCount; i++) {
      Integer localPartitionCount=counts.poll(1,TimeUnit.MINUTES);
      assertNotNull(localPartitionCount);
      String msg=format("Node: %d, local partition count: %d",i + 1,localPartitionCount);
      if (firstFailureMessage == null && localPartitionCount < average) {
        firstFailureMessage=msg;
      }
      logger.info(msg);
      totalPartitions+=localPartitionCount;
    }
    assertEqualsStringFormat("Expected sum of local partitions to be %d, but was %d",partitionCount,totalPartitions);
    if (firstFailureMessage != null) {
      fail(format("%s, partition count: %d, nodes: %d, average: %d",firstFailureMessage,partitionCount,nodeCount,average));
    }
  }
  finally {
    ex.shutdownNow();
  }
}
