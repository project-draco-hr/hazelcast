{
  final Config config=new Config();
  config.setProperty(GroupProperties.PROP_PARTITION_COUNT,String.valueOf(partitionCount));
  StaticNodeFactory factory=new StaticNodeFactory(nodeCount);
  final BlockingQueue<Integer> counts=new ArrayBlockingQueue<Integer>(nodeCount);
  final HazelcastInstance[] instances=new HazelcastInstance[nodeCount];
  for (int i=0; i < nodeCount; i++) {
    instances[i]=factory.newHazelcastInstance(config);
  }
  for (int j=0; j < nodeCount; j++) {
    final int instanceIndex=j;
    new Thread(new Runnable(){
      public void run(){
        final HazelcastInstance h=instances[instanceIndex];
        h.getMap("test").size();
        counts.offer(getLocalPartitionsCount(h));
      }
    }
).start();
  }
  final int average=(partitionCount / nodeCount);
  int total=0;
  for (int i=0; i < nodeCount; i++) {
    final int c=counts.take();
    assertTrue("Partition count of node[" + i + "] is : "+ c+ ", total partitions: "+ partitionCount+ ", nodes: "+ nodeCount,c >= average);
    total+=c;
  }
  assertEquals(partitionCount,total);
}
