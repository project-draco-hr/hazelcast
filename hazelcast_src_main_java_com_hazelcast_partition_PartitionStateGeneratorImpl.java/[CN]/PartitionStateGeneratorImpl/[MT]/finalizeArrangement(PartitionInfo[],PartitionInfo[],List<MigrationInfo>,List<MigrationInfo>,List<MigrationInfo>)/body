{
  final int partitionCount=currentState.length;
  final List<MigrationInfo> partitionMigrationTasks=new LinkedList<MigrationInfo>();
  for (int partitionId=0; partitionId < partitionCount; partitionId++) {
    PartitionInfo currentPartition=currentState[partitionId];
    PartitionInfo newPartition=newState[partitionId];
    for (int replicaIndex=0; replicaIndex < PartitionInfo.MAX_REPLICA_COUNT; replicaIndex++) {
      Address currentOwner=currentPartition.getReplicaAddress(replicaIndex);
      Address newOwner=newPartition.getReplicaAddress(replicaIndex);
      MigrationInfo op=null;
      if (currentOwner != null && newOwner != null && !currentOwner.equals(newOwner)) {
        op=new MigrationInfo(partitionId,replicaIndex,MigrationType.MOVE,currentOwner,newOwner);
      }
 else       if (currentOwner == null && newOwner != null) {
        currentOwner=currentPartition.getOwner();
        boolean copyBack=false;
        ListIterator<MigrationInfo> iter=partitionMigrationTasks.listIterator(partitionMigrationTasks.size());
        while (iter.hasPrevious()) {
          MigrationInfo task=iter.previous();
          if (task.getMigrationType() == MigrationType.MOVE && newOwner.equals(task.getFromAddress())) {
            copyBack=true;
            task.setCopyBackReplicaIndex(replicaIndex);
            task.setMigrationType(MigrationType.MOVE_COPY_BACK);
            break;
          }
        }
        if (!copyBack) {
          op=new MigrationInfo(partitionId,replicaIndex,MigrationType.COPY,currentOwner,newOwner);
        }
      }
 else       if (currentOwner != null && newOwner == null) {
        immediateMigrations.add(new MigrationInfo(partitionId,replicaIndex,MigrationType.COPY,currentOwner,null));
      }
      if (op != null) {
        partitionMigrationTasks.add(op);
        if (replicaIndex == 0 && currentOwner == null) {
          lostPartitionMigrations.add(op);
        }
 else         if (replicaIndex == 0 && currentOwner != null && currentOwner.equals(newPartition.getReplicaAddress(1))) {
          immediateMigrations.add(op);
        }
 else         if (replicaIndex == 1 && currentPartition.getReplicaAddress(1) == null) {
          immediateMigrations.add(op);
        }
 else {
          scheduledMigrations.add(op);
        }
      }
    }
    partitionMigrationTasks.clear();
  }
  arrangeScheduledTasks(scheduledMigrations);
}
