{
  final NodeEngineImpl nodeEngine=(NodeEngineImpl)getNodeEngine();
  final PartitionServiceImpl partitionService=(PartitionServiceImpl)nodeEngine.getPartitionService();
  final SerializationService serializationService=nodeEngine.getSerializationService();
  final int partitionId=getPartitionId();
  final int replicaIndex=getReplicaIndex();
  BufferObjectDataInput in=null;
  try {
    if (data != null) {
      final ILogger logger=nodeEngine.getLogger(getClass());
      if (logger.isLoggable(Level.FINEST)) {
        logger.log(Level.FINEST,"Applying replica sync for partition: " + partitionId + ", replica: "+ replicaIndex);
      }
      final byte[] taskData=IOUtil.decompress(data);
      in=serializationService.createObjectDataInput(taskData);
      int size=in.readInt();
      for (int i=0; i < size; i++) {
        Operation op=(Operation)serializationService.readObject(in);
        try {
          op.setNodeEngine(nodeEngine).setPartitionId(partitionId).setReplicaIndex(replicaIndex);
          op.setResponseHandler(new ErrorLoggingResponseHandler(nodeEngine.getLogger(op.getClass())));
          op.beforeRun();
          op.run();
          op.afterRun();
        }
 catch (        Throwable e) {
          final Level level=nodeEngine.isActive() ? Level.WARNING : Level.FINEST;
          logger.log(level,"While executing " + op,e);
        }
      }
    }
  }
  finally {
    IOUtil.closeResource(in);
    partitionService.finalizeReplicaSync(partitionId,replicaVersions);
  }
}
