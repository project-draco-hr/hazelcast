{
  PartitionProxy partition=mapPartitions.get(partitionId);
  if (partition != null)   return partition;
  final BlockingQueue<PartitionReal> responseQ=ResponseQueueFactory.newResponseQueue();
  concurrentMapManager.enqueueAndReturn(new Processable(){
    public void process(){
      Block block=concurrentMapManager.getOrCreateBlock(partitionId);
      MemberImpl memberOwner=(block.getOwner() == null) ? null : concurrentMapManager.getMember(block.getOwner());
      responseQ.offer(new PartitionReal(block.getBlockId(),memberOwner,null));
    }
  }
);
  try {
    PartitionReal partitionReal=responseQ.take();
    mapRealPartitions.putIfAbsent(partitionId,partitionReal);
    mapPartitions.putIfAbsent(partitionReal.getPartitionId(),new PartitionProxy(partitionId));
  }
 catch (  InterruptedException ignored) {
  }
  return mapPartitions.get(partitionId);
}
