{
  PartitionReal partitionReal=mapRealPartitions.get(partitionId);
  if (partitionReal == null) {
    final BlockingQueue<PartitionReal> responseQ=ResponseQueueFactory.newResponseQueue();
    concurrentMapManager.enqueueAndReturn(new Processable(){
      public void process(){
        Block block=concurrentMapManager.partitionManager.getOrCreateBlock(partitionId);
        MemberImpl memberOwner=null;
        MemberImpl memberMigration=null;
        if (block.getOwner() != null) {
          if (concurrentMapManager.thisAddress.equals(block.getOwner())) {
            memberOwner=concurrentMapManager.thisMember;
          }
 else {
            memberOwner=concurrentMapManager.getMember(block.getOwner());
          }
        }
        if (block.getMigrationAddress() != null) {
          if (concurrentMapManager.thisAddress.equals(block.getMigrationAddress())) {
            memberMigration=concurrentMapManager.thisMember;
          }
 else {
            memberMigration=concurrentMapManager.getMember(block.getMigrationAddress());
          }
        }
        responseQ.offer(new PartitionReal(partitionId,memberOwner,memberMigration));
      }
    }
);
    try {
      while (partitionReal == null) {
        partitionReal=responseQ.poll(5,TimeUnit.SECONDS);
        if (partitionVersion == null) {
          concurrentMapManager.node.checkNodeState();
        }
      }
      mapRealPartitions.put(partitionId,partitionReal);
      return partitionReal;
    }
 catch (    InterruptedException ignored) {
    }
  }
  return partitionReal;
}
