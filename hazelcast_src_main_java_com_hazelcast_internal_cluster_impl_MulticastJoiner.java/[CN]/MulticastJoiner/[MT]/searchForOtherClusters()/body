{
  final BlockingQueue<JoinMessage> q=new LinkedBlockingQueue<JoinMessage>();
  MulticastListener listener=new MulticastListener(){
    public void onMessage(    Object msg){
      if (msg != null && msg instanceof JoinMessage) {
        JoinMessage joinRequest=(JoinMessage)msg;
        if (node.getThisAddress() != null && !node.getThisAddress().equals(joinRequest.getAddress())) {
          q.add(joinRequest);
        }
      }
    }
  }
;
  node.multicastService.addMulticastListener(listener);
  node.multicastService.send(node.createJoinRequest(false));
  try {
    JoinMessage joinInfo=q.poll(3,TimeUnit.SECONDS);
    if (joinInfo != null) {
      if (node.clusterService.getMember(joinInfo.getAddress()) != null) {
        if (logger.isFinestEnabled()) {
          logger.finest("Ignoring merge join response, since " + joinInfo.getAddress() + " is already a member.");
        }
        return;
      }
      if (joinInfo.getMemberCount() == 1) {
        Thread.sleep(2 * node.getProperties().getMillis(GroupProperty.WAIT_SECONDS_BEFORE_JOIN));
      }
      JoinMessage response=sendSplitBrainJoinMessage(joinInfo.getAddress());
      if (shouldMerge(response)) {
        logger.warning(node.getThisAddress() + " is merging [multicast] to " + joinInfo.getAddress());
        startClusterMerge(joinInfo.getAddress());
      }
    }
  }
 catch (  InterruptedException ignored) {
    EmptyStatement.ignore(ignored);
  }
catch (  Exception e) {
    if (logger != null) {
      logger.warning(e);
    }
  }
 finally {
    node.multicastService.removeMulticastListener(listener);
  }
}
