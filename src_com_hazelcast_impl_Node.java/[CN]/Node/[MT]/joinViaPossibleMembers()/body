{
  final Config config=Config.get();
  try {
    final List<Address> lsPossibleAddresses=getPossibleMembers(config.join.joinMembers.lsMembers);
    lsPossibleAddresses.remove(address);
    for (    final Address adrs : lsPossibleAddresses) {
      if (DEBUG)       logger.log(Level.FINEST,"connecting to " + adrs);
      ConnectionManager.get().getOrConnect(adrs);
    }
    boolean found=false;
    int numberOfSeconds=0;
    connectionTimeout:     while (!found && numberOfSeconds < config.join.joinMembers.connectionTimeoutSeconds) {
      Address addressFailed=null;
      while ((addressFailed=qFailedConnections.poll()) != null) {
        lsPossibleAddresses.remove(addressFailed);
      }
      if (lsPossibleAddresses.size() == 0)       break connectionTimeout;
      Thread.sleep(1000);
      numberOfSeconds++;
      int numberOfJoinReq=0;
      for (      final Address adrs : lsPossibleAddresses) {
        final Connection conn=ConnectionManager.get().getOrConnect(adrs);
        if (DEBUG)         logger.log(Level.FINEST,"conn " + conn);
        if (conn != null && numberOfJoinReq < 5) {
          found=true;
          ClusterManager.get().sendJoinRequest(adrs);
          numberOfJoinReq++;
        }
      }
    }
    if (DEBUG)     logger.log(Level.FINEST,"FOUND " + found);
    if (!found) {
      setAsMaster();
    }
 else {
      while (!joined) {
        int numberOfJoinReq=0;
        for (        final Address adrs : lsPossibleAddresses) {
          final Connection conn=ConnectionManager.get().getOrConnect(adrs);
          if (conn != null && numberOfJoinReq < 5) {
            found=true;
            ClusterManager.get().sendJoinRequest(adrs);
            numberOfJoinReq++;
          }
        }
        Thread.sleep(2000);
        if (DEBUG) {
          logger.log(Level.FINEST,masterAddress.toString());
        }
        if (masterAddress == null) {
          boolean masterCandidate=true;
          for (          final Address address : lsPossibleAddresses) {
            if (this.address.hashCode() > address.hashCode())             masterCandidate=false;
          }
          if (masterCandidate) {
            setAsMaster();
          }
        }
      }
    }
    lsPossibleAddresses.clear();
    qFailedConnections.clear();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  if (DEBUG)   logger.log(Level.FINEST,"DONE TCP");
  final StringBuilder sb=new StringBuilder();
  sb.append("\n");
  if (ClusterManager.get().lsMembers.size() == 1)   sb.append(ClusterManager.get());
  logger.log(Level.FINEST,sb.toString());
}
