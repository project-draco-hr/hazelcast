{
  try {
    final String preferIPv4Stack=System.getProperty("java.net.preferIPv4Stack");
    final String preferIPv6Address=System.getProperty("java.net.preferIPv6Addresses");
    if (preferIPv6Address == null && preferIPv4Stack == null) {
      System.setProperty("java.net.preferIPv4Stack","true");
    }
    final Config config=Config.get();
    final ServerSocketChannel serverSocketChannel=ServerSocketChannel.open();
    address=AddressPicker.pickAddress(serverSocketChannel);
    address.setThisAddress(true);
    localMember=new MemberImpl(address,true,localNodeType);
    ClusterService.get().start();
    ClusterManager.get();
    ConcurrentMapManager.get();
    BlockingQueueManager.get();
    ExecutorManager.get().start();
    ListenerManager.get();
    TopicManager.get();
    ClusterManager.get().addMember(localMember);
    InSelector.get().start();
    OutSelector.get().start();
    InSelector.get().setServerSocketChannel(serverSocketChannel);
    if (address == null)     return false;
    Logger systemLogger=Logger.getLogger("com.hazelcast.system");
    systemLogger.log(Level.INFO,"Hazelcast " + Build.version + " ("+ Build.build+ ") starting at "+ address);
    systemLogger.log(Level.INFO,"Copyright (C) 2009 Hazelcast.com");
    if (config.join.multicastConfig.enabled) {
      final MulticastSocket multicastSocket=new MulticastSocket(null);
      multicastSocket.setReuseAddress(true);
      multicastSocket.bind(new InetSocketAddress(config.join.multicastConfig.multicastPort));
      multicastSocket.setTimeToLive(32);
      multicastSocket.setInterface(address.getInetAddress());
      multicastSocket.setReceiveBufferSize(1 * 1024);
      multicastSocket.setSendBufferSize(1 * 1024);
      multicastSocket.joinGroup(InetAddress.getByName(config.join.multicastConfig.multicastGroup));
      multicastSocket.setSoTimeout(1000);
      MulticastService.get().init(multicastSocket);
    }
  }
 catch (  final Exception e) {
    dumpCore(e);
    e.printStackTrace();
    return false;
  }
  return true;
}
