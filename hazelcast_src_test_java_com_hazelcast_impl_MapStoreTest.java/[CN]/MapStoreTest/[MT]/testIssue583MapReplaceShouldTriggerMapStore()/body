{
class SimpleMapStore<K,V> implements MapStore<K,V> {
    SimpleMapStore(    ConcurrentMap<K,V> store){
      this.store=store;
    }
    public V load(    K key){
      V value=store.get(key);
      return value;
    }
    public Map<K,V> loadAll(    Collection<K> keys){
      Map<K,V> result=new HashMap<K,V>();
      for (      K key : keys) {
        V value=store.get(key);
        if (value != null) {
          result.put(key,value);
        }
      }
      return result;
    }
    public Set<K> loadAllKeys(){
      return store.keySet();
    }
    public void store(    K key,    V value){
      store.put(key,value);
    }
    public void delete(    K key){
      store.remove(key);
    }
    public void storeAll(    Map<K,V> map){
      store.putAll(map);
    }
    public void deleteAll(    Collection<K> keys){
      for (      K key : keys) {
        store.remove(key);
      }
    }
    private final ConcurrentMap<K,V> store;
  }
  final ConcurrentMap<String,Long> store=new ConcurrentHashMap<String,Long>();
  final MapStore<String,Long> myMapStore=new SimpleMapStore<String,Long>(store);
  Config config=new Config();
  config.getMapConfig("myMap").setMapStoreConfig(new MapStoreConfig().setImplementation(myMapStore));
  HazelcastInstance hc=Hazelcast.newHazelcastInstance(config);
  IMap<String,Long> myMap=hc.getMap("myMap");
  myMap.put("one",1L);
  assertEquals(1L,myMap.get("one").longValue());
  assertEquals(1L,store.get("one").longValue());
  myMap.putIfAbsent("two",2L);
  assertEquals(2L,myMap.get("two").longValue());
  assertEquals(2L,store.get("two").longValue());
  myMap.putIfAbsent("one",5L);
  assertEquals(1L,myMap.get("one").longValue());
  assertEquals(1L,store.get("one").longValue());
  myMap.replace("one",1L,111L);
  assertEquals(111L,myMap.get("one").longValue());
  assertEquals(111L,store.get("one").longValue());
  myMap.replace("one",1L);
  assertEquals(1L,myMap.get("one").longValue());
  assertEquals(1L,store.get("one").longValue());
}
