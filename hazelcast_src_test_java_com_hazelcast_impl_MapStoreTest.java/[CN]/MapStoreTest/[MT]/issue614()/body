{
  final ConcurrentMap<Long,String> STORE=new ConcurrentHashMap<Long,String>();
  STORE.put(1l,"Event1");
  STORE.put(2l,"Event2");
  STORE.put(3l,"Event3");
  STORE.put(4l,"Event4");
  STORE.put(5l,"Event5");
  STORE.put(6l,"Event6");
  Config config=new Config();
  config.getMapConfig("map").setMapStoreConfig(new MapStoreConfig().setWriteDelaySeconds(1).setImplementation(new MapStore<Long,String>(){
    public String load(    Long key){
      String value=STORE.get(key);
      return value;
    }
    public Map<Long,String> loadAll(    Collection<Long> keys){
      Map<Long,String> result=new HashMap<Long,String>();
      for (      Long key : keys) {
        String value=load(key);
        if (value != null) {
          result.put(key,value);
        }
      }
      return result;
    }
    public Set<Long> loadAllKeys(){
      return STORE.keySet();
    }
    public void store(    Long key,    String value){
      STORE.put(key,value);
    }
    public void storeAll(    Map<Long,String> map){
      for (      Map.Entry<Long,String> entry : map.entrySet()) {
        store(entry.getKey(),entry.getValue());
      }
    }
    public void delete(    Long key){
      STORE.remove(key);
    }
    public void deleteAll(    Collection<Long> keys){
      for (      Long key : STORE.keySet()) {
        delete(key);
      }
    }
  }
));
  HazelcastInstance h=Hazelcast.newHazelcastInstance(config);
  IMap map=h.getMap("map");
  Collection collection=map.values();
  for (  Object o : collection) {
  }
  LocalMapStats localMapStats=map.getLocalMapStats();
  assertEquals(0,localMapStats.getDirtyEntryCount());
}
