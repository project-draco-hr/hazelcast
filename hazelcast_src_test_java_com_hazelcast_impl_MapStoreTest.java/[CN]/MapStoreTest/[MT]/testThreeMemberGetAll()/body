{
  TestEventBasedMapStore testMapStore=new TestEventBasedMapStore();
  testMapStore.setLoadAllKeys(false);
  Map store=testMapStore.getStore();
  Set keys=new HashSet();
  int size=1000;
  for (int i=0; i < size; i++) {
    store.put(i,"value" + i);
    keys.add(i);
  }
  Config config=newConfig(testMapStore,2);
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  IMap map1=h1.getMap("default");
  IMap map2=h2.getMap("default");
  assertEquals(TestEventBasedMapStore.STORE_EVENTS.LOAD_ALL_KEYS,testMapStore.waitForEvent(5));
  assertEquals(TestEventBasedMapStore.STORE_EVENTS.LOAD_ALL_KEYS,testMapStore.waitForEvent(5));
  final CountDownLatch l=new CountDownLatch(1);
  map1.addEntryListener(new EntryAdapter(){
    public void entryAdded(    EntryEvent entryEvent){
      assertEquals("value1",entryEvent.getValue());
      l.countDown();
    }
  }
,1,true);
  assertEquals("value1",map1.get(1));
  assertEquals(TestEventBasedMapStore.STORE_EVENTS.LOAD,testMapStore.waitForEvent(5));
  assertTrue(l.await(10,TimeUnit.SECONDS));
  assertEquals("value1",map1.get(1));
  assertEquals(null,testMapStore.waitForEvent(3));
  Map loaded=map1.getAll(keys);
  assertEquals(size,loaded.size());
  assertEquals(TestEventBasedMapStore.STORE_EVENTS.LOAD_ALL,testMapStore.waitForEvent(5));
  assertEquals(TestEventBasedMapStore.STORE_EVENTS.LOAD_ALL,testMapStore.waitForEvent(5));
  loaded=map2.getAll(keys);
  assertEquals(size,loaded.size());
  assertEquals(null,testMapStore.waitForEvent(5));
  for (int i=0; i < size; i++) {
    map1.evict(i);
  }
  assertEquals(0,map1.size());
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(config);
  Set<Member> owners=new HashSet<Member>();
  for (  Object key : loaded.keySet()) {
    owners.add(h1.getPartitionService().getPartition(key).getOwner());
  }
  loaded=map1.getAll(keys);
  assertEquals(size,loaded.size());
  for (  Member owner : owners) {
    assertEquals(TestEventBasedMapStore.STORE_EVENTS.LOAD_ALL,testMapStore.waitForEvent(5));
  }
  assertEquals(0,testMapStore.getEventCount());
  loaded=map2.getAll(keys);
  assertEquals(size,loaded.size());
  assertEquals(null,testMapStore.waitForEvent(5));
}
