{
  Future<Collection<ClientEventRegistration>> future=registrationExecutor.submit(new Callable<Collection<ClientEventRegistration>>(){
    @Override public Collection<ClientEventRegistration> call(){
      ClientRegistrationKey key=new ClientRegistrationKey(uuid);
      Map<Address,ClientEventRegistration> registrationMap=registrations.get(key);
      if (registrationMap == null) {
        return Collections.EMPTY_LIST;
      }
      LinkedList<ClientEventRegistration> activeRegistrations=new LinkedList<ClientEventRegistration>();
      for (      ClientEventRegistration registration : registrationMap.values()) {
        for (        Member member : members) {
          if (member.getAddress().equals(registration.getSubscriber())) {
            activeRegistrations.add(registration);
          }
        }
      }
      return activeRegistrations;
    }
  }
);
  try {
    return future.get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}
