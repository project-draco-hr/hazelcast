{
  check(key);
  Data dKey=proxyHelper.toData(key);
  Protocol protocol=proxyHelper.doCommand(dKey,Command.MGETENTRY,new String[]{getName()},dKey);
  if (!protocol.hasBuffer()) {
    return null;
  }
  final long cost=Long.valueOf(protocol.args[0]);
  final long creationTime=Long.valueOf(protocol.args[1]);
  final long expTime=Long.valueOf(protocol.args[2]);
  final int hits=Integer.valueOf(protocol.args[3]);
  final long lastAccessTime=Long.valueOf(protocol.args[4]);
  final long lastStoredTime=Long.valueOf(protocol.args[5]);
  final long lastUpdateTime=Long.valueOf(protocol.args[6]);
  final long version=Long.valueOf(protocol.args[7]);
  final boolean valid=Boolean.valueOf(protocol.args[7]);
  final V v=(V)proxyHelper.toObject(protocol.buffers[0]);
  return new MapEntry<K,V>(){
    public long getCost(){
      return cost;
    }
    public long getCreationTime(){
      return creationTime;
    }
    public long getExpirationTime(){
      return expTime;
    }
    public int getHits(){
      return hits;
    }
    public long getLastAccessTime(){
      return lastAccessTime;
    }
    public long getLastStoredTime(){
      return lastStoredTime;
    }
    public long getLastUpdateTime(){
      return lastUpdateTime;
    }
    public long getVersion(){
      return version;
    }
    public boolean isValid(){
      return valid;
    }
    public K getKey(){
      return key;
    }
    public V getValue(){
      return v;
    }
    public V setValue(    V value){
      return MapClientProxy.this.put(key,value);
    }
  }
;
}
