{
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  HazelcastInstanceProxy proxy;
  try {
    if (classLoader == null) {
      Thread.currentThread().setContextClassLoader(HazelcastInstanceFactory.class.getClassLoader());
    }
    HazelcastInstanceImpl hazelcastInstance=(HazelcastInstanceImpl)INSTANCE_FACTORY.newHazelcastInstance(config,instanceName,nodeContext);
    OutOfMemoryErrorDispatcher.registerServer(hazelcastInstance);
    proxy=newHazelcastProxy(hazelcastInstance);
    Node node=hazelcastInstance.node;
    boolean firstMember=isFirstMember(node);
    long initialWaitSeconds=node.groupProperties.getSeconds(GroupProperty.INITIAL_WAIT_SECONDS);
    if (initialWaitSeconds > 0) {
      hazelcastInstance.logger.info(format("Waiting %d ms before completing HazelcastInstance startup...",initialWaitSeconds));
      try {
        SECONDS.sleep(initialWaitSeconds);
        if (firstMember) {
          node.partitionService.firstArrangement();
        }
 else {
          SECONDS.sleep(ADDITIONAL_SLEEP_SECONDS_FOR_NON_FIRST_MEMBERS);
        }
      }
 catch (      InterruptedException ignored) {
        EmptyStatement.ignore(ignored);
      }
    }
    awaitMinimalClusterSize(hazelcastInstance,node,firstMember);
    future.set(proxy);
    hazelcastInstance.lifecycleService.fireLifecycleEvent(STARTED);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
 finally {
    Thread.currentThread().setContextClassLoader(classLoader);
  }
  return proxy;
}
