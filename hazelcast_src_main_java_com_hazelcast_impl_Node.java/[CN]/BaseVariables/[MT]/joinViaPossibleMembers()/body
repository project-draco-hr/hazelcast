{
  try {
    failedConnections.clear();
    final List<Address> lsPossibleAddresses=getPossibleMembers();
    lsPossibleAddresses.remove(address);
    for (    final Address adrs : lsPossibleAddresses) {
      logger.log(Level.FINEST,"connecting to " + adrs);
      connectionManager.getOrConnect(adrs);
    }
    boolean found=false;
    int numberOfSeconds=0;
    while (!found && numberOfSeconds < config.getNetworkConfig().getJoin().getJoinMembers().getConnectionTimeoutSeconds()) {
      lsPossibleAddresses.removeAll(failedConnections);
      if (lsPossibleAddresses.size() == 0)       break;
      Thread.sleep(1000);
      numberOfSeconds++;
      int numberOfJoinReq=0;
      for (      final Address adrs : lsPossibleAddresses) {
        final Connection conn=connectionManager.getOrConnect(adrs);
        logger.log(Level.FINEST,"conn " + conn);
        if (conn != null && numberOfJoinReq < 5) {
          found=true;
          clusterManager.sendJoinRequest(adrs);
          numberOfJoinReq++;
        }
      }
    }
    logger.log(Level.FINEST,"FOUND " + found);
    if (!found) {
      setAsMaster();
    }
 else {
      while (!joined) {
        int numberOfJoinReq=0;
        lsPossibleAddresses.removeAll(failedConnections);
        for (        final Address adrs : lsPossibleAddresses) {
          final Connection conn=connectionManager.getOrConnect(adrs);
          if (conn != null && numberOfJoinReq < 5) {
            clusterManager.sendJoinRequest(adrs);
            numberOfJoinReq++;
          }
        }
        Thread.sleep(2000);
        if (masterAddress == null) {
          boolean masterCandidate=true;
          for (          final Address address : lsPossibleAddresses) {
            if (this.address.hashCode() > address.hashCode())             masterCandidate=false;
          }
          if (masterCandidate) {
            setAsMaster();
          }
        }
      }
    }
    lsPossibleAddresses.clear();
    failedConnections.clear();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
}
