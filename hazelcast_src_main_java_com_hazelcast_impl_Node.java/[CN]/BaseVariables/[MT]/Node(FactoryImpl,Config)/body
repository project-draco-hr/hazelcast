{
  this.factory=factory;
  this.config=config;
  boolean sClient=false;
  final String superClientProp=System.getProperty("hazelcast.super.client");
  if (superClientProp != null) {
    if ("true".equalsIgnoreCase(superClientProp)) {
      sClient=true;
    }
  }
  superClient=sClient;
  localNodeType=(superClient) ? NodeType.SUPER_CLIENT : NodeType.MEMBER;
  String versionTemp="unknown";
  String buildTemp="unknown";
  try {
    InputStream inRuntimeProperties=Node.class.getClassLoader().getResourceAsStream("hazelcast-runtime.properties");
    if (inRuntimeProperties != null) {
      Properties runtimeProperties=new Properties();
      runtimeProperties.load(inRuntimeProperties);
      versionTemp=runtimeProperties.getProperty("hazelcast.version");
      buildTemp=runtimeProperties.getProperty("hazelcast.build");
    }
  }
 catch (  Exception ignored) {
  }
  version=versionTemp;
  build=buildTemp;
  ServerSocketChannel serverSocketChannel=null;
  try {
    final String preferIPv4Stack=System.getProperty("java.net.preferIPv4Stack");
    final String preferIPv6Address=System.getProperty("java.net.preferIPv6Addresses");
    if (preferIPv6Address == null && preferIPv4Stack == null) {
      System.setProperty("java.net.preferIPv4Stack","true");
    }
    serverSocketChannel=ServerSocketChannel.open();
    address=AddressPicker.pickAddress(this,serverSocketChannel);
    address.setThisAddress(true);
    localMember=new MemberImpl(address,true,localNodeType);
  }
 catch (  final Exception e) {
    dumpCore(e);
    e.printStackTrace();
  }
  clusterImpl=new ClusterImpl(this);
  baseVariables=new BaseVariables(address,localMember);
  clusterService=new ClusterService(this);
  clusterService.start();
  inSelector=new InSelector(this,serverSocketChannel);
  outSelector=new OutSelector(this);
  connectionManager=new ConnectionManager(this);
  clusterManager=new ClusterManager(this);
  concurrentMapManager=new ConcurrentMapManager(this);
  blockingQueueManager=new BlockingQueueManager(this);
  executorManager=new ExecutorManager(this);
  listenerManager=new ListenerManager(this);
  topicManager=new TopicManager(this);
  clusterManager.addMember(localMember);
  Logger systemLogger=Logger.getLogger("com.hazelcast.system");
  systemLogger.log(Level.INFO,"Hazelcast " + version + " ("+ build+ ") starting at "+ address);
  systemLogger.log(Level.INFO,"Copyright (C) 2009 Hazelcast.com");
  Join join=config.getNetworkConfig().getJoin();
  MulticastService mcService=null;
  try {
    if (join.getMulticastConfig().isEnabled()) {
      MulticastSocket multicastSocket=new MulticastSocket(null);
      multicastSocket.setReuseAddress(true);
      multicastSocket.bind(new InetSocketAddress(join.getMulticastConfig().getMulticastPort()));
      multicastSocket.setTimeToLive(32);
      multicastSocket.setInterface(address.getInetAddress());
      multicastSocket.setReceiveBufferSize(1024);
      multicastSocket.setSendBufferSize(1024);
      multicastSocket.joinGroup(InetAddress.getByName(join.getMulticastConfig().getMulticastGroup()));
      multicastSocket.setSoTimeout(1000);
      mcService=new MulticastService(this,multicastSocket);
    }
  }
 catch (  Exception e) {
    dumpCore(e);
    e.printStackTrace();
  }
  this.multicastService=mcService;
}
