{
  try {
    failedConnections.clear();
    final Collection<Address> colPossibleAddresses=getPossibleMembers();
    colPossibleAddresses.remove(address);
    for (    final Address possibleAddress : colPossibleAddresses) {
      logger.log(Level.FINEST,"connecting to " + possibleAddress);
      connectionManager.getOrConnect(possibleAddress);
    }
    boolean found=false;
    int numberOfSeconds=0;
    final int connectionTimeoutSeconds=config.getNetworkConfig().getJoin().getTcpIpConfig().getConnectionTimeoutSeconds();
    while (!found && numberOfSeconds < connectionTimeoutSeconds) {
      colPossibleAddresses.removeAll(failedConnections);
      if (colPossibleAddresses.size() == 0) {
        break;
      }
      Thread.sleep(1000L);
      numberOfSeconds++;
      int numberOfJoinReq=0;
      logger.log(Level.FINE,"we are going to try to connect to each lockAddress, but no more than five times");
      for (      Address possibleAddress : colPossibleAddresses) {
        logger.log(Level.FINEST,"connection attempt " + numberOfJoinReq + " to "+ possibleAddress);
        final Connection conn=connectionManager.getOrConnect(possibleAddress);
        if (conn != null && numberOfJoinReq < 5) {
          found=true;
          logger.log(Level.FINEST,"found and sending join request for " + possibleAddress);
          clusterManager.sendJoinRequest(possibleAddress);
          numberOfJoinReq++;
        }
 else {
          logger.log(Level.FINEST,"number of join requests is greater than 5, no join request will be sent for " + possibleAddress);
        }
      }
    }
    logger.log(Level.FINEST,"FOUND " + found);
    if (!found) {
      logger.log(Level.FINEST,"This node will assume isMaster role since no possible member where connected to");
      setAsMaster();
    }
 else {
      while (!joined) {
        int numberOfJoinReq=0;
        colPossibleAddresses.removeAll(failedConnections);
        for (        Address possibleAddress : colPossibleAddresses) {
          final Connection conn=connectionManager.getOrConnect(possibleAddress);
          if (conn != null && numberOfJoinReq < 5) {
            logger.log(Level.FINEST,"sending join request for " + possibleAddress);
            clusterManager.sendJoinRequest(possibleAddress);
            numberOfJoinReq++;
          }
 else {
            logger.log(Level.FINEST,"number of join request is greater than 5, no join request will be sent for " + possibleAddress + " the second time");
          }
        }
        long sleepTime=3000L;
        for (        Address possibleAddress : colPossibleAddresses) {
          if (address.hashCode() > possibleAddress.hashCode()) {
            sleepTime=6000L;
            break;
          }
 else           if (address.hashCode() == possibleAddress.hashCode()) {
            sleepTime=3000L + ((int)(Math.random() * 10) * 1000L);
            break;
          }
        }
        Thread.sleep(sleepTime);
        if (masterAddress == null) {
          boolean masterCandidate=true;
          for (          Address address : colPossibleAddresses) {
            if (this.address.hashCode() > address.hashCode()) {
              masterCandidate=false;
            }
          }
          if (masterCandidate) {
            logger.log(Level.FINEST,"I am the isMaster candidate, setting as isMaster");
            setAsMaster();
          }
        }
      }
    }
    colPossibleAddresses.clear();
    failedConnections.clear();
  }
 catch (  Exception e) {
    e.printStackTrace();
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}
