{
  logger.log(Level.FINEST,"We are asked to start and completelyShutdown is " + String.valueOf(completelyShutdown));
  if (completelyShutdown)   return;
  final String prefix="hz." + this.id + ".";
  Thread inThread=new Thread(threadGroup,inSelector,prefix + "InThread");
  inThread.setPriority(groupProperties.IN_THREAD_PRIORITY.getInteger());
  logger.log(Level.FINEST,"Starting thread " + inThread.getName());
  inThread.start();
  Thread outThread=new Thread(threadGroup,outSelector,prefix + "OutThread");
  outThread.setPriority(groupProperties.OUT_THREAD_PRIORITY.getInteger());
  logger.log(Level.FINEST,"Starting thread " + outThread.getName());
  outThread.start();
  serviceThread=new Thread(threadGroup,clusterService,prefix + "ServiceThread");
  serviceThread.setPriority(groupProperties.SERVICE_THREAD_PRIORITY.getInteger());
  logger.log(Level.FINEST,"Starting thread " + serviceThread.getName());
  serviceThread.start();
  if (config.getNetworkConfig().getJoin().getMulticastConfig().isEnabled()) {
    final Thread multicastServiceThread=new Thread(threadGroup,multicastService,"hz.MulticastThread");
    multicastServiceThread.start();
  }
  setActive(true);
  if (!completelyShutdown) {
    logger.log(Level.FINEST,"Adding ShutdownHook");
    Runtime.getRuntime().addShutdownHook(shutdownHookThread);
  }
  logger.log(Level.FINEST,"finished starting threads, calling join");
  join();
  postJoin();
}
