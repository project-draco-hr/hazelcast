{
  Join join=config.getNetworkConfig().getJoin();
  final List<String> lsJoinMembers=join.getTcpIpConfig().getMembers();
  final List<Address> lsPossibleAddresses=new ArrayList<Address>();
  for (  final String host : lsJoinMembers) {
    final boolean ip=isIP(host);
    try {
      if (ip) {
        for (int i=0; i < 3; i++) {
          final Address addrs=new Address(host,config.getPort() + i,true);
          if (!addrs.equals(getThisAddress())) {
            logger.log(Level.FINEST,"adding possible member " + addrs);
            lsPossibleAddresses.add(addrs);
          }
        }
      }
 else {
        final InetAddress[] allAddresses=InetAddress.getAllByName(host);
        for (        final InetAddress inetAddress : allAddresses) {
          boolean shouldCheck=true;
          Address addrs;
          Interfaces interfaces=config.getNetworkConfig().getInterfaces();
          if (interfaces.isEnabled()) {
            addrs=new Address(inetAddress.getAddress(),config.getPort());
            shouldCheck=AddressPicker.matchAddress(addrs.getHost(),interfaces.getInterfaces());
          }
          if (shouldCheck) {
            for (int i=0; i < 3; i++) {
              final Address addressProper=new Address(inetAddress.getAddress(),config.getPort() + i);
              if (!addressProper.equals(getThisAddress())) {
                logger.log(Level.FINEST,"adding possible member " + addressProper);
                lsPossibleAddresses.add(addressProper);
              }
            }
          }
        }
      }
    }
 catch (    final Exception e) {
      e.printStackTrace();
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  lsPossibleAddresses.addAll(config.getNetworkConfig().getJoin().getTcpIpConfig().getAddresses());
  return lsPossibleAddresses;
}
