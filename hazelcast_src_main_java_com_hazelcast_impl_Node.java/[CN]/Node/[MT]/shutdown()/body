{
  logger.log(Level.FINE,"** we are being asked to shutdown when active = " + String.valueOf(active));
  if (isActive()) {
    long start=System.currentTimeMillis();
    joined=false;
    setActive(false);
    logger.log(Level.FINEST,"Shutting down the clientService");
    clientService.reset();
    logger.log(Level.FINEST,"Shutting down the NIO socket selector for input");
    inSelector.shutdown();
    logger.log(Level.FINEST,"Shutting down the NIO socket selector for output");
    outSelector.shutdown();
    logger.log(Level.FINEST,"Shutting down the cluster service");
    clusterService.stop();
    logger.log(Level.FINEST,"Shutting down the query service");
    if (multicastService != null) {
      multicastService.stop();
    }
    logger.log(Level.FINEST,"Shutting down the connection manager");
    connectionManager.shutdown();
    logger.log(Level.FINEST,"Shutting down the concurrentMapManager");
    concurrentMapManager.reset();
    logger.log(Level.FINEST,"Shutting down the executorManager");
    executorManager.stop();
    textCommandService.stop();
    masterAddress=null;
    logger.log(Level.FINEST,"Shutting down the cluster manager");
    clusterManager.stop();
    int numThreads=threadGroup.activeCount();
    Thread[] threads=new Thread[numThreads * 2];
    numThreads=threadGroup.enumerate(threads,false);
    for (int i=0; i < numThreads; i++) {
      Thread thread=threads[i];
      logger.log(Level.FINEST,"Shutting down thread " + thread.getName());
      thread.interrupt();
    }
    logger.log(Level.INFO,"Hazelcast Shutdown is completed in " + (System.currentTimeMillis() - start) + " ms.");
    packetPool.clear();
  }
}
