{
  this.id=counter.incrementAndGet();
  this.threadGroup=new ThreadGroup(factory.getName());
  this.factory=factory;
  this.config=config;
  this.groupProperties=new GroupProperties(config);
  this.superClient=config.isSuperClient();
  this.localNodeType=(superClient) ? NodeType.LITE_MEMBER : NodeType.MEMBER;
  ServerSocketChannel serverSocketChannelTemp=null;
  Address localAddress=null;
  try {
    final String preferIPv4Stack=System.getProperty("java.net.preferIPv4Stack");
    final String preferIPv6Address=System.getProperty("java.net.preferIPv6Addresses");
    if (preferIPv6Address == null && preferIPv4Stack == null) {
      System.setProperty("java.net.preferIPv4Stack","true");
    }
    serverSocketChannelTemp=ServerSocketChannel.open();
    AddressPicker addressPicker=new AddressPicker(this,serverSocketChannelTemp);
    localAddress=addressPicker.pickAddress();
    localAddress.setThisAddress(true);
  }
 catch (  Throwable e) {
    Util.throwUncheckedException(e);
  }
  serverSocketChannel=serverSocketChannelTemp;
  address=localAddress;
  localMember=new MemberImpl(address,true,localNodeType);
  String loggingType=groupProperties.LOGGING_TYPE.getString();
  this.loggingService=new LoggingServiceImpl(config.getGroupConfig().getName(),loggingType,localMember);
  this.logger=loggingService.getLogger(Node.class.getName());
  initializer=NodeInitializerFactory.create();
  initializer.beforeInitialize(this);
  securityContext=config.getSecurityConfig().isEnabled() ? initializer.getSecurityContext() : null;
  clusterImpl=new ClusterImpl(this,localMember);
  baseVariables=new NodeBaseVariables(address,localMember);
  clusterService=new ClusterService(this);
  clusterService.start();
  connectionManager=new ConnectionManager(this,serverSocketChannel);
  clusterManager=new ClusterManager(this);
  executorManager=new ExecutorManager(this);
  clientService=new ClientService(this);
  concurrentMapManager=new ConcurrentMapManager(this);
  blockingQueueManager=new BlockingQueueManager(this);
  listenerManager=new ListenerManager(this);
  topicManager=new TopicManager(this);
  textCommandService=new TextCommandServiceImpl(this);
  clusterManager.addMember(false,localMember);
  initializer.printNodeInfo(this);
  buildNumber=initializer.getBuildNumber();
  VersionCheck.check(this,initializer.getBuild(),initializer.getVersion());
  Join join=config.getNetworkConfig().getJoin();
  MulticastService mcService=null;
  try {
    if (join.getMulticastConfig().isEnabled()) {
      MulticastSocket multicastSocket=new MulticastSocket(null);
      multicastSocket.setReuseAddress(true);
      multicastSocket.bind(new InetSocketAddress(join.getMulticastConfig().getMulticastPort()));
      multicastSocket.setTimeToLive(32);
      multicastSocket.setInterface(address.getInetAddress());
      multicastSocket.setReceiveBufferSize(64 * 1024);
      multicastSocket.setSendBufferSize(64 * 1024);
      multicastSocket.joinGroup(InetAddress.getByName(join.getMulticastConfig().getMulticastGroup()));
      multicastSocket.setSoTimeout(1000);
      mcService=new MulticastService(this,multicastSocket);
      mcService.addMulticastListener(new NodeMulticastListener(this));
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  this.multicastService=mcService;
  wanReplicationService=new WanReplicationService(this);
  joiner=createJoiner();
}
