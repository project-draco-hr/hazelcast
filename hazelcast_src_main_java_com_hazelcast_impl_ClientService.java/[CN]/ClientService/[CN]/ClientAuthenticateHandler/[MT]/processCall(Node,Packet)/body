{
  final Credentials credentials=(Credentials)toObject(packet.getValueData());
  boolean authenticated=false;
  if (credentials == null) {
    authenticated=false;
    logger.log(Level.SEVERE,"Could not retrieve Credentials object!");
  }
 else   if (node.securityContext != null) {
    final Socket endpointSocket=packet.conn.getSocketChannelWrapper().socket();
    credentials.setEndpoint(Address.toString(endpointSocket.getInetAddress().getAddress()));
    try {
      LoginContext lc=node.securityContext.createClientLoginContext(credentials);
      lc.login();
      getClientEndpoint(packet.conn).setLoginContext(lc);
      authenticated=true;
    }
 catch (    LoginException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      authenticated=false;
    }
  }
 else {
    if (credentials instanceof UsernamePasswordCredentials) {
      final UsernamePasswordCredentials usernamePasswordCredentials=(UsernamePasswordCredentials)credentials;
      final String nodeGroupName=factory.getConfig().getGroupConfig().getName();
      final String nodeGroupPassword=factory.getConfig().getGroupConfig().getPassword();
      authenticated=(nodeGroupName.equals(usernamePasswordCredentials.getUsername()) && nodeGroupPassword.equals(usernamePasswordCredentials.getPassword()));
    }
 else {
      authenticated=false;
      logger.log(Level.SEVERE,"Hazelcast security is disabled.\nUsernamePasswordCredentials or cluster group-name" + " and group-password should be used for authentication!\n" + "Current credentials type is: "+ credentials.getClass().getName());
    }
  }
  logger.log((authenticated ? Level.INFO : Level.WARNING),"received auth from " + packet.conn + ", "+ (authenticated ? "successfully authenticated" : "authentication failed"));
  packet.clearForResponse();
  packet.setValue(toData(authenticated));
  if (!authenticated) {
    node.clientService.removeClientEndpoint(packet.conn);
  }
 else {
    node.clientService.getClientEndpoint(packet.conn).authenticated();
  }
}
