{
  final ClientEndpoint clientEndpoint=node.clientService.getClientEndpoint(packet.conn);
  boolean includeValue=(int)packet.longValue == 1;
  if (getInstanceType(packet.name).equals(InstanceType.MAP)) {
    IMap<Object,Object> map=(IMap)node.factory.getOrCreateProxyByName(packet.name);
    clientEndpoint.addThisAsListener(map,packet.getKeyData(),includeValue);
  }
 else   if (getInstanceType(packet.name).equals(InstanceType.LIST) || getInstanceType(packet.name).equals(InstanceType.SET)) {
    CollectionProxyImpl collectionProxy=(CollectionProxyImpl)node.factory.getOrCreateProxyByName(packet.name);
    IMap map=((CollectionProxyReal)collectionProxy.getBase()).mapProxy;
    clientEndpoint.addThisAsListener(map,null,includeValue);
  }
 else   if (getInstanceType(packet.name).equals(InstanceType.QUEUE)) {
    IQueue<Object> queue=(IQueue)node.factory.getOrCreateProxyByName(packet.name);
    final String packetName=packet.name;
    ItemListener itemListener=new ItemListener(){
      public void itemAdded(      Object item){
        Packet p=new Packet();
        p.set(packetName,ClusterOperation.EVENT,item,true);
        clientEndpoint.sendPacket(p);
      }
      public void itemRemoved(      Object item){
        Packet p=new Packet();
        p.set(packetName,ClusterOperation.EVENT,item,false);
        clientEndpoint.sendPacket(p);
      }
    }
;
    queue.addItemListener(itemListener,includeValue);
    clientEndpoint.queueItemListeners.put(queue,itemListener);
  }
 else   if (getInstanceType(packet.name).equals(InstanceType.TOPIC)) {
    ITopic<Object> topic=(ITopic)node.factory.getOrCreateProxyByName(packet.name);
    final String packetName=packet.name;
    MessageListener<Object> messageListener=new MessageListener<Object>(){
      public void onMessage(      Object msg){
        Packet p=new Packet();
        p.set(packetName,ClusterOperation.EVENT,msg,null);
        clientEndpoint.sendPacket(p);
      }
    }
;
    topic.addMessageListener(messageListener);
    clientEndpoint.messageListeners.put(topic,messageListener);
  }
  packet.clearForResponse();
}
