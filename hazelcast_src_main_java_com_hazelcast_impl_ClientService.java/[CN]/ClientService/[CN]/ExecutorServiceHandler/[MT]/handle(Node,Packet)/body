{
  try {
    String name=packet.name;
    ExecutorService executorService=factory.getExecutorService(name);
    ClientDistributedTask cdt=(ClientDistributedTask)toObject(packet.getKeyData());
    if (cdt.getMember() != null && cdt.getMember() instanceof HazelcastInstanceAware) {
      ((HazelcastInstanceAware)cdt.getMember()).setHazelcastInstance(node.factory);
    }
    if (cdt.getMembers() != null) {
      Set<Member> set=cdt.getMembers();
      for (      Member m : set)       if (m instanceof HazelcastInstanceAware)       ((HazelcastInstanceAware)m).setHazelcastInstance(node.factory);
    }
    final ClientEndpoint clientEndpoint=getClientEndpoint(packet.conn);
    final Callable callable=node.securityContext == null ? cdt.getCallable() : node.securityContext.createSecureCallable(clientEndpoint.getSubject(),cdt.getCallable());
    final DistributedTask task;
    if (cdt.getKey() != null) {
      task=new DistributedTask(callable,cdt.getKey());
    }
 else     if (cdt.getMember() != null) {
      task=new DistributedTask(callable,cdt.getMember());
    }
 else     if (cdt.getMembers() != null) {
      task=new MultiTask(callable,cdt.getMembers());
    }
 else {
      task=new DistributedTask(callable);
    }
    clientEndpoint.storeTask(packet.callId,task);
    task.setExecutionCallback(new ExecutionCallback(){
      public void done(      Future future){
        Object result;
        try {
          clientEndpoint.removeTask(packet.callId);
          result=future.get();
          packet.setValue(toData(result));
        }
 catch (        InterruptedException e) {
          return;
        }
catch (        CancellationException e) {
          packet.setValue(toData(e));
        }
catch (        ExecutionException e) {
          packet.setValue(toData(e));
        }
        sendResponse(packet);
      }
    }
);
    executorService.execute(task);
  }
 catch (  RuntimeException e) {
    logger.log(Level.WARNING,"exception during handling " + packet.operation + ": "+ e.getMessage(),e);
    packet.clearForResponse();
    packet.setValue(toData(e));
    sendResponse(packet);
  }
}
