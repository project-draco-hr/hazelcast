{
  pagingPredicate.setIterationType(iterationType);
  setPreviousPagesAnchors(mapName,pagingPredicate,iterationType);
  NodeEngine nodeEngine=this.nodeEngine;
  Set result=new SortedQueryResultSet(pagingPredicate.getComparator(),iterationType,pagingPredicate.getPageSize());
  Set<Integer> partitionIds=getAllPartitionIds(nodeEngine);
  try {
    List<Future> futures=queryOnMembers(mapName,pagingPredicate,nodeEngine);
    addResultsOfPagingPredicate(futures,result,partitionIds);
    if (partitionIds.isEmpty()) {
      PagingPredicateAccessor.setPagingPredicateAnchor(pagingPredicate,((SortedQueryResultSet)result).last());
      return result;
    }
  }
 catch (  Throwable t) {
    nodeEngine.getLogger(getClass()).warning("Could not get results",t);
  }
  try {
    List<Future> futures=queryOnPartitions(mapName,pagingPredicate,nodeEngine,partitionIds);
    addResultsOfPagingPredicate(futures,result,partitionIds);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
  PagingPredicateAccessor.setPagingPredicateAnchor(pagingPredicate,((SortedQueryResultSet)result).last());
  return result;
}
