{
  pagingPredicate.setIterationType(iterationType);
  setPreviousPagesAnchorsOnLocalMember(mapName,pagingPredicate,iterationType);
  Set result=new SortedQueryResultSet(pagingPredicate.getComparator(),iterationType,pagingPredicate.getPageSize());
  List<Integer> partitionIds=getLocalPartitionIds();
  try {
    Future<QueryResult> future=queryOnLocalMember(mapName,pagingPredicate);
    List<Future<QueryResult>> futures=Collections.singletonList(future);
    addResultsOfPagingPredicate(futures,result,partitionIds);
    if (partitionIds.isEmpty()) {
      PagingPredicateAccessor.setPagingPredicateAnchor(pagingPredicate,((SortedQueryResultSet)result).last());
      return result;
    }
  }
 catch (  QueryResultSizeExceededException e) {
    throw ExceptionUtil.rethrow(e);
  }
catch (  Throwable t) {
    logger.warning("Could not get results",t);
  }
  try {
    List<Future<QueryResult>> futures=queryOnPartitions(mapName,pagingPredicate,partitionIds);
    addResultsOfPagingPredicate(futures,result,partitionIds);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
  return result;
}
