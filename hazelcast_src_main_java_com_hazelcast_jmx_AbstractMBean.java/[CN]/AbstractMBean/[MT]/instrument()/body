{
  JMXDescription dscr=this.getClass().getAnnotation(JMXDescription.class);
  if (dscr != null) {
    this.description=dscr.value();
  }
  for (  Method method : getClass().getMethods()) {
    if (method.isAnnotationPresent(JMXAttribute.class)) {
      JMXAttribute annotation=method.getAnnotation(JMXAttribute.class);
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest("Found annotation " + annotation + " in method "+ method.getName()+ " in object "+ hashCode()+ " of class "+ getClass().getName());
      }
      String name=annotation.value();
      if (name.length() == 0) {
        String methodName=method.getName();
        if (methodName.startsWith("get")) {
          name=methodName.substring(3);
        }
 else         if (methodName.startsWith("set")) {
          name=methodName.substring(3);
        }
 else         if (methodName.startsWith("is")) {
          name=methodName.substring(2);
        }
 else {
          logger.warning("Uncomplaint method name " + method.getName() + " for attribute");
          name=method.getName();
        }
      }
      AttributeInfo info=attributeInfos.get(name);
      if (info == null) {
        info=new AttributeInfo(name);
        attributeInfos.put(name,info);
      }
      dscr=method.getAnnotation(JMXDescription.class);
      if (dscr != null) {
        if (info.description != null) {
          logger.warning("Duplicate description for attribute " + name + ", overwrite");
        }
        info.description=dscr.value();
      }
      if (method.getReturnType() != Void.class && method.getParameterTypes().length == 0) {
        if (info.getter != null) {
          throw new IllegalArgumentException("Duplicate getter for attribute " + name + " in class "+ getClass().getName());
        }
 else {
          info.getter=method;
        }
      }
 else       if (method.getReturnType() == Void.class && method.getParameterTypes().length == 1) {
        if (info.setter != null) {
          throw new IllegalArgumentException("Duplicate setter for attribute " + name + " in class "+ getClass().getName());
        }
 else {
          info.setter=method;
        }
      }
 else {
        logger.warning("Method " + method.getName() + " is neither a setter or a getter");
      }
    }
    if (method.isAnnotationPresent(JMXOperation.class)) {
      JMXOperation annotation=method.getAnnotation(JMXOperation.class);
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest("Found operation annotation " + annotation);
      }
      String name=annotation.value();
      if (name.length() == 0) {
        throw new IllegalArgumentException("Empty operation name in  " + method.getName() + " in class "+ getClass().getName());
      }
      if (operationInfos.containsKey(name)) {
        throw new IllegalArgumentException("Duplicate operation " + name + " in class "+ getClass().getName());
      }
      OperationInfo info=new OperationInfo(name);
      operationInfos.put(name,info);
      dscr=method.getAnnotation(JMXDescription.class);
      if (dscr != null) {
        info.description=dscr.value();
      }
      info.method=method;
    }
  }
}
