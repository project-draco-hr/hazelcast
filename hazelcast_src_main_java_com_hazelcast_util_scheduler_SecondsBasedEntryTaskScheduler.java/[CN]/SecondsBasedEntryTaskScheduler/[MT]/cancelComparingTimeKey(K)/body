{
  Set<TimeKey> candidateKeys=new HashSet<TimeKey>();
  for (  Object tkey : secondsOfKeys.keySet()) {
    TimeKey timeKey=(TimeKey)tkey;
    if (timeKey.getKey().equals(key)) {
      candidateKeys.add(timeKey);
    }
  }
  ScheduledEntry<K,V> result=null;
  for (  TimeKey timeKey : candidateKeys) {
    final Integer second=secondsOfKeys.remove(timeKey);
    if (second == null) {
      continue;
    }
    final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
    if (entries == null) {
      continue;
    }
    result=entries.remove(timeKey);
    if (entries.isEmpty()) {
      scheduledEntries.remove(second);
      ScheduledFuture removed=scheduledTaskMap.remove(second);
      if (removed != null) {
        removed.cancel(false);
      }
    }
  }
  return result;
}
