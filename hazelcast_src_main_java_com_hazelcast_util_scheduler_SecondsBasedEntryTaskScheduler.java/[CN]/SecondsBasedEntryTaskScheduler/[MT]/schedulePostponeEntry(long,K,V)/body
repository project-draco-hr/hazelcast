{
  int delaySeconds=ceilToSecond(delayMillis);
  Integer newSecond=findRelativeSecond(delayMillis);
synchronized (mutex) {
    Integer existingSecond=secondsOfKeys.put(key,newSecond);
    if (existingSecond != null) {
      if (existingSecond.equals(newSecond)) {
        return false;
      }
      removeKeyFromSecond(key,existingSecond);
    }
    long id=uniqueIdGenerator.incrementAndGet();
    ScheduledEntry<K,V> scheduledEntry=new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,id);
    doSchedule(key,scheduledEntry,newSecond);
  }
  return true;
}
