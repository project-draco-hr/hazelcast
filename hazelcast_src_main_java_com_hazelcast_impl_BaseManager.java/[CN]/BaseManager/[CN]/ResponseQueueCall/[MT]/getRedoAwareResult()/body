{
  Object result=waitAndGetResult();
  if (result == OBJECT_REDO) {
    request.redoCount++;
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    if (request.redoCount > 15) {
      final CountDownLatch l=new CountDownLatch(1);
      enqueueAndReturn(new Processable(){
        public void process(){
          StringBuffer sb=new StringBuffer();
          Address target=getTarget();
          Connection targetConnection=null;
          MemberImpl targetMember=null;
          Object key=toObject(request.key);
          Block block=node.concurrentMapManager.getOrCreateBlock(request.key);
          if (target != null) {
            targetMember=getMember(target);
            targetConnection=node.connectionManager.getConnection(target);
            if (targetMember != null) {
              if (!lsMembers.contains(targetMember)) {
                logger.log(Level.SEVERE,targetMember + " is not in member list!");
              }
            }
          }
          sb.append("======= " + request.callId + ": "+ request.operation+ " ======== ");
          sb.append("\n\t");
          sb.append("thisAddress= " + thisAddress + ", target= "+ getTarget());
          sb.append("\n\t");
          sb.append("targetMember= " + targetMember + ", targetConn="+ targetConnection+ ", targetBlock="+ block);
          sb.append("\n\t");
          sb.append(key + " Re-doing [" + request.redoCount+ "] times! "+ request.name);
          logger.log(Level.INFO,sb.toString());
          logger.log(Level.INFO,node.concurrentMapManager.printBlocks());
          l.countDown();
        }
      }
);
      try {
        l.await();
      }
 catch (      InterruptedException e) {
      }
    }
    beforeRedo();
    doOp();
    return getResult();
  }
  return result;
}
