{
  if (isRemoveAll) {
    final long now=Clock.currentTimeMillis();
    final Set<Data> localKeys=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
    try {
      deleteAllCacheEntry(localKeys);
    }
  finally {
      final Set<Data> keysToClean=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
      for (      Data key : keysToClean) {
        isEventBatchingEnabled=true;
        final CacheRecord record=records.get(key);
        if (localKeys.contains(key) && record != null) {
          boolean isExpired=record.isExpiredAt(now);
          if (isExpired) {
            processExpiredEntry(key,record);
          }
 else {
            deleteRecord(key);
            if (isStatisticsEnabled()) {
              statistics.increaseCacheRemovals(1);
            }
          }
        }
 else {
          keys.remove(key);
        }
        isEventBatchingEnabled=false;
        int orderKey=keys != null ? keys.hashCode() : 1;
        publishBatchedEvents(name,CacheEventType.REMOVED,orderKey);
      }
    }
  }
 else {
    records.clear();
  }
}
