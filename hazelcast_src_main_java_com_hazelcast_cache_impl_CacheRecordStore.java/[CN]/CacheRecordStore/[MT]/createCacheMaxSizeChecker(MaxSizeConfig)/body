{
  if (maxSizeConfig == null) {
    return null;
  }
  final MaxSizeConfig.MaxSizePolicy maxSizePolicy=maxSizeConfig.getMaxSizePolicy();
  if (maxSizePolicy == null) {
    return null;
  }
  final CacheMaxSizeChecker maxSizeChecker=super.createCacheMaxSizeChecker(maxSizeConfig);
  if (maxSizeChecker != null) {
    return maxSizeChecker;
  }
  if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {
    return new UsedHeapSizeCacheMaxSizeChecker(cacheInfo,maxSizeConfig);
  }
 else   if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_PERCENTAGE) {
    return new UsedHeapPercentageCacheMaxSizeChecker(cacheInfo,maxSizeConfig);
  }
 else   if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.FREE_HEAP_SIZE) {
    return new FreeHeapSizeCacheMaxSizeChecker(cacheInfo,maxSizeConfig);
  }
 else   if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.FREE_HEAP_PERCENTAGE) {
    return new FreeHeapPercentageCacheMaxSizeChecker(cacheInfo,maxSizeConfig);
  }
 else {
    throw new IllegalArgumentException("Invalid max-size policy for " + getClass().getName() + " ! Only "+ MaxSizeConfig.MaxSizePolicy.PER_NODE+ ", "+ MaxSizeConfig.MaxSizePolicy.PER_PARTITION+ ", "+ MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE+ ", "+ MaxSizeConfig.MaxSizePolicy.USED_HEAP_PERCENTAGE+ ", "+ MaxSizeConfig.MaxSizePolicy.FREE_HEAP_SIZE+ ", "+ MaxSizeConfig.MaxSizePolicy.FREE_HEAP_PERCENTAGE+ " are supported.");
  }
}
