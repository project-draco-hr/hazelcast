{
  final Config cfg=new Config();
  Map<String,TopicConfig> tpCfgs=cfg.getTopicConfigs();
  TopicConfig topicConfig=new TopicConfig();
  topicConfig.setGlobalOrderingEnabled(true);
  tpCfgs.put("*",topicConfig);
  final Map<Long,String> stringMap=new HashMap<Long,String>();
  final CountDownLatch countDownLatch=new CountDownLatch(4);
  final CountDownLatch mainLatch=new CountDownLatch(4);
  for (int i=0; i < 4; i++) {
    new Thread(new Runnable(){
      public void run(){
        HazelcastInstance hazelcastInstance=Hazelcast.newHazelcastInstance(cfg);
        ITopic<Long> topic=hazelcastInstance.getTopic("first");
        final long x=Thread.currentThread().getId();
        topic.addMessageListener(new MessageListener<Long>(){
          public void onMessage(          Message<Long> message){
            String str=stringMap.get(x) + message.getMessageObject().toString();
            stringMap.put(x,str);
          }
        }
);
        countDownLatch.countDown();
        try {
          countDownLatch.await();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        for (int j=0; j < 20; j++) {
          if (x % 2 == 0)           topic.publish((long)j);
 else           topic.publish(Long.valueOf(-1));
        }
        mainLatch.countDown();
      }
    }
,String.valueOf(i)).start();
  }
  mainLatch.await();
  Thread.sleep(500);
  String ref=stringMap.values().iterator().next();
  for (  String s : stringMap.values()) {
    if (!ref.equals(s)) {
      assertFalse("no total order",true);
      return;
    }
  }
  assertTrue("total order",true);
}
