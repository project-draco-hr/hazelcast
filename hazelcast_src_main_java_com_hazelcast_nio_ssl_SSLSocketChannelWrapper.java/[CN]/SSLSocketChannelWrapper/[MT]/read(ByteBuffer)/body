{
  if (!handshakeCompleted) {
    handshake();
  }
  int readBytesCount=0;
  int limit;
  if (applicationBuffer.hasRemaining()) {
    limit=Math.min(applicationBuffer.remaining(),output.remaining());
    for (int i=0; i < limit; i++) {
      output.put(applicationBuffer.get());
      readBytesCount++;
    }
    return readBytesCount;
  }
  if (netInBuffer.hasRemaining()) {
    unwrap(netInBuffer);
    applicationBuffer.flip();
    limit=Math.min(applicationBuffer.remaining(),output.remaining());
    for (int i=0; i < limit; i++) {
      output.put(applicationBuffer.get());
      readBytesCount++;
    }
    if (sslEngineResult.getStatus() != SSLEngineResult.Status.BUFFER_UNDERFLOW) {
      netInBuffer.clear();
      netInBuffer.flip();
      return readBytesCount;
    }
  }
  if (netInBuffer.hasRemaining()) {
    netInBuffer.compact();
  }
 else {
    netInBuffer.clear();
  }
  if (socketChannel.read(netInBuffer) == -1) {
    netInBuffer.clear();
    netInBuffer.flip();
    return -1;
  }
  netInBuffer.flip();
  unwrap(netInBuffer);
  applicationBuffer.flip();
  limit=Math.min(applicationBuffer.remaining(),output.remaining());
  for (int i=0; i < limit; i++) {
    output.put(applicationBuffer.get());
    readBytesCount++;
  }
  return readBytesCount;
}
