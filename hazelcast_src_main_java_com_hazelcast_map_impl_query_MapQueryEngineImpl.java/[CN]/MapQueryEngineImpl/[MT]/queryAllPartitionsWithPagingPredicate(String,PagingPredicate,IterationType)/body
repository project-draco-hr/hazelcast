{
  predicate.setIterationType(iterationType);
  ArrayList<Map.Entry> resultList=new ArrayList<Map.Entry>();
  Set<Integer> partitionIds=getAllPartitionIds();
  IterationType retrievalIterationType=iterationType == IterationType.VALUE ? IterationType.ENTRY : iterationType;
  try {
    List<Future<QueryResult>> futures=queryOnMembers(mapName,predicate,retrievalIterationType);
    addResultsOfPagingPredicate(futures,resultList,partitionIds);
    if (partitionIds.isEmpty()) {
      return getSortedQueryResultSet(resultList,predicate,iterationType);
    }
  }
 catch (  Throwable t) {
    if (t.getCause() instanceof QueryResultSizeExceededException) {
      throw rethrow(t);
    }
    logger.warning("Could not get results",t);
  }
  try {
    List<Future<QueryResult>> futures=queryPartitions(mapName,predicate,partitionIds,retrievalIterationType);
    addResultsOfPagingPredicate(futures,resultList,partitionIds);
  }
 catch (  Throwable t) {
    throw rethrow(t);
  }
  return getSortedQueryResultSet(resultList,predicate,iterationType);
}
