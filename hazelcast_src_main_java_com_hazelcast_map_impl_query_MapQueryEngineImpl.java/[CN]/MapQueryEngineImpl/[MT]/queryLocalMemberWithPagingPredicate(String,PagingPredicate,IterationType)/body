{
  pagingPredicate.setIterationType(iterationType);
  ArrayList<Map.Entry> resultList=new ArrayList<Map.Entry>();
  List<Integer> partitionIds=getLocalPartitionIds();
  try {
    Future<QueryResult> future=queryOnLocalMember(mapName,pagingPredicate);
    List<Future<QueryResult>> futures=Collections.singletonList(future);
    addResultsOfPagingPredicate(futures,resultList,partitionIds);
    if (partitionIds.isEmpty()) {
      return getSortedQueryResultSet(resultList,pagingPredicate,iterationType);
    }
  }
 catch (  Throwable t) {
    if (t.getCause() instanceof QueryResultSizeExceededException) {
      throw ExceptionUtil.rethrow(t);
    }
    logger.warning("Could not get results",t);
  }
  try {
    List<Future<QueryResult>> futures=queryOnPartitions(mapName,pagingPredicate,partitionIds);
    addResultsOfPagingPredicate(futures,resultList,partitionIds);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
  return getSortedQueryResultSet(resultList,pagingPredicate,iterationType);
}
