{
  boolean strong=false;
  Set<MapEntry> results=null;
  Predicate predicate=queryContext.getPredicate();
  queryContext.setMapIndexes(mapIndexes);
  try {
    if (predicate != null && mapIndexes != null && predicate instanceof IndexAwarePredicate) {
      List<IndexAwarePredicate> lsIndexAwarePredicates=new ArrayList<IndexAwarePredicate>();
      IndexAwarePredicate iap=(IndexAwarePredicate)predicate;
      strong=iap.collectIndexAwarePredicates(lsIndexAwarePredicates,mapIndexes);
      if (strong) {
        Set<Index> setAppliedIndexes=new HashSet<Index>(1);
        iap.collectAppliedIndexes(setAppliedIndexes,mapIndexes);
        if (setAppliedIndexes.size() > 0) {
          for (          Index index : setAppliedIndexes) {
            if (strong) {
              strong=index.isStrong();
            }
          }
        }
      }
      queryContext.setIndexedPredicateCount(lsIndexAwarePredicates.size());
      if (lsIndexAwarePredicates.size() == 1) {
        IndexAwarePredicate indexAwarePredicate=lsIndexAwarePredicates.get(0);
        Set<MapEntry> sub=indexAwarePredicate.filter(queryContext);
        if (sub == null || sub.size() == 0) {
          return null;
        }
 else {
          results=new HashSet<MapEntry>(sub.size());
          for (          MapEntry entry : sub) {
            Record record=(Record)entry;
            if (record.isActive()) {
              results.add(record);
            }
          }
        }
      }
 else       if (lsIndexAwarePredicates.size() > 0) {
        Set<MapEntry> smallestSet=null;
        List<Set<MapEntry>> lsSubResults=new ArrayList<Set<MapEntry>>(lsIndexAwarePredicates.size());
        for (        IndexAwarePredicate indexAwarePredicate : lsIndexAwarePredicates) {
          Set<MapEntry> sub=indexAwarePredicate.filter(queryContext);
          if (sub == null) {
            strong=false;
          }
 else           if (sub.size() == 0) {
            strong=true;
            return null;
          }
 else {
            if (smallestSet == null) {
              smallestSet=sub;
            }
 else {
              if (sub.size() < smallestSet.size()) {
                lsSubResults.add(smallestSet);
                smallestSet=sub;
              }
 else {
                lsSubResults.add(sub);
              }
            }
          }
        }
        if (smallestSet == null) {
          return null;
        }
        results=new HashSet<MapEntry>(smallestSet.size());
        for (        MapEntry entry : smallestSet) {
          Record record=(Record)entry;
          if (record.isActive()) {
            results.add(record);
          }
        }
        Iterator<MapEntry> it=results.iterator();
        smallestLoop:         while (it.hasNext()) {
          MapEntry entry=it.next();
          for (          Set<MapEntry> sub : lsSubResults) {
            if (!sub.contains(entry)) {
              it.remove();
              continue smallestLoop;
            }
          }
        }
      }
 else {
        results=new HashSet<MapEntry>(ownedRecords.size());
        for (        MapEntry entry : ownedRecords) {
          Record record=(Record)entry;
          if (record.isActive()) {
            results.add(record);
          }
        }
      }
    }
 else {
      results=new HashSet<MapEntry>(ownedRecords.size());
      for (      MapEntry entry : ownedRecords) {
        Record record=(Record)entry;
        if (record.isActive()) {
          results.add(record);
        }
      }
    }
  }
  finally {
    queryContext.setStrong(strong);
  }
  return results;
}
