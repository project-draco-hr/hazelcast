{
  if (state != ACTIVE) {
    throw new IllegalStateException("Transaction is not active");
  }
  try {
    state=PREPARING;
    final List<Future> futures=new ArrayList<Future>(participants.size());
    final OperationService operationService=nodeEngine.getOperationService();
    for (    Map.Entry<Integer,Collection<String>> entry : participants.entrySet()) {
      final int partitionId=entry.getKey();
      PrepareOperation op=new PrepareOperation(txnId,getServicesArray(entry.getValue()));
      futures.add(operationService.createInvocationBuilder(SERVICE_NAME,op,partitionId).build().invoke());
    }
    for (    Future future : futures) {
      future.get(timeoutSeconds,TimeUnit.SECONDS);
    }
    state=PREPARED;
    futures.clear();
    state=COMMITTING;
    for (    Map.Entry<Integer,Collection<String>> entry : participants.entrySet()) {
      final int partitionId=entry.getKey();
      CommitOperation op=new CommitOperation(txnId,getServicesArray(entry.getValue()));
      futures.add(operationService.createInvocationBuilder(SERVICE_NAME,op,partitionId).build().invoke());
    }
    for (    Future future : futures) {
      future.get(timeoutSeconds,TimeUnit.SECONDS);
    }
    state=COMMITTED;
  }
 catch (  Throwable e) {
    state=COMMIT_FAILED;
    if (e instanceof ExecutionException && e.getCause() instanceof TransactionException) {
      throw (TransactionException)e.getCause();
    }
    throw ExceptionUtil.rethrow(e);
  }
}
