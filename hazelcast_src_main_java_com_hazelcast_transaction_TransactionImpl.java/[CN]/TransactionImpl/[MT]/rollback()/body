{
  if (status == TXN_STATUS_NO_TXN) {
    throw new IllegalStateException("Transaction is not active");
  }
  status=TXN_STATUS_ROLLING_BACK;
  try {
    List<Future> futures=new ArrayList<Future>(participants.size());
    for (    TxnParticipant t : participants) {
      Operation op=new RollbackOperation(txnId);
      futures.add(nodeEngine.getOperationService().createInvocationBuilder(t.serviceName,op,t.partitionId).build().invoke());
    }
    for (    Future future : futures) {
      future.get(300,TimeUnit.SECONDS);
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    finalizeTxn();
    status=TXN_STATUS_ROLLED_BACK;
  }
}
