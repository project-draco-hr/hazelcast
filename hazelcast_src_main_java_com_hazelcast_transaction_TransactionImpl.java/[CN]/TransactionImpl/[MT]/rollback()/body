{
  if (state == NO_TXN || state == ROLLED_BACK) {
    throw new IllegalStateException("Transaction is not active");
  }
  state=ROLLING_BACK;
  try {
    List<Future> futures=new ArrayList<Future>(partitions.size());
    for (    Integer partitionId : partitions) {
      RollbackOperation op=new RollbackOperation(txnId);
      futures.add(nodeEngine.getOperationService().createInvocationBuilder(SERVICE_NAME,op,partitionId).build().invoke());
    }
    for (    Future future : futures) {
      future.get(timeoutMillis,TimeUnit.MILLISECONDS);
    }
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
 finally {
    state=ROLLED_BACK;
  }
}
