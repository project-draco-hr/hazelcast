{
  joinInProgress=true;
  final MembersUpdateCall membersUpdate=new MembersUpdateCall(lsMembers);
  if (setJoins != null && setJoins.size() > 0) {
    for (    MemberInfo memberJoined : setJoins) {
      membersUpdate.addMemberInfo(memberJoined);
    }
  }
  executeLocally(new Runnable(){
    public void run(){
      List<MemberInfo> lsMemberInfos=membersUpdate.lsMemberInfos;
      List<AsyncRemotelyBooleanCallable> calls=new ArrayList<AsyncRemotelyBooleanCallable>();
      for (      final MemberInfo memberInfo : lsMemberInfos) {
        AsyncRemotelyBooleanCallable rrp=new AsyncRemotelyBooleanCallable();
        rrp.executeProcess(memberInfo.address,membersUpdate);
        calls.add(rrp);
      }
      for (      AsyncRemotelyBooleanCallable call : calls) {
        call.getResultAsBoolean();
      }
      calls.clear();
      for (      final MemberInfo memberInfo : lsMemberInfos) {
        AsyncRemotelyBooleanCallable call=new AsyncRemotelyBooleanCallable();
        call.executeProcess(memberInfo.address,new SyncProcess());
        calls.add(call);
      }
      for (      AsyncRemotelyBooleanCallable call : calls) {
        call.getResultAsBoolean();
      }
      calls.clear();
      AbstractRemotelyCallable<Boolean> connCheckcallable=new ConnectionCheckCall();
      for (      final MemberInfo memberInfo : lsMemberInfos) {
        AsyncRemotelyBooleanCallable call=new AsyncRemotelyBooleanCallable();
        call.executeProcess(memberInfo.address,connCheckcallable);
        calls.add(call);
      }
      for (      AsyncRemotelyBooleanCallable call : calls) {
        call.getResultAsBoolean();
      }
    }
  }
);
}
