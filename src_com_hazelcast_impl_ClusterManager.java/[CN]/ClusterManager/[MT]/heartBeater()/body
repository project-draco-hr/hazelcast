{
  if (!Node.get().joined())   return;
  long now=System.currentTimeMillis();
  if (isMaster()) {
    List<Address> lsDeadAddresses=null;
    for (    MemberImpl memberImpl : lsMembers) {
      final Address address=memberImpl.getAddress();
      if (!thisAddress.equals(address)) {
        try {
          Connection conn=ConnectionManager.get().getConnection(address);
          if (conn != null && conn.live()) {
            if ((now - memberImpl.getLastRead()) >= 10000) {
              conn=null;
              if (lsDeadAddresses == null) {
                lsDeadAddresses=new ArrayList<Address>();
              }
              lsDeadAddresses.add(address);
            }
          }
          if (conn != null && conn.live()) {
            if ((now - memberImpl.getLastWrite()) > 500) {
              Invocation inv=obtainServiceInvocation("heartbeat",null,null,OP_HEARTBEAT,0);
              send(inv,address);
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    if (lsDeadAddresses != null) {
      for (      Address address : lsDeadAddresses) {
        logger.log(Level.FINEST,"NO HEARTBEAT should remove " + address);
        doRemoveAddress(address);
        sendRemoveMemberToOthers(address);
      }
    }
  }
 else {
    if (getMasterAddress() != null) {
      MemberImpl masterMember=getMember(getMasterAddress());
      boolean removed=false;
      if (masterMember != null) {
        if ((now - masterMember.getLastRead()) >= 10000) {
          doRemoveAddress(getMasterAddress());
          removed=true;
        }
      }
      if (!removed) {
        Invocation inv=obtainServiceInvocation("heartbeat",null,null,OP_HEARTBEAT,0);
        send(inv,getMasterAddress());
      }
    }
    for (    MemberImpl member : lsMembers) {
      if (!member.localMember()) {
        Address address=member.getAddress();
        if (shouldConnectTo(address)) {
          Connection conn=ConnectionManager.get().getOrConnect(address);
          if (conn != null) {
            Invocation inv=obtainServiceInvocation("heartbeat",null,null,OP_HEARTBEAT,0);
            send(inv,conn);
          }
        }
      }
    }
  }
}
