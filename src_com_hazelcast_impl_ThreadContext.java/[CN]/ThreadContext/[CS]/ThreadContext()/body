{
  int bufferCacheSize=12;
  int packetCacheSize=0;
  String threadName=Thread.currentThread().getName();
  if (threadName.startsWith("hz.")) {
    if ("hz.InThread".equals(threadName)) {
      bufferCacheSize=100;
      packetCacheSize=100;
    }
 else     if ("hz.OutThread".equals(threadName)) {
      bufferCacheSize=0;
      packetCacheSize=0;
    }
 else     if ("hz.ServiceThread".equals(threadName)) {
      bufferCacheSize=100;
      packetCacheSize=100;
    }
  }
  logger.log(Level.FINEST,threadName + " is starting with cacheSize " + bufferCacheSize);
  ObjectFactory<ByteBuffer> byteBufferCacheFactory=new ObjectFactory<ByteBuffer>(){
    public ByteBuffer createNew(){
      return ByteBuffer.allocate(1024);
    }
  }
;
  bufferCache=new ObjectPool<ByteBuffer>("BufferCache",byteBufferCacheFactory,bufferCacheSize,bufferq);
  ObjectFactory<Packet> packetCacheFactory=new ObjectFactory<Packet>(){
    public Packet createNew(){
      return PacketQueue.get().createNewPacket();
    }
  }
;
  packetCache=new ObjectPool<Packet>("PacketCache",packetCacheFactory,packetCacheSize,PacketQueue.get().qPackets);
  ObjectFactory<Data> dataCacheFactory=new ObjectFactory<Data>(){
    public Data createNew(){
      return new Data();
    }
  }
;
}
