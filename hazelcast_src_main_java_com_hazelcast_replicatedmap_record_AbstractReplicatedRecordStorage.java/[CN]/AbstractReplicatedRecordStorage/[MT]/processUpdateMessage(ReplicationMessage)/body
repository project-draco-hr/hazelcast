{
  if (localMember.equals(update.getOrigin())) {
    return;
  }
synchronized (getMutex(marshallKey(update.getKey()))) {
    final ReplicatedRecord<K,V> localEntry=storage.get(update.getKey());
    if (localEntry == null) {
      if (!update.isRemove()) {
        K key=(K)update.getKey();
        V value=(V)update.getValue();
        Vector vector=update.getVector();
        int updateHash=update.getUpdateHash();
        storage.put(key,new ReplicatedRecord<K,V>(key,value,vector,updateHash));
      }
    }
 else {
      final Vector currentVector=localEntry.getVector();
      final Vector updateVector=update.getVector();
      if (Vector.happenedBefore(updateVector,currentVector)) {
      }
 else       if (Vector.happenedBefore(currentVector,updateVector)) {
        applyTheUpdate(update,localEntry);
      }
 else {
        if (localEntry.getLatestUpdateHash() >= update.getUpdateHash()) {
          applyTheUpdate(update,localEntry);
        }
 else {
          applyVector(updateVector,currentVector);
          publishReplicatedMessage(new ReplicationMessage(name,update.getKey(),localEntry.getValue(),currentVector,localMember,localEntry.getLatestUpdateHash()));
        }
      }
    }
  }
}
