{
  GlobalSerializerConfig globalSerializerConfig=new GlobalSerializerConfig();
  globalSerializerConfig.setOverrideJavaSerialization(true);
  final AtomicInteger writeCounter=new AtomicInteger();
  final AtomicInteger readCounter=new AtomicInteger();
  final JavaDefaultSerializers.JavaSerializer javaSerializer=new JavaDefaultSerializers.JavaSerializer(true,false);
  SerializationConfig serializationConfig=new SerializationConfig().setGlobalSerializerConfig(globalSerializerConfig.setImplementation(new StreamSerializer<Object>(){
    public void write(    ObjectDataOutput out,    Object v) throws IOException {
      writeCounter.incrementAndGet();
      if (v instanceof Serializable) {
        out.writeBoolean(true);
        javaSerializer.write(out,v);
      }
 else       if (v instanceof DummyValue) {
        out.writeBoolean(false);
        out.writeUTF(((DummyValue)v).s);
        out.writeInt(((DummyValue)v).k);
      }
    }
    public Object read(    ObjectDataInput in) throws IOException {
      readCounter.incrementAndGet();
      boolean java=in.readBoolean();
      if (java) {
        return javaSerializer.read(in);
      }
      return new DummyValue(in.readUTF(),in.readInt());
    }
    public int getTypeId(){
      return 123;
    }
    public void destroy(){
    }
  }
));
  SerializationService ss1=new DefaultSerializationServiceBuilder().setConfig(serializationConfig).build();
  DummyValue value=new DummyValue("test",111);
  Data data1=ss1.toData(value);
  Data data2=ss1.toData(new Foo());
  Assert.assertNotNull(data1);
  Assert.assertNotNull(data2);
  assertEquals(2,writeCounter.get());
  SerializationService ss2=new DefaultSerializationServiceBuilder().setConfig(serializationConfig).build();
  Object o1=ss2.toObject(data1);
  Object o2=ss2.toObject(data2);
  Assert.assertEquals(value,o1);
  Assert.assertNotNull(o2);
  assertEquals(2,readCounter.get());
}
