{
  bbSizes.clear();
  bbHeader.clear();
  bbHeader.putShort(operation.getValue());
  bbHeader.putInt(blockId);
  bbHeader.putInt(threadId);
  byte flags=0;
  if (lockCount != 0) {
    flags=ByteUtil.setTrue(flags,0);
  }
  if (timeout != -1) {
    flags=ByteUtil.setTrue(flags,1);
  }
  if (ttl != -1) {
    flags=ByteUtil.setTrue(flags,2);
  }
  if (txnId != -1) {
    flags=ByteUtil.setTrue(flags,3);
  }
  if (longValue != Long.MIN_VALUE) {
    flags=ByteUtil.setTrue(flags,4);
  }
  if (version != -1) {
    flags=ByteUtil.setTrue(flags,5);
  }
  if (client) {
    flags=ByteUtil.setTrue(flags,6);
  }
  if (lockAddress == null) {
    flags=ByteUtil.setTrue(flags,7);
  }
  bbHeader.put(flags);
  if (lockCount != 0) {
    bbHeader.putInt(lockCount);
  }
  if (timeout != -1) {
    bbHeader.putLong(timeout);
  }
  if (ttl != -1) {
    bbHeader.putLong(ttl);
  }
  if (txnId != -1) {
    bbHeader.putLong(txnId);
  }
  if (longValue != Long.MIN_VALUE) {
    bbHeader.putLong(longValue);
  }
  if (version != -1) {
    bbHeader.putLong(version);
  }
  if (lockAddress != null) {
    lockAddress.writeObject(bbHeader);
  }
  bbHeader.putLong(callId);
  bbHeader.put(responseType);
  putString(bbHeader,name);
  byte indexCount=(indexes == null) ? 0 : (byte)indexes.length;
  bbHeader.put(indexCount);
  for (byte i=0; i < indexCount; i++) {
    bbHeader.putLong(indexes[i]);
    bbHeader.put(indexTypes[i]);
  }
  bbHeader.putInt(key == null ? -1 : key.partitionHash);
  bbHeader.putInt(value == null ? -1 : value.partitionHash);
  bbHeader.put(redoData);
  bbHeader.flip();
  bbSizes.putInt(bbHeader.limit());
  bbSizes.putInt(key == null ? 0 : key.size);
  bbSizes.putInt(value == null ? 0 : value.size);
  bbSizes.put(PACKET_VERSION);
  bbSizes.flip();
  totalSize=0;
  totalSize+=bbSizes.limit();
  totalSize+=bbHeader.limit();
  totalSize+=key == null ? 0 : key.size;
  totalSize+=value == null ? 0 : value.size;
}
