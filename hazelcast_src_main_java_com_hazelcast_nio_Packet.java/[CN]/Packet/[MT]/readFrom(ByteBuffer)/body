{
  if (!stHeader) {
    if (!source.hasRemaining()) {
      return false;
    }
    header=source.get();
    stHeader=true;
  }
  if (value == null) {
    value=new Data();
  }
  if (!stType) {
    if (source.remaining() < 4) {
      return false;
    }
    value.type=source.getInt();
    stType=true;
  }
  if (!stClassId) {
    if (source.remaining() < 4) {
      return false;
    }
    classId=source.getInt();
    stClassId=true;
    if (classId == Data.NO_CLASS_ID) {
      stVersion=true;
      stClassDefSize=true;
      stClassDef=true;
    }
  }
  if (!stVersion) {
    if (source.remaining() < 4) {
      return false;
    }
    version=source.getInt();
    stVersion=true;
  }
  if (!stClassDef) {
    ClassDefinition cd;
    if ((cd=context.lookup(classId,version)) != null) {
      value.cd=cd;
      stClassDefSize=true;
      stClassDef=true;
    }
 else {
      if (!stClassDefSize) {
        if (source.remaining() < 4) {
          return false;
        }
        classDefSize=source.getInt();
        stClassDefSize=true;
      }
      if (!stClassDef) {
        if (source.remaining() < classDefSize) {
          return false;
        }
        final byte[] binary=new byte[classDefSize];
        source.get(binary);
        value.cd=new ClassDefinitionBinaryProxy(classId,version,binary);
        stClassDef=true;
      }
    }
  }
  if (!stSize) {
    if (source.remaining() < 4) {
      return false;
    }
    final int size=source.getInt();
    buffer=ByteBuffer.allocate(size);
    stSize=true;
  }
  if (!stValue) {
    IOUtil.copyToHeapBuffer(source,buffer);
    if (buffer.hasRemaining()) {
      return false;
    }
    buffer.flip();
    value.buffer=buffer.array();
    stValue=true;
  }
  if (!stHash) {
    if (source.remaining() < 4) {
      return false;
    }
    value.setPartitionHash(source.getInt());
    stHash=true;
  }
  return true;
}
