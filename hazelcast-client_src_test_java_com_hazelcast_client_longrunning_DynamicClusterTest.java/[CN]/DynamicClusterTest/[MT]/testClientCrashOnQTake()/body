{
  Config config=new Config();
  final HazelcastInstance h=Hazelcast.newHazelcastInstance(config);
  final HazelcastClient client=newHazelcastClient(h);
  final String qName="testClientCrashOnQTake";
  final String mName="q:testClientCrashOnQTake";
  h.getMap(mName).addEntryListener(new EntryListener<Object,Object>(){
    public void entryAdded(    EntryEvent<Object,Object> objectObjectEntryEvent){
      System.out.println("Added " + objectObjectEntryEvent);
    }
    public void entryRemoved(    EntryEvent<Object,Object> objectObjectEntryEvent){
      System.out.println("Removed " + objectObjectEntryEvent);
    }
    public void entryUpdated(    EntryEvent<Object,Object> objectObjectEntryEvent){
    }
    public void entryEvicted(    EntryEvent<Object,Object> objectObjectEntryEvent){
    }
  }
,true);
  new Thread(new Runnable(){
    public void run(){
      try {
        client.getQueue(qName).take();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
  Thread.sleep(1000);
  client.shutdown();
  Thread.sleep(10000);
  assertEquals(0,h.getQueue(qName).size());
  h.getQueue(qName).offer("message");
  assertEquals(1,h.getMap(mName).size());
  System.out.println(h.getMap(mName).entrySet().iterator().next());
  System.out.println(h.getQueue(qName).poll());
  assertEquals(1,h.getQueue(qName).size());
  h.getLifecycleService().shutdown();
}
