{
  client=getHazelcastClient();
  List list=client.getList("testGetInstancesCreatedFromClient");
  Map map=client.getMap("testGetInstancesCreatedFromClient");
  MultiMap mmap=client.getMultiMap("testGetInstancesCreatedFromClient");
  Queue q=client.getQueue("testGetInstancesCreatedFromClient");
  Set set=client.getSet("testGetInstancesCreatedFromClient");
  ITopic topic=client.getTopic("testGetInstancesCreatedFromClient");
  Lock lock=client.getLock("testGetInstancesCreatedFromClient");
  Collection<Instance> caches=client.getInstances();
  assertEquals(0,caches.size());
  List listOfInstances=new ArrayList();
  listOfInstances.add(list);
  listOfInstances.add(map);
  listOfInstances.add(mmap);
  listOfInstances.add(q);
  listOfInstances.add(set);
  listOfInstances.add(topic);
  listOfInstances.add(lock);
  list.add("List");
  map.put("key","value");
  assertEquals(2,client.getInstances().size());
  mmap.put("key","value1");
  q.offer("Element");
  assertEquals(4,client.getInstances().size());
  set.add("element");
  topic.publish("Message");
  caches=client.getInstances();
  for (Iterator<Instance> instanceIterator=caches.iterator(); instanceIterator.hasNext(); ) {
    Instance instance=instanceIterator.next();
    assertTrue(instance.getId().toString().endsWith("testGetInstancesCreatedFromClient"));
    assertTrue(listOfInstances.contains(instance));
    instance.destroy();
  }
}
