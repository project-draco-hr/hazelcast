{
  final int ENTRY_COUNT=100;
  final String cacheName=randomName();
  CacheManager cacheManager=cachingProvider.getCacheManager();
  assertNotNull(cacheManager);
  assertNull(cacheManager.getCache(cacheName));
  PutCacheWriter putCacheWriter;
  if (acceptAll) {
    putCacheWriter=new PutCacheWriter();
  }
 else {
    putCacheWriter=new PutCacheWriter(new MaxValueChecker(ENTRY_COUNT));
  }
  CacheConfig<Integer,Integer> config=createCacheConfig();
  config.setWriteThrough(true);
  config.setCacheWriterFactory(FactoryBuilder.factoryOf(putCacheWriter));
  ICache<Integer,Integer> cache=cacheManager.createCache(cacheName,config).unwrap(ICache.class);
  assertNotNull(cache);
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,i);
  }
  assertEquals(ENTRY_COUNT,cache.size());
  Map<Integer,Integer> keysAndValues=new HashMap<Integer,Integer>();
  for (int i=0; i < ENTRY_COUNT; i++) {
    int oldValue=cache.get(i);
    int newValue=ENTRY_COUNT + i;
    try {
      cache.put(i,newValue);
      keysAndValues.put(i,newValue);
    }
 catch (    CacheWriterException e) {
      keysAndValues.put(i,oldValue);
    }
  }
  assertEquals(ENTRY_COUNT,cache.size());
  for (int i=0; i < ENTRY_COUNT; i++) {
    Integer expectedValue=keysAndValues.get(i);
    assertNotNull(expectedValue);
    Integer actualValue=cache.get(i);
    assertNotNull(actualValue);
    assertEquals(expectedValue,actualValue);
  }
}
