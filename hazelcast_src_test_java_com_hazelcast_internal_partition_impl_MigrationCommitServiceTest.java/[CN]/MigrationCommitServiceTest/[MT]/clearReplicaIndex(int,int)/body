{
  final InternalPartitionServiceImpl partitionService=(InternalPartitionServiceImpl)getPartitionService(instances[0]);
  final InternalPartitionImpl partition=(InternalPartitionImpl)partitionService.getPartition(partitionId);
  final Address oldReplicaOwner=partition.getReplicaAddress(replicaIndexToClear);
  ClearReplicaOperation op=new ClearReplicaOperation();
  op.setPartitionId(partitionId).setReplicaIndex(replicaIndexToClear).setService(partitionService);
  final InvocationBuilder builder=getOperationService(instances[0]).createInvocationBuilder(InternalPartitionService.SERVICE_NAME,op,partitionId);
  builder.setReplicaIndex(replicaIndexToClear).invoke().get();
  partition.setReplicaAddress(replicaIndexToClear,null);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertTrue(partitionService.syncPartitionRuntimeState());
    }
  }
);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      final TestMigrationAwareService service=getService(oldReplicaOwner);
      assertFalse(service.contains(partitionId));
      final long[] replicaVersions=TestPartitionUtils.getReplicaVersions(factory.getInstance(oldReplicaOwner),partitionId);
      assertArrayEquals(new long[InternalPartition.MAX_BACKUP_COUNT],replicaVersions);
    }
  }
);
  for (  HazelcastInstance instance : instances) {
    final TestMigrationAwareService service=getNodeEngineImpl(instance).getService(TestMigrationAwareService.SERVICE_NAME);
    service.clearEvents();
  }
  return oldReplicaOwner;
}
