{
  final Random rnd=new Random();
  for (int i=0; i < THREAD_COUNT; i++) {
    new Thread(){
      public void run(){
        while (true) {
          int random=rnd.nextInt(100);
          if (random > 54) {
            q.poll();
            totalPoll.incrementAndGet();
          }
 else           if (random > 4) {
            q.offer(VALUE);
            totalOffer.incrementAndGet();
          }
 else {
            q.peek();
            totalPeek.incrementAndGet();
          }
        }
      }
    }
.start();
  }
  new Thread(){
    public void run(){
      while (true) {
        try {
          int size=q.size();
          if (size > 50000) {
            System.err.println("cleaning a little");
            for (int i=0; i < 20000; i++) {
              q.poll();
              totalPoll.incrementAndGet();
            }
            Thread.sleep(2 * 1000);
          }
 else {
            Thread.sleep(10 * 1000);
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
.start();
  while (true) {
    long sleepTime=10;
    Thread.sleep(sleepTime * 1000);
    long totalOfferVal=totalOffer.getAndSet(0);
    long totalPollVal=totalPoll.getAndSet(0);
    long totalPeekVal=totalPeek.getAndSet(0);
    System.err.println("_______________________________________________________________________________________");
    System.err.println(" offer: " + totalOfferVal + ",\t poll: "+ totalPollVal+ ",\t peek: "+ totalPeekVal);
    System.err.println(" size: " + q.size() + " \t speed: "+ ((totalOfferVal + totalPollVal + totalPeekVal) / sleepTime));
    System.err.println("---------------------------------------------------------------------------------------");
    System.err.println("");
  }
}
