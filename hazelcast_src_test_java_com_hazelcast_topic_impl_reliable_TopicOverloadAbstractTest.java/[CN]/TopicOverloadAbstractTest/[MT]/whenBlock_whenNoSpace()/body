{
  for (int k=0; k < ringbuffer.capacity(); k++) {
    topic.publish("old");
  }
  final long tail=ringbuffer.tailSequence();
  final long head=ringbuffer.headSequence();
  final Future f=spawn(new Runnable(){
    @Override public void run(){
      topic.publish("new");
    }
  }
);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      assertFalse(f.isDone());
      assertEquals(tail,ringbuffer.tailSequence());
      assertEquals(head,ringbuffer.headSequence());
    }
  }
,5);
  assertCompletesEventually(f);
}
