{
  String xmlFileName="test-hazelcast-discovery-spi.xml";
  InputStream xmlResource=DiscoverySpiTest.class.getClassLoader().getResourceAsStream(xmlFileName);
  Config config=new XmlConfigBuilder(xmlResource).build();
  config.getNetworkConfig().setPort(50001);
  InterfacesConfig interfaces=config.getNetworkConfig().getInterfaces();
  interfaces.clear();
  interfaces.setEnabled(true);
  interfaces.addInterface("127.0.0.1");
  List<DiscoveryNode> discoveryNodes=new CopyOnWriteArrayList<DiscoveryNode>();
  DiscoveryStrategyFactory factory=new CollectingDiscoveryStrategyFactory(discoveryNodes);
  DiscoveryConfig discoveryConfig=config.getNetworkConfig().getJoin().getDiscoveryConfig();
  discoveryConfig.getDiscoveryStrategyConfigs().clear();
  DiscoveryStrategyConfig strategyConfig=new DiscoveryStrategyConfig(factory,Collections.<String,Comparable>emptyMap());
  discoveryConfig.addDiscoveryProviderConfig(strategyConfig);
  try {
    final HazelcastInstance hazelcastInstance1=Hazelcast.newHazelcastInstance(config);
    final HazelcastInstance hazelcastInstance2=Hazelcast.newHazelcastInstance(config);
    final HazelcastInstance hazelcastInstance3=Hazelcast.newHazelcastInstance(config);
    assertNotNull(hazelcastInstance1);
    assertNotNull(hazelcastInstance2);
    assertNotNull(hazelcastInstance3);
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(3,hazelcastInstance1.getCluster().getMembers().size());
        assertEquals(3,hazelcastInstance2.getCluster().getMembers().size());
        assertEquals(3,hazelcastInstance3.getCluster().getMembers().size());
      }
    }
);
  }
  finally {
    Hazelcast.shutdownAll();
  }
}
