{
  final IMap<Integer,Integer> map=getInstance().getMap("testEntryView");
  long time1=Clock.currentTimeMillis();
  map.put(1,1);
  map.put(2,2);
  map.put(3,3);
  long time2=Clock.currentTimeMillis();
  map.get(3);
  map.get(3);
  long time3=Clock.currentTimeMillis();
  map.put(2,22);
  EntryView<Integer,Integer> entryView1=map.getEntryView(1);
  EntryView<Integer,Integer> entryView2=map.getEntryView(2);
  EntryView<Integer,Integer> entryView3=map.getEntryView(3);
  assertEquals((Integer)1,entryView1.getKey());
  assertEquals((Integer)2,entryView2.getKey());
  assertEquals((Integer)3,entryView3.getKey());
  assertEquals((Integer)1,entryView1.getValue());
  assertEquals((Integer)22,entryView2.getValue());
  assertEquals((Integer)3,entryView3.getValue());
  assertEquals(0,entryView1.getHits());
  assertEquals(1,entryView2.getHits());
  assertEquals(2,entryView3.getHits());
  assertEquals(0,entryView1.getVersion());
  assertEquals(1,entryView2.getVersion());
  assertEquals(0,entryView3.getVersion());
  assertTrue(entryView1.getCreationTime() >= time1 && entryView1.getCreationTime() <= time2);
  assertTrue(entryView2.getCreationTime() >= time1 && entryView2.getCreationTime() <= time2);
  assertTrue(entryView3.getCreationTime() >= time1 && entryView3.getCreationTime() <= time2);
  assertTrue(entryView1.getLastAccessTime() >= time1 && entryView1.getLastAccessTime() <= time2);
  assertTrue(entryView2.getLastAccessTime() >= time3);
  assertTrue(entryView3.getLastAccessTime() >= time2 && entryView3.getLastAccessTime() <= time3);
  assertTrue(entryView1.getLastUpdateTime() >= time1 && entryView1.getLastUpdateTime() <= time2);
  assertTrue(entryView2.getLastUpdateTime() >= time3);
  assertTrue(entryView3.getLastUpdateTime() >= time1 && entryView3.getLastUpdateTime() <= time2);
}
