{
  ClusterService.get().registerPacketProcessor(OP_CMAP_GET,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleGet(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_PUT,new PacketProcessor(){
    public void process(    Packet packet){
      handlePut(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_BACKUP_PUT_SYNC,new PacketProcessor(){
    public void process(    Packet packet){
      handleBackupSync(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_BACKUP_REMOVE_SYNC,new PacketProcessor(){
    public void process(    Packet packet){
      handleBackupSync(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_BACKUP_LOCK_SYNC,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleBackupSync(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_PUT_MULTI,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handlePutMulti(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_BACKUP_ADD,new PacketProcessor(){
    public void process(    Packet packet){
      handleBackupAdd(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_REMOVE,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleRemove(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_REMOVE_IF_SAME,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleRemove(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_LOCK,new PacketProcessor(){
    public void process(    Packet packet){
      handleLock(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_LOCK_RETURN_OLD,new PacketProcessor(){
    public void process(    Packet packet){
      handleLock(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_UNLOCK,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleLock(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_READ,new PacketProcessor(){
    public void process(    Packet packet){
      handleRead(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_SIZE,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleSize(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_ADD_TO_LIST,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleAdd(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_ADD_TO_SET,new PacketProcessor(){
    public void process(    Packet packet){
      handleAdd(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_CONTAINS,new PacketProcessor(){
    public void process(    Packet packet){
      handleContains(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_BLOCK_INFO,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleBlockInfo(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_BLOCKS,new PacketProcessor(){
    public void process(    Packet packet){
      handleBlocks(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_PUT_IF_ABSENT,new PacketProcessor(){
    public void process(    Packet packet){
      handlePut(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_REPLACE_IF_NOT_NULL,new PacketProcessor(){
    public void process(    Packet packet){
      handlePut(packet);
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_MIGRATION_COMPLETE,new PacketProcessor(){
    public void process(    Packet packet){
      doMigrationComplete(packet.conn.getEndPoint());
    }
  }
);
  ClusterService.get().registerPacketProcessor(OP_CMAP_MIGRATE_RECORD,new PacketProcessor(){
    public void process(    PacketQueue.Packet packet){
      handleMigrateRecord(packet);
    }
  }
);
}
