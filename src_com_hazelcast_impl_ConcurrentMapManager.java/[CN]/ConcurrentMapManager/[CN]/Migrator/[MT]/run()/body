{
  logger.log(Level.FINEST,"Migration started!");
  CheckAllConnectionsOp checkAllConnectionsOp=new CheckAllConnectionsOp();
  checkAllConnectionsOp.check();
  for (  final Long recordId : recordsToMigrate) {
    MMigrate mmigrate=new MMigrate();
    boolean migrated=mmigrate.migrate(recordId);
    if (!migrated) {
      logger.log(Level.FINEST,"couldn't migrate " + recordId);
    }
  }
  Processable removeMigratedRecordsProcess=new Processable(){
    public void process(){
      for (      final Long recordId : recordsToMigrate) {
        Record record=getRecordById(recordId);
        if (record != null) {
          Block block=getBlock(record.key);
          if (!backupMemberFor(block)) {
            CMap cmap=getMap(record.name);
            cmap.removeRecord(record.key);
          }
        }
      }
    }
  }
;
  enqueueAndReturn(removeMigratedRecordsProcess);
  if (recordsToBackup != null) {
    int count=0;
    MBackupOp mbackupOp=new MBackupOp();
    for (    final Long recordId : recordsToBackup) {
      Record record=getRecordById(recordId);
      if (record != null) {
        mbackupOp.backup(record);
        if (count++ > 10) {
          count=0;
          try {
            Thread.sleep(1);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  Processable processCompletion=new Processable(){
    public void process(){
      doMigrationComplete(thisAddress);
      sendMigrationComplete();
      if (DEBUG) {
        printBlocks();
        logger.log(Level.FINEST,"Migration ended!");
      }
    }
  }
;
  enqueueAndReturn(processCompletion);
}
