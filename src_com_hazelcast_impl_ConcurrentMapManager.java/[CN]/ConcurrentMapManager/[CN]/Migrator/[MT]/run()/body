{
  logger.log(Level.FINEST,"Migration started!");
  CheckAllConnectionsOp checkAllConnectionsOp=new CheckAllConnectionsOp();
  checkAllConnectionsOp.check();
  for (  final Long recordId : recordsToMigrate) {
    MMigrate mmigrate=new MMigrate();
    boolean migrated=mmigrate.migrate(recordId);
    if (!migrated) {
      logger.log(Level.FINEST,"couldn't migrate " + recordId);
    }
  }
  List<MBackupSync> lsMBackupSyncs=new ArrayList<MBackupSync>();
  if (backups != null) {
    for (    RecordBackupInfo bi : backups) {
      for (int i=0; i < bi.backupCount; i++) {
        MBackupSync mbackup=new MBackupSync();
        mbackup.sendBackupPut(bi.recordId,i + 1);
      }
    }
  }
  int backupOpSize=lsMBackupSyncs.size();
  for (int i=0; i < backupOpSize; i++) {
    lsMBackupSyncs.get(i).getResultAsBoolean();
  }
  Processable processCompletion=new Processable(){
    public void process(){
      doMigrationComplete(thisAddress);
      sendMigrationComplete();
      if (DEBUG) {
        printBlocks();
        logger.log(Level.FINEST,"Migration ended!");
      }
    }
  }
;
  enqueueAndReturn(processCompletion);
}
