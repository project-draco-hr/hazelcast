{
  if (isSuperClient())   return;
  Set<Long> recordsToMigrate=new HashSet<Long>(1000);
  Set<Long> recordsToBackup=new HashSet<Long>(1000);
  Set<Long> recordsToRemove=new HashSet<Long>(1000);
  int sendOwn=0;
  int removed=0;
  int sendBackup=0;
  int migrationOwner=0;
  int ownerBackup=0;
  int migrationBackup=0;
  Collection<Record> colRecords=mapRecordsById.values();
  for (  Record rec : colRecords) {
    Block block=mapBlocks.get(rec.getBlockId());
    if (block.owner.equals(thisAddress)) {
      if (block.isMigrating()) {
        recordsToMigrate.add(rec.getId());
        sendOwn++;
      }
 else {
        rec.setOwner(thisAddress);
        recordsToBackup.add(rec.getId());
        sendBackup++;
      }
    }
 else     if (block.isMigrating() && block.migrationAddress.equals(thisAddress)) {
      rec.owner=thisAddress;
      migrationOwner++;
    }
 else {
      if (block.isMigrating()) {
        MemberImpl nextAfterMigration=getNextMemberAfter(block.migrationAddress);
        if (nextAfterMigration != null && nextAfterMigration.getAddress().equals(thisAddress)) {
          rec.owner=block.migrationAddress;
          migrationBackup++;
        }
 else {
          recordsToRemove.add(rec.getId());
        }
      }
 else {
        MemberImpl nextAfterOwner=getNextMemberAfter(block.owner);
        if (nextAfterOwner != null && nextAfterOwner.getAddress().equals(thisAddress)) {
          rec.owner=block.owner;
          ownerBackup++;
        }
 else {
          recordsToRemove.add(rec.getId());
        }
      }
    }
  }
  for (  Long recordId : recordsToRemove) {
    Record rec=getRecordById(recordId);
    if (rec != null) {
      CMap cmap=getMap(rec.name);
      cmap.removeRecord(rec.key);
      removed++;
    }
  }
  if (DEBUG) {
    log("SendOwn:        " + sendOwn);
    log("SendBackup:     " + sendBackup);
    log("MigrationOwner: " + migrationOwner);
    log("OwnerBackup:    " + ownerBackup);
    log("MigrationBackup:" + migrationBackup);
    log("Removed:        " + removed);
  }
  executeLocally(new Migrator(recordsToBackup,recordsToMigrate));
}
