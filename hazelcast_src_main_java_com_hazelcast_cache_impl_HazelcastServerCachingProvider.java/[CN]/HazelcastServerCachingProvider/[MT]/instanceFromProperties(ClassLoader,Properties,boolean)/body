{
  ClassLoader theClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
  HazelcastInstance instance=null;
  String location=properties.getProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION);
  if (location != null) {
    URI uri=new URI(location);
    String scheme=uri.getScheme();
    if (scheme == null) {
      uri=new URI(System.getProperty(uri.getRawSchemeSpecificPart()));
    }
    final URL configURL;
    if ("classpath".equals(scheme)) {
      configURL=theClassLoader.getResource(uri.getRawSchemeSpecificPart());
    }
 else     if ("file".equals(scheme) || "http".equals(scheme) || "https".equals(scheme)) {
      configURL=uri.toURL();
    }
 else {
      throw new URISyntaxException(location,"Unsupported protocol in configuration location URL");
    }
    try {
      Config config=new XmlConfigBuilder(configURL).build();
      config.setClassLoader(theClassLoader);
      config.setInstanceName(configURL.toString());
      instance=HazelcastInstanceFactory.getOrCreateHazelcastInstance(config);
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
  String instanceName=properties.getProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME);
  if (instanceName != null) {
    instance=Hazelcast.getHazelcastInstanceByName(instanceName);
  }
  if (isDefault) {
    Config config=new XmlConfigBuilder().build();
    if (config.getInstanceName() == null) {
      config.setInstanceName("JCacheSharedInstance");
    }
    instance=HazelcastInstanceFactory.getOrCreateHazelcastInstance(config);
  }
  return instance;
}
