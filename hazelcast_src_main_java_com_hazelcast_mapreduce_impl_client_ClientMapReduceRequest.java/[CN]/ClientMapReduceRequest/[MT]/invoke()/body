{
  try {
    final ClientEndpoint endpoint=getEndpoint();
    MapReduceService mapReduceService=getService();
    NodeEngine nodeEngine=mapReduceService.getNodeEngine();
    AbstractJobTracker jobTracker=(AbstractJobTracker)mapReduceService.createDistributedObject(name);
    TrackableJobFuture jobFuture=new TrackableJobFuture(name,jobId,jobTracker,nodeEngine,null);
    if (jobTracker.registerTrackableJob(jobFuture)) {
      ICompletableFuture<Object> future=startSupervisionTask(jobFuture,mapReduceService,nodeEngine,jobTracker);
      future.andThen(new ExecutionCallback<Object>(){
        @Override public void onResponse(        Object response){
          endpoint.sendResponse(response,getCallId());
        }
        @Override public void onFailure(        Throwable t){
          if (t instanceof ExecutionException) {
            t=t.getCause();
          }
          endpoint.sendResponse(t,getCallId());
        }
      }
);
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException("Could not register map reduce job",e);
  }
}
